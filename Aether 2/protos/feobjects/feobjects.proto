// Protos for the core API structs. This is what we will be using when we're sending data from backend to frontend.

syntax = "proto3";

option go_package = "aether-core/protos/feobjects";

package feobjects;

message CompiledBoardEntity {
  string Fingerprint = 1;
  bool SelfCreated = 2;
  string Name = 3;
  string Description = 4;
  CompiledContentSignalsEntity CompiledContentSignals = 5;
  CompiledUserEntity Owner = 6;
  repeated string BoardOwners = 7;
  int64 Creation = 8;
  int64 LastUpdate = 9;
  string Meta = 10;
  repeated CompiledThreadEntity ChildThreads = 11;
  int32 ThreadsCount = 12;
  int32 UserCount = 13;
  bool Subscribed = 14;
  bool Notify = 15;
  int64 LastSeen = 16;
  bool SFWListed = 17;
}

message CompiledThreadEntity {
  string Fingerprint = 1;
  string Board = 2;
  bool SelfCreated = 3;
  string Name = 4;
  string Body = 5;
  string Link = 6;
  CompiledContentSignalsEntity CompiledContentSignals = 7;
  CompiledUserEntity Owner = 8;
  int64 Creation = 9;
  int64 LastUpdate = 10;
  string Meta = 11;
  repeated CompiledPostEntity Children = 12;
  int32 PostsCount = 13;
  double Score = 14; // double == float64
}

message CompiledPostEntity {
 string Fingerprint = 1;
 string Board = 2;
 string Thread = 3;
 string Parent = 4;
 bool SelfCreated = 5;
 string Body = 6;
 CompiledContentSignalsEntity CompiledContentSignals = 7;
 CompiledUserEntity Owner = 8;
 int64 Creation = 9;
 int64 LastUpdate = 10;
 string Meta = 11;
 repeated CompiledPostEntity Children = 12;
}

message CompiledUserEntity {
  string Fingerprint = 1;
  string NonCanonicalName = 2;
  int64 Creation = 3;
  int64 LastUpdate = 4;
  int64 LastRefreshed = 5;
  CompiledUserSignalsEntity CompiledUserSignals = 6;
  int64 Expiry = 7;
  string Info = 8;
  string Meta = 9;
}

message CompiledContentSignalsEntity {
  string TargetFingerprint = 1;
  // ATD
  int32 Upvotes = 2;
  int32 Downvotes = 3;
  bool SelfUpvoted = 4;
  bool SelfDownvoted = 5;
  int64 SelfATDCreation = 6;
  int64 SelfATDLastUpdate = 7;
  string SelfATDFingerprint = 8;
  repeated ExplainedSignalEntity Reports = 9;
  // bool SelfReported = 10;
  repeated ExplainedSignalEntity ModBlocks = 11;
  repeated ExplainedSignalEntity ModApprovals = 12;
  bool ByMod = 13;
  bool ByFollowedPerson = 14;
  bool ByBlockedPerson = 15;
  bool ByOP = 16;
  bool ModBlocked = 17;
  bool ModApproved = 18;
  int64 LastRefreshed = 19;
  bool SelfModApproved = 20;
  bool SelfModBlocked = 21;
  bool SelfModIgnored = 22;
  bool SelfReported = 23;
}

message ExplainedSignalEntity {
  string SourceFp = 1;
  string Reason = 2;
  int64 Creation = 3;
  int64 LastUpdate = 4;
}

message CompiledUserSignalsEntity {
  string TargetFingerprint = 1;
  string Domain = 2;
  bool FollowedBySelf = 3;
  bool BlockedBySelf = 4;
  int32 FollowerCount = 5;
  string CanonicalName = 6;
  string CNameSourceFingerprint = 7;
  string SelfPEFingerprint = 8;
  int64 SelfPECreation = 9;
  int64 SelfPELastUpdate = 10;
  bool MadeModBySelf = 11;
  bool MadeNonModBySelf = 12;
  bool MadeModByDefault = 13;
  bool MadeModByNetwork = 14;
  bool MadeNonModByNetwork = 15;
}

message AmbientBoardEntity {
  string Fingerprint = 1;
  string Name = 2;
  int64 LastUpdate = 3;
  int64 LastSeen = 4;
  bool Notify = 5;
}

/*----------  Ambient status messages  ----------*/

// This is the status of the backend and what it is doing
message BackendAmbientStatus {
  /*----------  NETWORK  ----------*/
  /*----------  Inbounds  ----------*/
  int64 LastInboundConnTimestamp = 1;
  int32 InboundsCount15 = 2;
  /*----------  Outbounds  ----------*/
  int64 LastOutboundConnTimestamp = 3;
  int32 OutboundsCount15 = 4;
  int32 LastOutboundDurationSeconds = 5;
  /*----------  Misc  ----------*/
  string LocalNodeExternalIP = 6;
  int32 LocalNodeExternalPort = 7;
  string UPNPStatus = 8;
  /*----------  DATABASE  ----------*/
  string DatabaseStatus = 9;
  int64 DbSizeMb = 10;
  int64 MaxDbSizeMb = 11;
  int64 LastDbInsertTimestamp = 12;
  int32 LastInsertDurationSeconds = 13;
  /*----------  CACHING  ----------*/
  string CachingStatus = 14;
  int64 LastCacheGenerationTimestamp = 15;
  int32 LastCacheGenerationDurationSeconds = 16;
  /*----------  CONFIG LOCATION  ----------*/
  string BackendConfigLocation = 17;

}

/*----------  Frontend status messages  ----------*/
/*
  This is fragmented over a few message types. This is because when we push a message, we want to know which parts of the message we should care about. In other words, pushing an ambient status to the client should not mean that we lose backend status data since those would be unset. If you use primitive types, then there is no way to determine if a field is set but set to zero, or if it was not set at all. When you split to messages, you can determine whether a message is present.

  Anything in the same message though, they need to be set together, because their absence is indistinguishable from the zero value.
*/

message FrontendAmbientStatus {
  string RefresherStatus = 1;
  int64 LastRefreshTimestamp = 2;
  int32 LastRefreshDurationSeconds = 3;
  string FrontendConfigLocation = 4;
  bool SFWListDisabled = 5;

}

/*----------  Notifications  ----------*/

enum NotificationType {
  UNKNOWN_NOTIFICATION_TYPE = 0;
  REPLY_TO_THREAD = 1;
  REPLY_TO_POST = 2;
}

message CompiledNotification {
  NotificationType Type = 1;
  string Text = 2;
  repeated string ResponsePosts = 3;
  CompiledThreadEntity ParentThread = 4;
  CompiledPostEntity ParentPost = 5;
  int64 CreationTimestamp = 6;
  int64 NewestResponseTimestamp = 7;
  bool Read = 8;
}


/*----------  Reports tab entry  ----------*/

message ReportsTabEntry {
  string Fingerprint = 1;
  CompiledBoardEntity BoardPayload = 2;
  CompiledThreadEntity ThreadPayload = 3;
  CompiledPostEntity PostPayload = 4;
  int64 Timestamp = 5;
}