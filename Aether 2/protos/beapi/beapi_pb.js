/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var mimapi_structprotos_pb = require('../mimapi/structprotos_pb.js');
goog.exportSymbol('proto.beapi.AccessRequest', null, global);
goog.exportSymbol('proto.beapi.AccessResponse', null, global);
goog.exportSymbol('proto.beapi.BoardThreadsCountRequest', null, global);
goog.exportSymbol('proto.beapi.BoardThreadsCountResponse', null, global);
goog.exportSymbol('proto.beapi.BoardsRequest', null, global);
goog.exportSymbol('proto.beapi.BoardsResponse', null, global);
goog.exportSymbol('proto.beapi.Filters', null, global);
goog.exportSymbol('proto.beapi.Fingerprints', null, global);
goog.exportSymbol('proto.beapi.GraphFilters', null, global);
goog.exportSymbol('proto.beapi.KeysRequest', null, global);
goog.exportSymbol('proto.beapi.KeysResponse', null, global);
goog.exportSymbol('proto.beapi.MintedContentPayload', null, global);
goog.exportSymbol('proto.beapi.MintedContentResponse', null, global);
goog.exportSymbol('proto.beapi.PostsRequest', null, global);
goog.exportSymbol('proto.beapi.PostsResponse', null, global);
goog.exportSymbol('proto.beapi.RequesterId', null, global);
goog.exportSymbol('proto.beapi.Status', null, global);
goog.exportSymbol('proto.beapi.ThreadPostsCountRequest', null, global);
goog.exportSymbol('proto.beapi.ThreadPostsCountResponse', null, global);
goog.exportSymbol('proto.beapi.ThreadsRequest', null, global);
goog.exportSymbol('proto.beapi.ThreadsResponse', null, global);
goog.exportSymbol('proto.beapi.TimeRange', null, global);
goog.exportSymbol('proto.beapi.TruststatesRequest', null, global);
goog.exportSymbol('proto.beapi.TruststatesResponse', null, global);
goog.exportSymbol('proto.beapi.TypeFilters', null, global);
goog.exportSymbol('proto.beapi.VotesRequest', null, global);
goog.exportSymbol('proto.beapi.VotesResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.RequesterId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.RequesterId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.RequesterId.displayName = 'proto.beapi.RequesterId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.RequesterId.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.RequesterId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.RequesterId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.RequesterId.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    publickey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.RequesterId}
 */
proto.beapi.RequesterId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.RequesterId;
  return proto.beapi.RequesterId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.RequesterId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.RequesterId}
 */
proto.beapi.RequesterId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.RequesterId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.RequesterId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.RequesterId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.RequesterId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string AccessToken = 1;
 * @return {string}
 */
proto.beapi.RequesterId.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.beapi.RequesterId.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Nonce = 2;
 * @return {string}
 */
proto.beapi.RequesterId.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.beapi.RequesterId.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string PublicKey = 3;
 * @return {string}
 */
proto.beapi.RequesterId.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.beapi.RequesterId.prototype.setPublickey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 Timestamp = 4;
 * @return {number}
 */
proto.beapi.RequesterId.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.beapi.RequesterId.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.Status.displayName = 'proto.beapi.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.Status}
 */
proto.beapi.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.Status;
  return proto.beapi.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.Status}
 */
proto.beapi.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 StatusCode = 1;
 * @return {number}
 */
proto.beapi.Status.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.beapi.Status.prototype.setStatuscode = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.Filters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.Filters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.Filters.displayName = 'proto.beapi.Filters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.Filters.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.Filters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.Filters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.Filters.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastreftimerange: (f = msg.getLastreftimerange()) && proto.beapi.TimeRange.toObject(includeInstance, f),
    fingerprints: (f = msg.getFingerprints()) && proto.beapi.Fingerprints.toObject(includeInstance, f),
    typefilters: (f = msg.getTypefilters()) && proto.beapi.TypeFilters.toObject(includeInstance, f),
    graphfilters: (f = msg.getGraphfilters()) && proto.beapi.GraphFilters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.Filters}
 */
proto.beapi.Filters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.Filters;
  return proto.beapi.Filters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.Filters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.Filters}
 */
proto.beapi.Filters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.TimeRange;
      reader.readMessage(value,proto.beapi.TimeRange.deserializeBinaryFromReader);
      msg.setLastreftimerange(value);
      break;
    case 2:
      var value = new proto.beapi.Fingerprints;
      reader.readMessage(value,proto.beapi.Fingerprints.deserializeBinaryFromReader);
      msg.setFingerprints(value);
      break;
    case 3:
      var value = new proto.beapi.TypeFilters;
      reader.readMessage(value,proto.beapi.TypeFilters.deserializeBinaryFromReader);
      msg.setTypefilters(value);
      break;
    case 4:
      var value = new proto.beapi.GraphFilters;
      reader.readMessage(value,proto.beapi.GraphFilters.deserializeBinaryFromReader);
      msg.setGraphfilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.Filters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.Filters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.Filters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.Filters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastreftimerange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.TimeRange.serializeBinaryToWriter
    );
  }
  f = message.getFingerprints();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.beapi.Fingerprints.serializeBinaryToWriter
    );
  }
  f = message.getTypefilters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.beapi.TypeFilters.serializeBinaryToWriter
    );
  }
  f = message.getGraphfilters();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.beapi.GraphFilters.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeRange LastRefTimeRange = 1;
 * @return {?proto.beapi.TimeRange}
 */
proto.beapi.Filters.prototype.getLastreftimerange = function() {
  return /** @type{?proto.beapi.TimeRange} */ (
    jspb.Message.getWrapperField(this, proto.beapi.TimeRange, 1));
};


/** @param {?proto.beapi.TimeRange|undefined} value */
proto.beapi.Filters.prototype.setLastreftimerange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.Filters.prototype.clearLastreftimerange = function() {
  this.setLastreftimerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.Filters.prototype.hasLastreftimerange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Fingerprints Fingerprints = 2;
 * @return {?proto.beapi.Fingerprints}
 */
proto.beapi.Filters.prototype.getFingerprints = function() {
  return /** @type{?proto.beapi.Fingerprints} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Fingerprints, 2));
};


/** @param {?proto.beapi.Fingerprints|undefined} value */
proto.beapi.Filters.prototype.setFingerprints = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.beapi.Filters.prototype.clearFingerprints = function() {
  this.setFingerprints(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.Filters.prototype.hasFingerprints = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypeFilters TypeFilters = 3;
 * @return {?proto.beapi.TypeFilters}
 */
proto.beapi.Filters.prototype.getTypefilters = function() {
  return /** @type{?proto.beapi.TypeFilters} */ (
    jspb.Message.getWrapperField(this, proto.beapi.TypeFilters, 3));
};


/** @param {?proto.beapi.TypeFilters|undefined} value */
proto.beapi.Filters.prototype.setTypefilters = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.beapi.Filters.prototype.clearTypefilters = function() {
  this.setTypefilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.Filters.prototype.hasTypefilters = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GraphFilters GraphFilters = 4;
 * @return {?proto.beapi.GraphFilters}
 */
proto.beapi.Filters.prototype.getGraphfilters = function() {
  return /** @type{?proto.beapi.GraphFilters} */ (
    jspb.Message.getWrapperField(this, proto.beapi.GraphFilters, 4));
};


/** @param {?proto.beapi.GraphFilters|undefined} value */
proto.beapi.Filters.prototype.setGraphfilters = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.beapi.Filters.prototype.clearGraphfilters = function() {
  this.setGraphfilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.Filters.prototype.hasGraphfilters = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.TimeRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.TimeRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.TimeRange.displayName = 'proto.beapi.TimeRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.TimeRange.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.TimeRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.TimeRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.TimeRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFieldWithDefault(msg, 1, 0),
    end: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.TimeRange}
 */
proto.beapi.TimeRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.TimeRange;
  return proto.beapi.TimeRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.TimeRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.TimeRange}
 */
proto.beapi.TimeRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.TimeRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.TimeRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.TimeRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.TimeRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 Start = 1;
 * @return {number}
 */
proto.beapi.TimeRange.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.beapi.TimeRange.prototype.setStart = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 End = 3;
 * @return {number}
 */
proto.beapi.TimeRange.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.beapi.TimeRange.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.Fingerprints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beapi.Fingerprints.repeatedFields_, null);
};
goog.inherits(proto.beapi.Fingerprints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.Fingerprints.displayName = 'proto.beapi.Fingerprints';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beapi.Fingerprints.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.Fingerprints.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.Fingerprints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.Fingerprints} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.Fingerprints.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprintsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.Fingerprints}
 */
proto.beapi.Fingerprints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.Fingerprints;
  return proto.beapi.Fingerprints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.Fingerprints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.Fingerprints}
 */
proto.beapi.Fingerprints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFingerprints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.Fingerprints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.Fingerprints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.Fingerprints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.Fingerprints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFingerprintsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string Fingerprints = 1;
 * @return {!Array.<string>}
 */
proto.beapi.Fingerprints.prototype.getFingerprintsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.beapi.Fingerprints.prototype.setFingerprintsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.beapi.Fingerprints.prototype.addFingerprints = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.beapi.Fingerprints.prototype.clearFingerprintsList = function() {
  this.setFingerprintsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.TypeFilters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.TypeFilters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.TypeFilters.displayName = 'proto.beapi.TypeFilters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.TypeFilters.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.TypeFilters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.TypeFilters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.TypeFilters.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeclass: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.TypeFilters}
 */
proto.beapi.TypeFilters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.TypeFilters;
  return proto.beapi.TypeFilters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.TypeFilters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.TypeFilters}
 */
proto.beapi.TypeFilters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeclass(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.TypeFilters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.TypeFilters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.TypeFilters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.TypeFilters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeclass();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 TypeClass = 1;
 * @return {number}
 */
proto.beapi.TypeFilters.prototype.getTypeclass = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.beapi.TypeFilters.prototype.setTypeclass = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 Type = 2;
 * @return {number}
 */
proto.beapi.TypeFilters.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.beapi.TypeFilters.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.GraphFilters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.GraphFilters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.GraphFilters.displayName = 'proto.beapi.GraphFilters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.GraphFilters.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.GraphFilters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.GraphFilters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.GraphFilters.toObject = function(includeInstance, msg) {
  var f, obj = {
    board: jspb.Message.getFieldWithDefault(msg, 1, ""),
    thread: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parent: jspb.Message.getFieldWithDefault(msg, 3, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 4, ""),
    target: jspb.Message.getFieldWithDefault(msg, 5, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 6, ""),
    nodescendants: jspb.Message.getFieldWithDefault(msg, 7, false),
    limit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.GraphFilters}
 */
proto.beapi.GraphFilters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.GraphFilters;
  return proto.beapi.GraphFilters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.GraphFilters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.GraphFilters}
 */
proto.beapi.GraphFilters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoard(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setThread(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNodescendants(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.GraphFilters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.GraphFilters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.GraphFilters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.GraphFilters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoard();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getThread();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNodescendants();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional string Board = 1;
 * @return {string}
 */
proto.beapi.GraphFilters.prototype.getBoard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.beapi.GraphFilters.prototype.setBoard = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Thread = 2;
 * @return {string}
 */
proto.beapi.GraphFilters.prototype.getThread = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.beapi.GraphFilters.prototype.setThread = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Parent = 3;
 * @return {string}
 */
proto.beapi.GraphFilters.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.beapi.GraphFilters.prototype.setParent = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Owner = 4;
 * @return {string}
 */
proto.beapi.GraphFilters.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.beapi.GraphFilters.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Target = 5;
 * @return {string}
 */
proto.beapi.GraphFilters.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.beapi.GraphFilters.prototype.setTarget = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string Domain = 6;
 * @return {string}
 */
proto.beapi.GraphFilters.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.beapi.GraphFilters.prototype.setDomain = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool NoDescendants = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.beapi.GraphFilters.prototype.getNodescendants = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.beapi.GraphFilters.prototype.setNodescendants = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 Limit = 8;
 * @return {number}
 */
proto.beapi.GraphFilters.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.beapi.GraphFilters.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 Offset = 9;
 * @return {number}
 */
proto.beapi.GraphFilters.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.beapi.GraphFilters.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.AccessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.AccessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.AccessRequest.displayName = 'proto.beapi.AccessRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.AccessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.AccessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.AccessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.AccessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.AccessRequest}
 */
proto.beapi.AccessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.AccessRequest;
  return proto.beapi.AccessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.AccessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.AccessRequest}
 */
proto.beapi.AccessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.AccessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.AccessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.AccessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.AccessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.AccessRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.AccessRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.AccessRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.AccessRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.AccessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.AccessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.AccessResponse.displayName = 'proto.beapi.AccessResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.AccessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.AccessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.AccessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.AccessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.AccessResponse}
 */
proto.beapi.AccessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.AccessResponse;
  return proto.beapi.AccessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.AccessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.AccessResponse}
 */
proto.beapi.AccessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.AccessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.AccessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.AccessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.AccessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.AccessResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.AccessResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.AccessResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.AccessResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string AccessToken = 2;
 * @return {string}
 */
proto.beapi.AccessResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.beapi.AccessResponse.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.BoardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.BoardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.BoardsRequest.displayName = 'proto.beapi.BoardsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.BoardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.BoardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.BoardsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.BoardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    filters: (f = msg.getFilters()) && proto.beapi.Filters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.BoardsRequest}
 */
proto.beapi.BoardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.BoardsRequest;
  return proto.beapi.BoardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.BoardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.BoardsRequest}
 */
proto.beapi.BoardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = new proto.beapi.Filters;
      reader.readMessage(value,proto.beapi.Filters.deserializeBinaryFromReader);
      msg.setFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.BoardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.BoardsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.BoardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.BoardsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getFilters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.beapi.Filters.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.BoardsRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.BoardsRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.BoardsRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.BoardsRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Filters Filters = 2;
 * @return {?proto.beapi.Filters}
 */
proto.beapi.BoardsRequest.prototype.getFilters = function() {
  return /** @type{?proto.beapi.Filters} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Filters, 2));
};


/** @param {?proto.beapi.Filters|undefined} value */
proto.beapi.BoardsRequest.prototype.setFilters = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.beapi.BoardsRequest.prototype.clearFilters = function() {
  this.setFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.BoardsRequest.prototype.hasFilters = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.BoardsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beapi.BoardsResponse.repeatedFields_, null);
};
goog.inherits(proto.beapi.BoardsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.BoardsResponse.displayName = 'proto.beapi.BoardsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beapi.BoardsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.BoardsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.BoardsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.BoardsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.BoardsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    boardsList: jspb.Message.toObjectList(msg.getBoardsList(),
    mimapi_structprotos_pb.Board.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.BoardsResponse}
 */
proto.beapi.BoardsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.BoardsResponse;
  return proto.beapi.BoardsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.BoardsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.BoardsResponse}
 */
proto.beapi.BoardsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Board;
      reader.readMessage(value,mimapi_structprotos_pb.Board.deserializeBinaryFromReader);
      msg.addBoards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.BoardsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.BoardsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.BoardsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.BoardsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getBoardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      mimapi_structprotos_pb.Board.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.BoardsResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.BoardsResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.BoardsResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.BoardsResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated structprotos.Board Boards = 2;
 * @return {!Array.<!proto.structprotos.Board>}
 */
proto.beapi.BoardsResponse.prototype.getBoardsList = function() {
  return /** @type{!Array.<!proto.structprotos.Board>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Board, 2));
};


/** @param {!Array.<!proto.structprotos.Board>} value */
proto.beapi.BoardsResponse.prototype.setBoardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.structprotos.Board=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Board}
 */
proto.beapi.BoardsResponse.prototype.addBoards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.structprotos.Board, opt_index);
};


proto.beapi.BoardsResponse.prototype.clearBoardsList = function() {
  this.setBoardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.ThreadsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.ThreadsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.ThreadsRequest.displayName = 'proto.beapi.ThreadsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.ThreadsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.ThreadsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.ThreadsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.ThreadsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    filters: (f = msg.getFilters()) && proto.beapi.Filters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.ThreadsRequest}
 */
proto.beapi.ThreadsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.ThreadsRequest;
  return proto.beapi.ThreadsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.ThreadsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.ThreadsRequest}
 */
proto.beapi.ThreadsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = new proto.beapi.Filters;
      reader.readMessage(value,proto.beapi.Filters.deserializeBinaryFromReader);
      msg.setFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.ThreadsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.ThreadsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.ThreadsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.ThreadsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getFilters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.beapi.Filters.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.ThreadsRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.ThreadsRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.ThreadsRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.ThreadsRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Filters Filters = 2;
 * @return {?proto.beapi.Filters}
 */
proto.beapi.ThreadsRequest.prototype.getFilters = function() {
  return /** @type{?proto.beapi.Filters} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Filters, 2));
};


/** @param {?proto.beapi.Filters|undefined} value */
proto.beapi.ThreadsRequest.prototype.setFilters = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.beapi.ThreadsRequest.prototype.clearFilters = function() {
  this.setFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.ThreadsRequest.prototype.hasFilters = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.ThreadsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beapi.ThreadsResponse.repeatedFields_, null);
};
goog.inherits(proto.beapi.ThreadsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.ThreadsResponse.displayName = 'proto.beapi.ThreadsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beapi.ThreadsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.ThreadsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.ThreadsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.ThreadsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.ThreadsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    mimapi_structprotos_pb.Thread.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.ThreadsResponse}
 */
proto.beapi.ThreadsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.ThreadsResponse;
  return proto.beapi.ThreadsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.ThreadsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.ThreadsResponse}
 */
proto.beapi.ThreadsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Thread;
      reader.readMessage(value,mimapi_structprotos_pb.Thread.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.ThreadsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.ThreadsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.ThreadsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.ThreadsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      mimapi_structprotos_pb.Thread.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.ThreadsResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.ThreadsResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.ThreadsResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.ThreadsResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated structprotos.Thread Threads = 2;
 * @return {!Array.<!proto.structprotos.Thread>}
 */
proto.beapi.ThreadsResponse.prototype.getThreadsList = function() {
  return /** @type{!Array.<!proto.structprotos.Thread>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Thread, 2));
};


/** @param {!Array.<!proto.structprotos.Thread>} value */
proto.beapi.ThreadsResponse.prototype.setThreadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.structprotos.Thread=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Thread}
 */
proto.beapi.ThreadsResponse.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.structprotos.Thread, opt_index);
};


proto.beapi.ThreadsResponse.prototype.clearThreadsList = function() {
  this.setThreadsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.PostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.PostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.PostsRequest.displayName = 'proto.beapi.PostsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.PostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.PostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.PostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.PostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    filters: (f = msg.getFilters()) && proto.beapi.Filters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.PostsRequest}
 */
proto.beapi.PostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.PostsRequest;
  return proto.beapi.PostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.PostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.PostsRequest}
 */
proto.beapi.PostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = new proto.beapi.Filters;
      reader.readMessage(value,proto.beapi.Filters.deserializeBinaryFromReader);
      msg.setFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.PostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.PostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.PostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.PostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getFilters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.beapi.Filters.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.PostsRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.PostsRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.PostsRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.PostsRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Filters Filters = 2;
 * @return {?proto.beapi.Filters}
 */
proto.beapi.PostsRequest.prototype.getFilters = function() {
  return /** @type{?proto.beapi.Filters} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Filters, 2));
};


/** @param {?proto.beapi.Filters|undefined} value */
proto.beapi.PostsRequest.prototype.setFilters = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.beapi.PostsRequest.prototype.clearFilters = function() {
  this.setFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.PostsRequest.prototype.hasFilters = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.PostsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beapi.PostsResponse.repeatedFields_, null);
};
goog.inherits(proto.beapi.PostsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.PostsResponse.displayName = 'proto.beapi.PostsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beapi.PostsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.PostsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.PostsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.PostsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.PostsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    postsList: jspb.Message.toObjectList(msg.getPostsList(),
    mimapi_structprotos_pb.Post.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.PostsResponse}
 */
proto.beapi.PostsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.PostsResponse;
  return proto.beapi.PostsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.PostsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.PostsResponse}
 */
proto.beapi.PostsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Post;
      reader.readMessage(value,mimapi_structprotos_pb.Post.deserializeBinaryFromReader);
      msg.addPosts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.PostsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.PostsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.PostsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.PostsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getPostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      mimapi_structprotos_pb.Post.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.PostsResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.PostsResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.PostsResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.PostsResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated structprotos.Post Posts = 2;
 * @return {!Array.<!proto.structprotos.Post>}
 */
proto.beapi.PostsResponse.prototype.getPostsList = function() {
  return /** @type{!Array.<!proto.structprotos.Post>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Post, 2));
};


/** @param {!Array.<!proto.structprotos.Post>} value */
proto.beapi.PostsResponse.prototype.setPostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.structprotos.Post=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Post}
 */
proto.beapi.PostsResponse.prototype.addPosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.structprotos.Post, opt_index);
};


proto.beapi.PostsResponse.prototype.clearPostsList = function() {
  this.setPostsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.VotesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.VotesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.VotesRequest.displayName = 'proto.beapi.VotesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.VotesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.VotesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.VotesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.VotesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    filters: (f = msg.getFilters()) && proto.beapi.Filters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.VotesRequest}
 */
proto.beapi.VotesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.VotesRequest;
  return proto.beapi.VotesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.VotesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.VotesRequest}
 */
proto.beapi.VotesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = new proto.beapi.Filters;
      reader.readMessage(value,proto.beapi.Filters.deserializeBinaryFromReader);
      msg.setFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.VotesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.VotesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.VotesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.VotesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getFilters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.beapi.Filters.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.VotesRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.VotesRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.VotesRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.VotesRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Filters Filters = 2;
 * @return {?proto.beapi.Filters}
 */
proto.beapi.VotesRequest.prototype.getFilters = function() {
  return /** @type{?proto.beapi.Filters} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Filters, 2));
};


/** @param {?proto.beapi.Filters|undefined} value */
proto.beapi.VotesRequest.prototype.setFilters = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.beapi.VotesRequest.prototype.clearFilters = function() {
  this.setFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.VotesRequest.prototype.hasFilters = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.VotesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beapi.VotesResponse.repeatedFields_, null);
};
goog.inherits(proto.beapi.VotesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.VotesResponse.displayName = 'proto.beapi.VotesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beapi.VotesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.VotesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.VotesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.VotesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.VotesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    mimapi_structprotos_pb.Vote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.VotesResponse}
 */
proto.beapi.VotesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.VotesResponse;
  return proto.beapi.VotesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.VotesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.VotesResponse}
 */
proto.beapi.VotesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Vote;
      reader.readMessage(value,mimapi_structprotos_pb.Vote.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.VotesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.VotesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.VotesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.VotesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      mimapi_structprotos_pb.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.VotesResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.VotesResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.VotesResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.VotesResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated structprotos.Vote Votes = 2;
 * @return {!Array.<!proto.structprotos.Vote>}
 */
proto.beapi.VotesResponse.prototype.getVotesList = function() {
  return /** @type{!Array.<!proto.structprotos.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Vote, 2));
};


/** @param {!Array.<!proto.structprotos.Vote>} value */
proto.beapi.VotesResponse.prototype.setVotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.structprotos.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Vote}
 */
proto.beapi.VotesResponse.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.structprotos.Vote, opt_index);
};


proto.beapi.VotesResponse.prototype.clearVotesList = function() {
  this.setVotesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.KeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.KeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.KeysRequest.displayName = 'proto.beapi.KeysRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.KeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.KeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.KeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.KeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    filters: (f = msg.getFilters()) && proto.beapi.Filters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.KeysRequest}
 */
proto.beapi.KeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.KeysRequest;
  return proto.beapi.KeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.KeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.KeysRequest}
 */
proto.beapi.KeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = new proto.beapi.Filters;
      reader.readMessage(value,proto.beapi.Filters.deserializeBinaryFromReader);
      msg.setFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.KeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.KeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.KeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.KeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getFilters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.beapi.Filters.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.KeysRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.KeysRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.KeysRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.KeysRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Filters Filters = 2;
 * @return {?proto.beapi.Filters}
 */
proto.beapi.KeysRequest.prototype.getFilters = function() {
  return /** @type{?proto.beapi.Filters} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Filters, 2));
};


/** @param {?proto.beapi.Filters|undefined} value */
proto.beapi.KeysRequest.prototype.setFilters = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.beapi.KeysRequest.prototype.clearFilters = function() {
  this.setFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.KeysRequest.prototype.hasFilters = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.KeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beapi.KeysResponse.repeatedFields_, null);
};
goog.inherits(proto.beapi.KeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.KeysResponse.displayName = 'proto.beapi.KeysResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beapi.KeysResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.KeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.KeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.KeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.KeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    mimapi_structprotos_pb.Key.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.KeysResponse}
 */
proto.beapi.KeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.KeysResponse;
  return proto.beapi.KeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.KeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.KeysResponse}
 */
proto.beapi.KeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Key;
      reader.readMessage(value,mimapi_structprotos_pb.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.KeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.KeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.KeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.KeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      mimapi_structprotos_pb.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.KeysResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.KeysResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.KeysResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.KeysResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated structprotos.Key Keys = 2;
 * @return {!Array.<!proto.structprotos.Key>}
 */
proto.beapi.KeysResponse.prototype.getKeysList = function() {
  return /** @type{!Array.<!proto.structprotos.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Key, 2));
};


/** @param {!Array.<!proto.structprotos.Key>} value */
proto.beapi.KeysResponse.prototype.setKeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.structprotos.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Key}
 */
proto.beapi.KeysResponse.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.structprotos.Key, opt_index);
};


proto.beapi.KeysResponse.prototype.clearKeysList = function() {
  this.setKeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.TruststatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.TruststatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.TruststatesRequest.displayName = 'proto.beapi.TruststatesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.TruststatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.TruststatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.TruststatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.TruststatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    filters: (f = msg.getFilters()) && proto.beapi.Filters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.TruststatesRequest}
 */
proto.beapi.TruststatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.TruststatesRequest;
  return proto.beapi.TruststatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.TruststatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.TruststatesRequest}
 */
proto.beapi.TruststatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = new proto.beapi.Filters;
      reader.readMessage(value,proto.beapi.Filters.deserializeBinaryFromReader);
      msg.setFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.TruststatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.TruststatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.TruststatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.TruststatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getFilters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.beapi.Filters.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.TruststatesRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.TruststatesRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.TruststatesRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.TruststatesRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Filters Filters = 2;
 * @return {?proto.beapi.Filters}
 */
proto.beapi.TruststatesRequest.prototype.getFilters = function() {
  return /** @type{?proto.beapi.Filters} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Filters, 2));
};


/** @param {?proto.beapi.Filters|undefined} value */
proto.beapi.TruststatesRequest.prototype.setFilters = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.beapi.TruststatesRequest.prototype.clearFilters = function() {
  this.setFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.TruststatesRequest.prototype.hasFilters = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.TruststatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beapi.TruststatesResponse.repeatedFields_, null);
};
goog.inherits(proto.beapi.TruststatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.TruststatesResponse.displayName = 'proto.beapi.TruststatesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beapi.TruststatesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.TruststatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.TruststatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.TruststatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.TruststatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    truststatesList: jspb.Message.toObjectList(msg.getTruststatesList(),
    mimapi_structprotos_pb.Truststate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.TruststatesResponse}
 */
proto.beapi.TruststatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.TruststatesResponse;
  return proto.beapi.TruststatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.TruststatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.TruststatesResponse}
 */
proto.beapi.TruststatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Truststate;
      reader.readMessage(value,mimapi_structprotos_pb.Truststate.deserializeBinaryFromReader);
      msg.addTruststates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.TruststatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.TruststatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.TruststatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.TruststatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getTruststatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      mimapi_structprotos_pb.Truststate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.TruststatesResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.TruststatesResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.TruststatesResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.TruststatesResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated structprotos.Truststate Truststates = 2;
 * @return {!Array.<!proto.structprotos.Truststate>}
 */
proto.beapi.TruststatesResponse.prototype.getTruststatesList = function() {
  return /** @type{!Array.<!proto.structprotos.Truststate>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Truststate, 2));
};


/** @param {!Array.<!proto.structprotos.Truststate>} value */
proto.beapi.TruststatesResponse.prototype.setTruststatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.structprotos.Truststate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Truststate}
 */
proto.beapi.TruststatesResponse.prototype.addTruststates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.structprotos.Truststate, opt_index);
};


proto.beapi.TruststatesResponse.prototype.clearTruststatesList = function() {
  this.setTruststatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.BoardThreadsCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.BoardThreadsCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.BoardThreadsCountRequest.displayName = 'proto.beapi.BoardThreadsCountRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.BoardThreadsCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.BoardThreadsCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.BoardThreadsCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.BoardThreadsCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    fingerprint: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.BoardThreadsCountRequest}
 */
proto.beapi.BoardThreadsCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.BoardThreadsCountRequest;
  return proto.beapi.BoardThreadsCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.BoardThreadsCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.BoardThreadsCountRequest}
 */
proto.beapi.BoardThreadsCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.BoardThreadsCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.BoardThreadsCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.BoardThreadsCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.BoardThreadsCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.BoardThreadsCountRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.BoardThreadsCountRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.BoardThreadsCountRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.BoardThreadsCountRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Fingerprint = 2;
 * @return {string}
 */
proto.beapi.BoardThreadsCountRequest.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.beapi.BoardThreadsCountRequest.prototype.setFingerprint = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.BoardThreadsCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.BoardThreadsCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.BoardThreadsCountResponse.displayName = 'proto.beapi.BoardThreadsCountResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.BoardThreadsCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.BoardThreadsCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.BoardThreadsCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.BoardThreadsCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.BoardThreadsCountResponse}
 */
proto.beapi.BoardThreadsCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.BoardThreadsCountResponse;
  return proto.beapi.BoardThreadsCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.BoardThreadsCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.BoardThreadsCountResponse}
 */
proto.beapi.BoardThreadsCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.BoardThreadsCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.BoardThreadsCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.BoardThreadsCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.BoardThreadsCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.BoardThreadsCountResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.BoardThreadsCountResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.BoardThreadsCountResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.BoardThreadsCountResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.beapi.BoardThreadsCountResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.beapi.BoardThreadsCountResponse.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.ThreadPostsCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.ThreadPostsCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.ThreadPostsCountRequest.displayName = 'proto.beapi.ThreadPostsCountRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.ThreadPostsCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.ThreadPostsCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.ThreadPostsCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.ThreadPostsCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    fingerprint: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.ThreadPostsCountRequest}
 */
proto.beapi.ThreadPostsCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.ThreadPostsCountRequest;
  return proto.beapi.ThreadPostsCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.ThreadPostsCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.ThreadPostsCountRequest}
 */
proto.beapi.ThreadPostsCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.ThreadPostsCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.ThreadPostsCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.ThreadPostsCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.ThreadPostsCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.ThreadPostsCountRequest.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.ThreadPostsCountRequest.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.ThreadPostsCountRequest.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.ThreadPostsCountRequest.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Fingerprint = 2;
 * @return {string}
 */
proto.beapi.ThreadPostsCountRequest.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.beapi.ThreadPostsCountRequest.prototype.setFingerprint = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.ThreadPostsCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.ThreadPostsCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.ThreadPostsCountResponse.displayName = 'proto.beapi.ThreadPostsCountResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.ThreadPostsCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.ThreadPostsCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.ThreadPostsCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.ThreadPostsCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.ThreadPostsCountResponse}
 */
proto.beapi.ThreadPostsCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.ThreadPostsCountResponse;
  return proto.beapi.ThreadPostsCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.ThreadPostsCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.ThreadPostsCountResponse}
 */
proto.beapi.ThreadPostsCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.ThreadPostsCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.ThreadPostsCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.ThreadPostsCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.ThreadPostsCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.ThreadPostsCountResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.ThreadPostsCountResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.ThreadPostsCountResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.ThreadPostsCountResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 Count = 2;
 * @return {number}
 */
proto.beapi.ThreadPostsCountResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.beapi.ThreadPostsCountResponse.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.MintedContentPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.beapi.MintedContentPayload.repeatedFields_, null);
};
goog.inherits(proto.beapi.MintedContentPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.MintedContentPayload.displayName = 'proto.beapi.MintedContentPayload';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.beapi.MintedContentPayload.repeatedFields_ = [2,3,4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.MintedContentPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.MintedContentPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.MintedContentPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.MintedContentPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterid: (f = msg.getRequesterid()) && proto.beapi.RequesterId.toObject(includeInstance, f),
    boardsList: jspb.Message.toObjectList(msg.getBoardsList(),
    mimapi_structprotos_pb.Board.toObject, includeInstance),
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    mimapi_structprotos_pb.Thread.toObject, includeInstance),
    postsList: jspb.Message.toObjectList(msg.getPostsList(),
    mimapi_structprotos_pb.Post.toObject, includeInstance),
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    mimapi_structprotos_pb.Vote.toObject, includeInstance),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    mimapi_structprotos_pb.Key.toObject, includeInstance),
    truststatesList: jspb.Message.toObjectList(msg.getTruststatesList(),
    mimapi_structprotos_pb.Truststate.toObject, includeInstance),
    addressesList: jspb.Message.toObjectList(msg.getAddressesList(),
    mimapi_structprotos_pb.Address.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.MintedContentPayload}
 */
proto.beapi.MintedContentPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.MintedContentPayload;
  return proto.beapi.MintedContentPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.MintedContentPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.MintedContentPayload}
 */
proto.beapi.MintedContentPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.RequesterId;
      reader.readMessage(value,proto.beapi.RequesterId.deserializeBinaryFromReader);
      msg.setRequesterid(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Board;
      reader.readMessage(value,mimapi_structprotos_pb.Board.deserializeBinaryFromReader);
      msg.addBoards(value);
      break;
    case 3:
      var value = new mimapi_structprotos_pb.Thread;
      reader.readMessage(value,mimapi_structprotos_pb.Thread.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    case 4:
      var value = new mimapi_structprotos_pb.Post;
      reader.readMessage(value,mimapi_structprotos_pb.Post.deserializeBinaryFromReader);
      msg.addPosts(value);
      break;
    case 5:
      var value = new mimapi_structprotos_pb.Vote;
      reader.readMessage(value,mimapi_structprotos_pb.Vote.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    case 6:
      var value = new mimapi_structprotos_pb.Key;
      reader.readMessage(value,mimapi_structprotos_pb.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 7:
      var value = new mimapi_structprotos_pb.Truststate;
      reader.readMessage(value,mimapi_structprotos_pb.Truststate.deserializeBinaryFromReader);
      msg.addTruststates(value);
      break;
    case 8:
      var value = new mimapi_structprotos_pb.Address;
      reader.readMessage(value,mimapi_structprotos_pb.Address.deserializeBinaryFromReader);
      msg.addAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.MintedContentPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.MintedContentPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.MintedContentPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.MintedContentPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.RequesterId.serializeBinaryToWriter
    );
  }
  f = message.getBoardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      mimapi_structprotos_pb.Board.serializeBinaryToWriter
    );
  }
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      mimapi_structprotos_pb.Thread.serializeBinaryToWriter
    );
  }
  f = message.getPostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      mimapi_structprotos_pb.Post.serializeBinaryToWriter
    );
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      mimapi_structprotos_pb.Vote.serializeBinaryToWriter
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      mimapi_structprotos_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getTruststatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      mimapi_structprotos_pb.Truststate.serializeBinaryToWriter
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      mimapi_structprotos_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequesterId RequesterId = 1;
 * @return {?proto.beapi.RequesterId}
 */
proto.beapi.MintedContentPayload.prototype.getRequesterid = function() {
  return /** @type{?proto.beapi.RequesterId} */ (
    jspb.Message.getWrapperField(this, proto.beapi.RequesterId, 1));
};


/** @param {?proto.beapi.RequesterId|undefined} value */
proto.beapi.MintedContentPayload.prototype.setRequesterid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.MintedContentPayload.prototype.clearRequesterid = function() {
  this.setRequesterid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.MintedContentPayload.prototype.hasRequesterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated structprotos.Board Boards = 2;
 * @return {!Array.<!proto.structprotos.Board>}
 */
proto.beapi.MintedContentPayload.prototype.getBoardsList = function() {
  return /** @type{!Array.<!proto.structprotos.Board>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Board, 2));
};


/** @param {!Array.<!proto.structprotos.Board>} value */
proto.beapi.MintedContentPayload.prototype.setBoardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.structprotos.Board=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Board}
 */
proto.beapi.MintedContentPayload.prototype.addBoards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.structprotos.Board, opt_index);
};


proto.beapi.MintedContentPayload.prototype.clearBoardsList = function() {
  this.setBoardsList([]);
};


/**
 * repeated structprotos.Thread Threads = 3;
 * @return {!Array.<!proto.structprotos.Thread>}
 */
proto.beapi.MintedContentPayload.prototype.getThreadsList = function() {
  return /** @type{!Array.<!proto.structprotos.Thread>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Thread, 3));
};


/** @param {!Array.<!proto.structprotos.Thread>} value */
proto.beapi.MintedContentPayload.prototype.setThreadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.structprotos.Thread=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Thread}
 */
proto.beapi.MintedContentPayload.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.structprotos.Thread, opt_index);
};


proto.beapi.MintedContentPayload.prototype.clearThreadsList = function() {
  this.setThreadsList([]);
};


/**
 * repeated structprotos.Post Posts = 4;
 * @return {!Array.<!proto.structprotos.Post>}
 */
proto.beapi.MintedContentPayload.prototype.getPostsList = function() {
  return /** @type{!Array.<!proto.structprotos.Post>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Post, 4));
};


/** @param {!Array.<!proto.structprotos.Post>} value */
proto.beapi.MintedContentPayload.prototype.setPostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.structprotos.Post=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Post}
 */
proto.beapi.MintedContentPayload.prototype.addPosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.structprotos.Post, opt_index);
};


proto.beapi.MintedContentPayload.prototype.clearPostsList = function() {
  this.setPostsList([]);
};


/**
 * repeated structprotos.Vote Votes = 5;
 * @return {!Array.<!proto.structprotos.Vote>}
 */
proto.beapi.MintedContentPayload.prototype.getVotesList = function() {
  return /** @type{!Array.<!proto.structprotos.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Vote, 5));
};


/** @param {!Array.<!proto.structprotos.Vote>} value */
proto.beapi.MintedContentPayload.prototype.setVotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.structprotos.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Vote}
 */
proto.beapi.MintedContentPayload.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.structprotos.Vote, opt_index);
};


proto.beapi.MintedContentPayload.prototype.clearVotesList = function() {
  this.setVotesList([]);
};


/**
 * repeated structprotos.Key Keys = 6;
 * @return {!Array.<!proto.structprotos.Key>}
 */
proto.beapi.MintedContentPayload.prototype.getKeysList = function() {
  return /** @type{!Array.<!proto.structprotos.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Key, 6));
};


/** @param {!Array.<!proto.structprotos.Key>} value */
proto.beapi.MintedContentPayload.prototype.setKeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.structprotos.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Key}
 */
proto.beapi.MintedContentPayload.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.structprotos.Key, opt_index);
};


proto.beapi.MintedContentPayload.prototype.clearKeysList = function() {
  this.setKeysList([]);
};


/**
 * repeated structprotos.Truststate Truststates = 7;
 * @return {!Array.<!proto.structprotos.Truststate>}
 */
proto.beapi.MintedContentPayload.prototype.getTruststatesList = function() {
  return /** @type{!Array.<!proto.structprotos.Truststate>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Truststate, 7));
};


/** @param {!Array.<!proto.structprotos.Truststate>} value */
proto.beapi.MintedContentPayload.prototype.setTruststatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.structprotos.Truststate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Truststate}
 */
proto.beapi.MintedContentPayload.prototype.addTruststates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.structprotos.Truststate, opt_index);
};


proto.beapi.MintedContentPayload.prototype.clearTruststatesList = function() {
  this.setTruststatesList([]);
};


/**
 * repeated structprotos.Address Addresses = 8;
 * @return {!Array.<!proto.structprotos.Address>}
 */
proto.beapi.MintedContentPayload.prototype.getAddressesList = function() {
  return /** @type{!Array.<!proto.structprotos.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Address, 8));
};


/** @param {!Array.<!proto.structprotos.Address>} value */
proto.beapi.MintedContentPayload.prototype.setAddressesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.structprotos.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Address}
 */
proto.beapi.MintedContentPayload.prototype.addAddresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.structprotos.Address, opt_index);
};


proto.beapi.MintedContentPayload.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.beapi.MintedContentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.beapi.MintedContentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.beapi.MintedContentResponse.displayName = 'proto.beapi.MintedContentResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.beapi.MintedContentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.beapi.MintedContentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.beapi.MintedContentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.MintedContentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.beapi.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.beapi.MintedContentResponse}
 */
proto.beapi.MintedContentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.beapi.MintedContentResponse;
  return proto.beapi.MintedContentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.beapi.MintedContentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.beapi.MintedContentResponse}
 */
proto.beapi.MintedContentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.beapi.Status;
      reader.readMessage(value,proto.beapi.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.beapi.MintedContentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.beapi.MintedContentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.beapi.MintedContentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.beapi.MintedContentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.beapi.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status Status = 1;
 * @return {?proto.beapi.Status}
 */
proto.beapi.MintedContentResponse.prototype.getStatus = function() {
  return /** @type{?proto.beapi.Status} */ (
    jspb.Message.getWrapperField(this, proto.beapi.Status, 1));
};


/** @param {?proto.beapi.Status|undefined} value */
proto.beapi.MintedContentResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.beapi.MintedContentResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.beapi.MintedContentResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.beapi);
