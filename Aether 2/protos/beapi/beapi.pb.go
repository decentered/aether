// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beapi/beapi.proto

/*
Package beapi is a generated protocol buffer package.

It is generated from these files:
	beapi/beapi.proto

It has these top-level messages:
	RequesterId
	Status
	Filters
	TimeRange
	Fingerprints
	TypeFilters
	GraphFilters
	AccessRequest
	AccessResponse
	BoardsRequest
	BoardsResponse
	ThreadsRequest
	ThreadsResponse
	PostsRequest
	PostsResponse
	VotesRequest
	VotesResponse
	KeysRequest
	KeysResponse
	TruststatesRequest
	TruststatesResponse
	BoardThreadsCountRequest
	BoardThreadsCountResponse
	ThreadPostsCountRequest
	ThreadPostsCountResponse
	MintedContentPayload
	MintedContentResponse
*/
package beapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import structprotos "aether-core/protos/mimapi"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequesterId struct {
	//
	// Access token is given by the backend. If no access token, the backend has never given the FE right to pass, and it's auto-declined. RequestBackendAccess is how you get an access token. These tokens expire, so the requester should be prepared to re-request an access token if that happens.
	//
	// After the access token is provisioned, the frontend should send a nonce that is signed with the public key of the frontend with every request, and nonce should change between every request.
	//
	// Timestamp should be within the clock skew range that the backend is willing to accept.
	AccessToken string `protobuf:"bytes,1,opt,name=AccessToken" json:"AccessToken,omitempty"`
	Nonce       string `protobuf:"bytes,2,opt,name=Nonce" json:"Nonce,omitempty"`
	PublicKey   string `protobuf:"bytes,3,opt,name=PublicKey" json:"PublicKey,omitempty"`
	Timestamp   int64  `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *RequesterId) Reset()                    { *m = RequesterId{} }
func (m *RequesterId) String() string            { return proto.CompactTextString(m) }
func (*RequesterId) ProtoMessage()               {}
func (*RequesterId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequesterId) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *RequesterId) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *RequesterId) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *RequesterId) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Status struct {
	StatusCode int32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Status) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

type Filters struct {
	// Executed in this order. If both present, time range will take precedence.
	LastRefTimeRange *TimeRange    `protobuf:"bytes,1,opt,name=LastRefTimeRange" json:"LastRefTimeRange,omitempty"`
	Fingerprints     *Fingerprints `protobuf:"bytes,2,opt,name=Fingerprints" json:"Fingerprints,omitempty"`
	TypeFilters      *TypeFilters  `protobuf:"bytes,3,opt,name=TypeFilters" json:"TypeFilters,omitempty"`
	GraphFilters     *GraphFilters `protobuf:"bytes,4,opt,name=GraphFilters" json:"GraphFilters,omitempty"`
}

func (m *Filters) Reset()                    { *m = Filters{} }
func (m *Filters) String() string            { return proto.CompactTextString(m) }
func (*Filters) ProtoMessage()               {}
func (*Filters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Filters) GetLastRefTimeRange() *TimeRange {
	if m != nil {
		return m.LastRefTimeRange
	}
	return nil
}

func (m *Filters) GetFingerprints() *Fingerprints {
	if m != nil {
		return m.Fingerprints
	}
	return nil
}

func (m *Filters) GetTypeFilters() *TypeFilters {
	if m != nil {
		return m.TypeFilters
	}
	return nil
}

func (m *Filters) GetGraphFilters() *GraphFilters {
	if m != nil {
		return m.GraphFilters
	}
	return nil
}

type TimeRange struct {
	// Can be time range for any of the rangeable time fields. Last referenced, last update, creation, etc.
	Start int64 `protobuf:"varint,1,opt,name=Start" json:"Start,omitempty"`
	End   int64 `protobuf:"varint,3,opt,name=End" json:"End,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TimeRange) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *TimeRange) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type Fingerprints struct {
	Fingerprints []string `protobuf:"bytes,1,rep,name=Fingerprints" json:"Fingerprints,omitempty"`
}

func (m *Fingerprints) Reset()                    { *m = Fingerprints{} }
func (m *Fingerprints) String() string            { return proto.CompactTextString(m) }
func (*Fingerprints) ProtoMessage()               {}
func (*Fingerprints) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Fingerprints) GetFingerprints() []string {
	if m != nil {
		return m.Fingerprints
	}
	return nil
}

type TypeFilters struct {
	TypeClass int32 `protobuf:"varint,1,opt,name=TypeClass" json:"TypeClass,omitempty"`
	Type      int32 `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *TypeFilters) Reset()                    { *m = TypeFilters{} }
func (m *TypeFilters) String() string            { return proto.CompactTextString(m) }
func (*TypeFilters) ProtoMessage()               {}
func (*TypeFilters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TypeFilters) GetTypeClass() int32 {
	if m != nil {
		return m.TypeClass
	}
	return 0
}

func (m *TypeFilters) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type GraphFilters struct {
	Board         string `protobuf:"bytes,1,opt,name=Board" json:"Board,omitempty"`
	Thread        string `protobuf:"bytes,2,opt,name=Thread" json:"Thread,omitempty"`
	Parent        string `protobuf:"bytes,3,opt,name=Parent" json:"Parent,omitempty"`
	Owner         string `protobuf:"bytes,4,opt,name=Owner" json:"Owner,omitempty"`
	Target        string `protobuf:"bytes,5,opt,name=Target" json:"Target,omitempty"`
	Domain        string `protobuf:"bytes,6,opt,name=Domain" json:"Domain,omitempty"`
	NoDescendants bool   `protobuf:"varint,7,opt,name=NoDescendants" json:"NoDescendants,omitempty"`
	Limit         int32  `protobuf:"varint,8,opt,name=Limit" json:"Limit,omitempty"`
	Offset        int32  `protobuf:"varint,9,opt,name=Offset" json:"Offset,omitempty"`
}

func (m *GraphFilters) Reset()                    { *m = GraphFilters{} }
func (m *GraphFilters) String() string            { return proto.CompactTextString(m) }
func (*GraphFilters) ProtoMessage()               {}
func (*GraphFilters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GraphFilters) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

func (m *GraphFilters) GetThread() string {
	if m != nil {
		return m.Thread
	}
	return ""
}

func (m *GraphFilters) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *GraphFilters) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GraphFilters) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *GraphFilters) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *GraphFilters) GetNoDescendants() bool {
	if m != nil {
		return m.NoDescendants
	}
	return false
}

func (m *GraphFilters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GraphFilters) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type AccessRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
}

func (m *AccessRequest) Reset()                    { *m = AccessRequest{} }
func (m *AccessRequest) String() string            { return proto.CompactTextString(m) }
func (*AccessRequest) ProtoMessage()               {}
func (*AccessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AccessRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

type AccessResponse struct {
	Status      *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	AccessToken string  `protobuf:"bytes,2,opt,name=AccessToken" json:"AccessToken,omitempty"`
}

func (m *AccessResponse) Reset()                    { *m = AccessResponse{} }
func (m *AccessResponse) String() string            { return proto.CompactTextString(m) }
func (*AccessResponse) ProtoMessage()               {}
func (*AccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AccessResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AccessResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type BoardsRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Filters     *Filters     `protobuf:"bytes,2,opt,name=Filters" json:"Filters,omitempty"`
}

func (m *BoardsRequest) Reset()                    { *m = BoardsRequest{} }
func (m *BoardsRequest) String() string            { return proto.CompactTextString(m) }
func (*BoardsRequest) ProtoMessage()               {}
func (*BoardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BoardsRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *BoardsRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type BoardsResponse struct {
	Status *Status               `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	Boards []*structprotos.Board `protobuf:"bytes,2,rep,name=Boards" json:"Boards,omitempty"`
}

func (m *BoardsResponse) Reset()                    { *m = BoardsResponse{} }
func (m *BoardsResponse) String() string            { return proto.CompactTextString(m) }
func (*BoardsResponse) ProtoMessage()               {}
func (*BoardsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BoardsResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BoardsResponse) GetBoards() []*structprotos.Board {
	if m != nil {
		return m.Boards
	}
	return nil
}

type ThreadsRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Filters     *Filters     `protobuf:"bytes,2,opt,name=Filters" json:"Filters,omitempty"`
}

func (m *ThreadsRequest) Reset()                    { *m = ThreadsRequest{} }
func (m *ThreadsRequest) String() string            { return proto.CompactTextString(m) }
func (*ThreadsRequest) ProtoMessage()               {}
func (*ThreadsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ThreadsRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *ThreadsRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type ThreadsResponse struct {
	Status  *Status                `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	Threads []*structprotos.Thread `protobuf:"bytes,2,rep,name=Threads" json:"Threads,omitempty"`
}

func (m *ThreadsResponse) Reset()                    { *m = ThreadsResponse{} }
func (m *ThreadsResponse) String() string            { return proto.CompactTextString(m) }
func (*ThreadsResponse) ProtoMessage()               {}
func (*ThreadsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ThreadsResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ThreadsResponse) GetThreads() []*structprotos.Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

type PostsRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Filters     *Filters     `protobuf:"bytes,2,opt,name=Filters" json:"Filters,omitempty"`
}

func (m *PostsRequest) Reset()                    { *m = PostsRequest{} }
func (m *PostsRequest) String() string            { return proto.CompactTextString(m) }
func (*PostsRequest) ProtoMessage()               {}
func (*PostsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PostsRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *PostsRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type PostsResponse struct {
	Status *Status              `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	Posts  []*structprotos.Post `protobuf:"bytes,2,rep,name=Posts" json:"Posts,omitempty"`
}

func (m *PostsResponse) Reset()                    { *m = PostsResponse{} }
func (m *PostsResponse) String() string            { return proto.CompactTextString(m) }
func (*PostsResponse) ProtoMessage()               {}
func (*PostsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PostsResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PostsResponse) GetPosts() []*structprotos.Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

type VotesRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Filters     *Filters     `protobuf:"bytes,2,opt,name=Filters" json:"Filters,omitempty"`
}

func (m *VotesRequest) Reset()                    { *m = VotesRequest{} }
func (m *VotesRequest) String() string            { return proto.CompactTextString(m) }
func (*VotesRequest) ProtoMessage()               {}
func (*VotesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *VotesRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *VotesRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type VotesResponse struct {
	Status *Status              `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	Votes  []*structprotos.Vote `protobuf:"bytes,2,rep,name=Votes" json:"Votes,omitempty"`
}

func (m *VotesResponse) Reset()                    { *m = VotesResponse{} }
func (m *VotesResponse) String() string            { return proto.CompactTextString(m) }
func (*VotesResponse) ProtoMessage()               {}
func (*VotesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *VotesResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VotesResponse) GetVotes() []*structprotos.Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

type KeysRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Filters     *Filters     `protobuf:"bytes,2,opt,name=Filters" json:"Filters,omitempty"`
}

func (m *KeysRequest) Reset()                    { *m = KeysRequest{} }
func (m *KeysRequest) String() string            { return proto.CompactTextString(m) }
func (*KeysRequest) ProtoMessage()               {}
func (*KeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *KeysRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *KeysRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type KeysResponse struct {
	Status *Status             `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	Keys   []*structprotos.Key `protobuf:"bytes,2,rep,name=Keys" json:"Keys,omitempty"`
}

func (m *KeysResponse) Reset()                    { *m = KeysResponse{} }
func (m *KeysResponse) String() string            { return proto.CompactTextString(m) }
func (*KeysResponse) ProtoMessage()               {}
func (*KeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *KeysResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *KeysResponse) GetKeys() []*structprotos.Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type TruststatesRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Filters     *Filters     `protobuf:"bytes,2,opt,name=Filters" json:"Filters,omitempty"`
}

func (m *TruststatesRequest) Reset()                    { *m = TruststatesRequest{} }
func (m *TruststatesRequest) String() string            { return proto.CompactTextString(m) }
func (*TruststatesRequest) ProtoMessage()               {}
func (*TruststatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TruststatesRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *TruststatesRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type TruststatesResponse struct {
	Status      *Status                    `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	Truststates []*structprotos.Truststate `protobuf:"bytes,2,rep,name=Truststates" json:"Truststates,omitempty"`
}

func (m *TruststatesResponse) Reset()                    { *m = TruststatesResponse{} }
func (m *TruststatesResponse) String() string            { return proto.CompactTextString(m) }
func (*TruststatesResponse) ProtoMessage()               {}
func (*TruststatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *TruststatesResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TruststatesResponse) GetTruststates() []*structprotos.Truststate {
	if m != nil {
		return m.Truststates
	}
	return nil
}

type BoardThreadsCountRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Fingerprint string       `protobuf:"bytes,2,opt,name=Fingerprint" json:"Fingerprint,omitempty"`
}

func (m *BoardThreadsCountRequest) Reset()                    { *m = BoardThreadsCountRequest{} }
func (m *BoardThreadsCountRequest) String() string            { return proto.CompactTextString(m) }
func (*BoardThreadsCountRequest) ProtoMessage()               {}
func (*BoardThreadsCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BoardThreadsCountRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *BoardThreadsCountRequest) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

type BoardThreadsCountResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	Count  int32   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *BoardThreadsCountResponse) Reset()                    { *m = BoardThreadsCountResponse{} }
func (m *BoardThreadsCountResponse) String() string            { return proto.CompactTextString(m) }
func (*BoardThreadsCountResponse) ProtoMessage()               {}
func (*BoardThreadsCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *BoardThreadsCountResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BoardThreadsCountResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ThreadPostsCountRequest struct {
	RequesterId *RequesterId `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Fingerprint string       `protobuf:"bytes,2,opt,name=Fingerprint" json:"Fingerprint,omitempty"`
}

func (m *ThreadPostsCountRequest) Reset()                    { *m = ThreadPostsCountRequest{} }
func (m *ThreadPostsCountRequest) String() string            { return proto.CompactTextString(m) }
func (*ThreadPostsCountRequest) ProtoMessage()               {}
func (*ThreadPostsCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ThreadPostsCountRequest) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *ThreadPostsCountRequest) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

type ThreadPostsCountResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
	Count  int32   `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
}

func (m *ThreadPostsCountResponse) Reset()                    { *m = ThreadPostsCountResponse{} }
func (m *ThreadPostsCountResponse) String() string            { return proto.CompactTextString(m) }
func (*ThreadPostsCountResponse) ProtoMessage()               {}
func (*ThreadPostsCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ThreadPostsCountResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ThreadPostsCountResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MintedContentPayload struct {
	RequesterId *RequesterId               `protobuf:"bytes,1,opt,name=RequesterId" json:"RequesterId,omitempty"`
	Boards      []*structprotos.Board      `protobuf:"bytes,2,rep,name=Boards" json:"Boards,omitempty"`
	Threads     []*structprotos.Thread     `protobuf:"bytes,3,rep,name=Threads" json:"Threads,omitempty"`
	Posts       []*structprotos.Post       `protobuf:"bytes,4,rep,name=Posts" json:"Posts,omitempty"`
	Votes       []*structprotos.Vote       `protobuf:"bytes,5,rep,name=Votes" json:"Votes,omitempty"`
	Keys        []*structprotos.Key        `protobuf:"bytes,6,rep,name=Keys" json:"Keys,omitempty"`
	Truststates []*structprotos.Truststate `protobuf:"bytes,7,rep,name=Truststates" json:"Truststates,omitempty"`
	Addresses   []*structprotos.Address    `protobuf:"bytes,8,rep,name=Addresses" json:"Addresses,omitempty"`
}

func (m *MintedContentPayload) Reset()                    { *m = MintedContentPayload{} }
func (m *MintedContentPayload) String() string            { return proto.CompactTextString(m) }
func (*MintedContentPayload) ProtoMessage()               {}
func (*MintedContentPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MintedContentPayload) GetRequesterId() *RequesterId {
	if m != nil {
		return m.RequesterId
	}
	return nil
}

func (m *MintedContentPayload) GetBoards() []*structprotos.Board {
	if m != nil {
		return m.Boards
	}
	return nil
}

func (m *MintedContentPayload) GetThreads() []*structprotos.Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

func (m *MintedContentPayload) GetPosts() []*structprotos.Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *MintedContentPayload) GetVotes() []*structprotos.Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *MintedContentPayload) GetKeys() []*structprotos.Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *MintedContentPayload) GetTruststates() []*structprotos.Truststate {
	if m != nil {
		return m.Truststates
	}
	return nil
}

func (m *MintedContentPayload) GetAddresses() []*structprotos.Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type MintedContentResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *MintedContentResponse) Reset()                    { *m = MintedContentResponse{} }
func (m *MintedContentResponse) String() string            { return proto.CompactTextString(m) }
func (*MintedContentResponse) ProtoMessage()               {}
func (*MintedContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *MintedContentResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*RequesterId)(nil), "beapi.RequesterId")
	proto.RegisterType((*Status)(nil), "beapi.Status")
	proto.RegisterType((*Filters)(nil), "beapi.Filters")
	proto.RegisterType((*TimeRange)(nil), "beapi.TimeRange")
	proto.RegisterType((*Fingerprints)(nil), "beapi.Fingerprints")
	proto.RegisterType((*TypeFilters)(nil), "beapi.TypeFilters")
	proto.RegisterType((*GraphFilters)(nil), "beapi.GraphFilters")
	proto.RegisterType((*AccessRequest)(nil), "beapi.AccessRequest")
	proto.RegisterType((*AccessResponse)(nil), "beapi.AccessResponse")
	proto.RegisterType((*BoardsRequest)(nil), "beapi.BoardsRequest")
	proto.RegisterType((*BoardsResponse)(nil), "beapi.BoardsResponse")
	proto.RegisterType((*ThreadsRequest)(nil), "beapi.ThreadsRequest")
	proto.RegisterType((*ThreadsResponse)(nil), "beapi.ThreadsResponse")
	proto.RegisterType((*PostsRequest)(nil), "beapi.PostsRequest")
	proto.RegisterType((*PostsResponse)(nil), "beapi.PostsResponse")
	proto.RegisterType((*VotesRequest)(nil), "beapi.VotesRequest")
	proto.RegisterType((*VotesResponse)(nil), "beapi.VotesResponse")
	proto.RegisterType((*KeysRequest)(nil), "beapi.KeysRequest")
	proto.RegisterType((*KeysResponse)(nil), "beapi.KeysResponse")
	proto.RegisterType((*TruststatesRequest)(nil), "beapi.TruststatesRequest")
	proto.RegisterType((*TruststatesResponse)(nil), "beapi.TruststatesResponse")
	proto.RegisterType((*BoardThreadsCountRequest)(nil), "beapi.BoardThreadsCountRequest")
	proto.RegisterType((*BoardThreadsCountResponse)(nil), "beapi.BoardThreadsCountResponse")
	proto.RegisterType((*ThreadPostsCountRequest)(nil), "beapi.ThreadPostsCountRequest")
	proto.RegisterType((*ThreadPostsCountResponse)(nil), "beapi.ThreadPostsCountResponse")
	proto.RegisterType((*MintedContentPayload)(nil), "beapi.MintedContentPayload")
	proto.RegisterType((*MintedContentResponse)(nil), "beapi.MintedContentResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BackendAPI service

type BackendAPIClient interface {
	// You need to request access first, before anything.
	RequestBackendAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
	//
	// Lower level APIs to get uncompiled Mim objects in the case that there is no specific higher level API is available to you. Look at higher level APIs requesting more specific things first.
	//
	// For example, an uncompiled Mim object is a Truststate, which can mean any of those entities: a TS of publictrust, naming, f451, or elector class types. If you get the truststate itself, you'll have to figure this out on the frontend, which isn't very efficient (but the API is there if you have no other way.)
	//
	// Ideally though, if you end up using these often, it might be time to build a specific higher level API for it.
	GetBoards(ctx context.Context, in *BoardsRequest, opts ...grpc.CallOption) (*BoardsResponse, error)
	GetThreads(ctx context.Context, in *ThreadsRequest, opts ...grpc.CallOption) (*ThreadsResponse, error)
	GetPosts(ctx context.Context, in *PostsRequest, opts ...grpc.CallOption) (*PostsResponse, error)
	GetVotes(ctx context.Context, in *VotesRequest, opts ...grpc.CallOption) (*VotesResponse, error)
	GetKeys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error)
	GetTruststates(ctx context.Context, in *TruststatesRequest, opts ...grpc.CallOption) (*TruststatesResponse, error)
	GetBoardThreadsCount(ctx context.Context, in *BoardThreadsCountRequest, opts ...grpc.CallOption) (*BoardThreadsCountResponse, error)
	GetThreadPostsCount(ctx context.Context, in *ThreadPostsCountRequest, opts ...grpc.CallOption) (*ThreadPostsCountResponse, error)
	SendMintedContent(ctx context.Context, in *MintedContentPayload, opts ...grpc.CallOption) (*MintedContentResponse, error)
}

type backendAPIClient struct {
	cc *grpc.ClientConn
}

func NewBackendAPIClient(cc *grpc.ClientConn) BackendAPIClient {
	return &backendAPIClient{cc}
}

func (c *backendAPIClient) RequestBackendAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	out := new(AccessResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/RequestBackendAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) GetBoards(ctx context.Context, in *BoardsRequest, opts ...grpc.CallOption) (*BoardsResponse, error) {
	out := new(BoardsResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/GetBoards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) GetThreads(ctx context.Context, in *ThreadsRequest, opts ...grpc.CallOption) (*ThreadsResponse, error) {
	out := new(ThreadsResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/GetThreads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) GetPosts(ctx context.Context, in *PostsRequest, opts ...grpc.CallOption) (*PostsResponse, error) {
	out := new(PostsResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/GetPosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) GetVotes(ctx context.Context, in *VotesRequest, opts ...grpc.CallOption) (*VotesResponse, error) {
	out := new(VotesResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/GetVotes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) GetKeys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/GetKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) GetTruststates(ctx context.Context, in *TruststatesRequest, opts ...grpc.CallOption) (*TruststatesResponse, error) {
	out := new(TruststatesResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/GetTruststates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) GetBoardThreadsCount(ctx context.Context, in *BoardThreadsCountRequest, opts ...grpc.CallOption) (*BoardThreadsCountResponse, error) {
	out := new(BoardThreadsCountResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/GetBoardThreadsCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) GetThreadPostsCount(ctx context.Context, in *ThreadPostsCountRequest, opts ...grpc.CallOption) (*ThreadPostsCountResponse, error) {
	out := new(ThreadPostsCountResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/GetThreadPostsCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendAPIClient) SendMintedContent(ctx context.Context, in *MintedContentPayload, opts ...grpc.CallOption) (*MintedContentResponse, error) {
	out := new(MintedContentResponse)
	err := grpc.Invoke(ctx, "/beapi.BackendAPI/SendMintedContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BackendAPI service

type BackendAPIServer interface {
	// You need to request access first, before anything.
	RequestBackendAccess(context.Context, *AccessRequest) (*AccessResponse, error)
	//
	// Lower level APIs to get uncompiled Mim objects in the case that there is no specific higher level API is available to you. Look at higher level APIs requesting more specific things first.
	//
	// For example, an uncompiled Mim object is a Truststate, which can mean any of those entities: a TS of publictrust, naming, f451, or elector class types. If you get the truststate itself, you'll have to figure this out on the frontend, which isn't very efficient (but the API is there if you have no other way.)
	//
	// Ideally though, if you end up using these often, it might be time to build a specific higher level API for it.
	GetBoards(context.Context, *BoardsRequest) (*BoardsResponse, error)
	GetThreads(context.Context, *ThreadsRequest) (*ThreadsResponse, error)
	GetPosts(context.Context, *PostsRequest) (*PostsResponse, error)
	GetVotes(context.Context, *VotesRequest) (*VotesResponse, error)
	GetKeys(context.Context, *KeysRequest) (*KeysResponse, error)
	GetTruststates(context.Context, *TruststatesRequest) (*TruststatesResponse, error)
	GetBoardThreadsCount(context.Context, *BoardThreadsCountRequest) (*BoardThreadsCountResponse, error)
	GetThreadPostsCount(context.Context, *ThreadPostsCountRequest) (*ThreadPostsCountResponse, error)
	SendMintedContent(context.Context, *MintedContentPayload) (*MintedContentResponse, error)
}

func RegisterBackendAPIServer(s *grpc.Server, srv BackendAPIServer) {
	s.RegisterService(&_BackendAPI_serviceDesc, srv)
}

func _BackendAPI_RequestBackendAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).RequestBackendAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/RequestBackendAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).RequestBackendAccess(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_GetBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).GetBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/GetBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).GetBoards(ctx, req.(*BoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_GetThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).GetThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/GetThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).GetThreads(ctx, req.(*ThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).GetPosts(ctx, req.(*PostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_GetVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).GetVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/GetVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).GetVotes(ctx, req.(*VotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).GetKeys(ctx, req.(*KeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_GetTruststates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruststatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).GetTruststates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/GetTruststates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).GetTruststates(ctx, req.(*TruststatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_GetBoardThreadsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardThreadsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).GetBoardThreadsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/GetBoardThreadsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).GetBoardThreadsCount(ctx, req.(*BoardThreadsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_GetThreadPostsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadPostsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).GetThreadPostsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/GetThreadPostsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).GetThreadPostsCount(ctx, req.(*ThreadPostsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendAPI_SendMintedContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintedContentPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAPIServer).SendMintedContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beapi.BackendAPI/SendMintedContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAPIServer).SendMintedContent(ctx, req.(*MintedContentPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _BackendAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "beapi.BackendAPI",
	HandlerType: (*BackendAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestBackendAccess",
			Handler:    _BackendAPI_RequestBackendAccess_Handler,
		},
		{
			MethodName: "GetBoards",
			Handler:    _BackendAPI_GetBoards_Handler,
		},
		{
			MethodName: "GetThreads",
			Handler:    _BackendAPI_GetThreads_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _BackendAPI_GetPosts_Handler,
		},
		{
			MethodName: "GetVotes",
			Handler:    _BackendAPI_GetVotes_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _BackendAPI_GetKeys_Handler,
		},
		{
			MethodName: "GetTruststates",
			Handler:    _BackendAPI_GetTruststates_Handler,
		},
		{
			MethodName: "GetBoardThreadsCount",
			Handler:    _BackendAPI_GetBoardThreadsCount_Handler,
		},
		{
			MethodName: "GetThreadPostsCount",
			Handler:    _BackendAPI_GetThreadPostsCount_Handler,
		},
		{
			MethodName: "SendMintedContent",
			Handler:    _BackendAPI_SendMintedContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beapi/beapi.proto",
}

func init() { proto.RegisterFile("beapi/beapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1072 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xeb, 0x4e, 0x1b, 0xc7,
	0x17, 0xc7, 0x98, 0x35, 0xf8, 0x18, 0xf8, 0xc3, 0x60, 0xf2, 0x5f, 0xb6, 0x51, 0x62, 0x8d, 0x1a,
	0xc9, 0x52, 0x55, 0x22, 0x41, 0xa4, 0x48, 0x51, 0x2f, 0x02, 0x87, 0x58, 0x88, 0x34, 0xb1, 0x06,
	0xab, 0x4d, 0x2f, 0x1f, 0xba, 0x78, 0x0f, 0xb0, 0x0a, 0xde, 0x75, 0x76, 0xc6, 0x6a, 0xfd, 0xb1,
	0x0f, 0xd1, 0x97, 0xea, 0xc3, 0xb4, 0xaf, 0x50, 0xcd, 0x65, 0xd7, 0x33, 0xb6, 0xd3, 0x74, 0x1b,
	0xc9, 0x5f, 0x90, 0xcf, 0xe5, 0x77, 0xce, 0xfe, 0xe6, 0x5c, 0x66, 0x80, 0xdd, 0x2b, 0x0c, 0x47,
	0xf1, 0x63, 0xf5, 0xf7, 0x70, 0x94, 0xa5, 0x22, 0x25, 0x9e, 0x12, 0x82, 0x83, 0x61, 0x3c, 0x94,
	0x26, 0x2e, 0xb2, 0xf1, 0x40, 0x28, 0x13, 0xd7, 0x1e, 0xf4, 0xb7, 0x0a, 0x34, 0x18, 0xbe, 0x1b,
	0x23, 0x17, 0x98, 0x9d, 0x47, 0xa4, 0x05, 0x8d, 0x93, 0xc1, 0x00, 0x39, 0xef, 0xa7, 0x6f, 0x31,
	0xf1, 0x2b, 0xad, 0x4a, 0xbb, 0xce, 0x6c, 0x15, 0x69, 0x82, 0xf7, 0x2a, 0x4d, 0x06, 0xe8, 0xaf,
	0x2a, 0x9b, 0x16, 0xc8, 0x7d, 0xa8, 0xf7, 0xc6, 0x57, 0x77, 0xf1, 0xe0, 0x02, 0x27, 0x7e, 0x55,
	0x59, 0xa6, 0x0a, 0x69, 0xed, 0xc7, 0x43, 0xe4, 0x22, 0x1c, 0x8e, 0xfc, 0xb5, 0x56, 0xa5, 0x5d,
	0x65, 0x53, 0x05, 0x6d, 0x43, 0xed, 0x52, 0x84, 0x62, 0xcc, 0xc9, 0x03, 0x00, 0xfd, 0xab, 0x93,
	0x46, 0xa8, 0x92, 0x7b, 0xcc, 0xd2, 0xd0, 0xbf, 0x2a, 0xb0, 0xfe, 0x22, 0xbe, 0x13, 0x98, 0x71,
	0xf2, 0x05, 0xec, 0xbc, 0x0c, 0xb9, 0x60, 0x78, 0x2d, 0x23, 0xb1, 0x30, 0xb9, 0xd1, 0x88, 0xc6,
	0xd1, 0xce, 0xa1, 0x3e, 0x83, 0x42, 0xcf, 0xe6, 0x3c, 0xc9, 0x53, 0xd8, 0x7c, 0x11, 0x27, 0x37,
	0x98, 0x8d, 0xb2, 0x38, 0x11, 0x5c, 0x91, 0x69, 0x1c, 0xed, 0x19, 0xa4, 0x6d, 0x62, 0x8e, 0x23,
	0x79, 0x02, 0x8d, 0xfe, 0x64, 0x84, 0xe6, 0x2b, 0x14, 0xd5, 0xc6, 0x11, 0xc9, 0x33, 0x4e, 0x2d,
	0xcc, 0x76, 0x93, 0xe9, 0xba, 0x59, 0x38, 0xba, 0xcd, 0x61, 0x6b, 0x4e, 0x3a, 0xdb, 0xc4, 0x1c,
	0x47, 0x7a, 0xac, 0x4f, 0x4e, 0x7f, 0x74, 0x13, 0xbc, 0x4b, 0x11, 0x66, 0x42, 0xf1, 0xac, 0x32,
	0x2d, 0x90, 0x1d, 0xa8, 0x9e, 0x25, 0x91, 0xfa, 0x92, 0x2a, 0x93, 0x3f, 0xe9, 0x91, 0x4b, 0x8e,
	0xd0, 0x19, 0xb2, 0x95, 0x56, 0xb5, 0x5d, 0x77, 0x79, 0xd1, 0xaf, 0x1d, 0x5e, 0xaa, 0x62, 0x93,
	0x11, 0x76, 0xee, 0x42, 0xce, 0x4d, 0x21, 0xa6, 0x0a, 0x42, 0x60, 0x4d, 0x0a, 0xea, 0xd4, 0x3c,
	0xa6, 0x7e, 0xd3, 0x3f, 0x2b, 0x2e, 0x47, 0xf9, 0xb5, 0xa7, 0x69, 0x98, 0x45, 0xa6, 0x89, 0xb4,
	0x40, 0xee, 0x41, 0xad, 0x7f, 0x9b, 0x61, 0x18, 0x99, 0xfe, 0x31, 0x92, 0xd4, 0xf7, 0xc2, 0x0c,
	0x13, 0x61, 0xba, 0xc7, 0x48, 0x32, 0xca, 0xeb, 0x5f, 0x12, 0xcc, 0xd4, 0x91, 0xd5, 0x99, 0x16,
	0x54, 0x94, 0x30, 0xbb, 0x41, 0xe1, 0x7b, 0x26, 0x8a, 0x92, 0xa4, 0xfe, 0x79, 0x3a, 0x0c, 0xe3,
	0xc4, 0xaf, 0x69, 0xbd, 0x96, 0xc8, 0xa7, 0xb0, 0xf5, 0x2a, 0x7d, 0x8e, 0x7c, 0x80, 0x49, 0x14,
	0xca, 0x23, 0x58, 0x6f, 0x55, 0xda, 0x1b, 0xcc, 0x55, 0xca, 0x5c, 0x2f, 0xe3, 0x61, 0x2c, 0xfc,
	0x0d, 0xc5, 0x4b, 0x0b, 0x32, 0xe6, 0xeb, 0xeb, 0x6b, 0x8e, 0xc2, 0xaf, 0x2b, 0xb5, 0x91, 0xe8,
	0x19, 0x6c, 0xe9, 0xb9, 0x30, 0xf3, 0x23, 0x5b, 0xc3, 0x1a, 0x25, 0xd3, 0x8c, 0x79, 0x6b, 0x58,
	0x16, 0x66, 0xbb, 0xd1, 0xef, 0x61, 0x3b, 0x0f, 0xc3, 0x47, 0x69, 0xc2, 0x91, 0x3c, 0xca, 0xe7,
	0xc1, 0x84, 0xd8, 0x32, 0x21, 0xb4, 0x92, 0xe5, 0xc3, 0x32, 0x33, 0xaa, 0xab, 0x73, 0xa3, 0x4a,
	0x53, 0xd8, 0x52, 0x87, 0xfe, 0x71, 0x5f, 0x48, 0xda, 0xc5, 0xd0, 0x99, 0x31, 0xd9, 0x2e, 0xc6,
	0x44, 0xb7, 0x6c, 0x6e, 0xa6, 0x11, 0x6c, 0xe7, 0x09, 0xcb, 0x71, 0xf9, 0x0c, 0x6a, 0x1a, 0xe8,
	0xaf, 0xb6, 0xaa, 0x6a, 0x32, 0x9c, 0x5d, 0xa5, 0x6c, 0xcc, 0xb8, 0xd0, 0x11, 0x6c, 0xeb, 0xa6,
	0x59, 0x1a, 0xaf, 0x5b, 0xf8, 0x5f, 0x91, 0xb1, 0x1c, 0xb1, 0x43, 0x58, 0x37, 0x48, 0xc3, 0xac,
	0xe9, 0x32, 0xd3, 0x46, 0x96, 0x3b, 0xd1, 0x04, 0x36, 0x7b, 0x29, 0x17, 0x4b, 0x63, 0xf6, 0x33,
	0x6c, 0x99, 0x7c, 0xe5, 0x78, 0xb5, 0xc1, 0x53, 0x38, 0xc3, 0x8a, 0xb8, 0xac, 0xa4, 0x89, 0x69,
	0x07, 0xc9, 0xe8, 0xdb, 0x54, 0xe0, 0x32, 0x19, 0x99, 0x7c, 0xa5, 0x19, 0x29, 0xdc, 0x62, 0x46,
	0xd2, 0xc4, 0xb4, 0x03, 0x1d, 0x42, 0xe3, 0x02, 0x27, 0x4b, 0x23, 0xf4, 0x13, 0x6c, 0xea, 0x74,
	0xe5, 0xf8, 0x3c, 0x82, 0x35, 0x09, 0x33, 0x74, 0x76, 0x5d, 0x3a, 0x17, 0x38, 0x61, 0xca, 0x4c,
	0x05, 0x90, 0x7e, 0x36, 0xe6, 0x82, 0x8b, 0x70, 0x89, 0x45, 0xfa, 0x15, 0xf6, 0x9c, 0xac, 0xe5,
	0xa8, 0x3d, 0x83, 0x86, 0x85, 0x36, 0x0c, 0xfd, 0x99, 0xc1, 0x2a, 0x1c, 0x98, 0xed, 0x4c, 0x33,
	0xf0, 0xd5, 0x1a, 0x31, 0x03, 0xd7, 0x49, 0xc7, 0x89, 0xf8, 0x38, 0xd6, 0x2d, 0x68, 0x58, 0x37,
	0x69, 0xbe, 0x87, 0x2d, 0x15, 0x7d, 0x03, 0x07, 0x0b, 0x72, 0x96, 0xe3, 0xdc, 0x04, 0x6f, 0x20,
	0x71, 0xe6, 0xce, 0xd5, 0x02, 0x7d, 0x07, 0xff, 0xd7, 0x41, 0xd5, 0xac, 0x2d, 0x85, 0xcc, 0x77,
	0xe0, 0xcf, 0xa7, 0x2c, 0xcd, 0xa5, 0x63, 0x73, 0x51, 0x02, 0xfd, 0xbd, 0x0a, 0xcd, 0x6f, 0xe2,
	0x44, 0x60, 0xd4, 0x49, 0x13, 0x81, 0x89, 0xe8, 0x85, 0x93, 0xbb, 0x34, 0x8c, 0xfe, 0x23, 0x93,
	0x32, 0x57, 0x8a, 0xbd, 0xa6, 0xab, 0xff, 0x62, 0x4d, 0x4f, 0xd7, 0xdf, 0xda, 0x07, 0xd6, 0xdf,
	0x74, 0xad, 0x78, 0x1f, 0x58, 0x2b, 0xc5, 0xc0, 0xd6, 0xfe, 0x71, 0x60, 0x67, 0x9b, 0x7f, 0xbd,
	0x44, 0xf3, 0x93, 0x63, 0xa8, 0x9f, 0x44, 0x51, 0x86, 0x9c, 0x23, 0xf7, 0x37, 0x14, 0x72, 0xdf,
	0x45, 0x1a, 0x33, 0x9b, 0xfa, 0xd1, 0xaf, 0x60, 0xdf, 0x29, 0x4b, 0xc9, 0x6a, 0x1f, 0xfd, 0xe1,
	0x01, 0x9c, 0x86, 0x83, 0xb7, 0x98, 0x44, 0x27, 0xbd, 0x73, 0x72, 0x06, 0x4d, 0x53, 0xa6, 0x5c,
	0xa9, 0x5e, 0x2c, 0xa4, 0x69, 0xd0, 0xce, 0x9b, 0x2a, 0xd8, 0x9f, 0xd1, 0xea, 0xd4, 0x74, 0x85,
	0x3c, 0x83, 0x7a, 0x17, 0x85, 0x29, 0x5f, 0x8e, 0x75, 0x5e, 0x3b, 0x05, 0xd6, 0x7d, 0x92, 0xd0,
	0x15, 0xf2, 0x25, 0x40, 0x17, 0x45, 0x5e, 0xcb, 0xdc, 0xcd, 0x7d, 0x53, 0x04, 0xf7, 0x66, 0xd5,
	0x05, 0xfc, 0x29, 0x6c, 0x74, 0x51, 0xe8, 0xf2, 0xe6, 0x4f, 0x78, 0xfb, 0xd2, 0x0e, 0x9a, 0xae,
	0x72, 0x06, 0xa8, 0xab, 0x9d, 0x03, 0xed, 0xbb, 0xb1, 0x00, 0x3a, 0x17, 0x18, 0x5d, 0x21, 0x4f,
	0x60, 0xbd, 0x8b, 0x42, 0x95, 0x3f, 0xef, 0x7b, 0xeb, 0x06, 0x0a, 0xf6, 0x1c, 0x5d, 0x81, 0x3a,
	0x87, 0x6d, 0x49, 0xd3, 0xaa, 0xff, 0x41, 0xce, 0x69, 0x6e, 0xe3, 0x07, 0xc1, 0x22, 0x53, 0x11,
	0xea, 0x47, 0x68, 0xe6, 0xa7, 0x6d, 0x2f, 0x31, 0xf2, 0xd0, 0x3e, 0xe2, 0x05, 0x2b, 0x35, 0x68,
	0xbd, 0xdf, 0xa1, 0x08, 0xfe, 0x06, 0xf6, 0x8a, 0x72, 0x4c, 0x97, 0x0a, 0x79, 0xe0, 0x14, 0x60,
	0x6e, 0xc1, 0x05, 0x0f, 0xdf, 0x6b, 0x2f, 0x22, 0xf7, 0x60, 0xf7, 0x12, 0x93, 0xc8, 0x69, 0x5f,
	0xf2, 0x89, 0xc1, 0x2d, 0xda, 0x35, 0xc1, 0xfd, 0x45, 0xc6, 0x69, 0xc4, 0xd3, 0xe0, 0x07, 0x3f,
	0x44, 0x71, 0x8b, 0xd9, 0xe7, 0x83, 0x34, 0xc3, 0xc7, 0x7a, 0x6a, 0xf4, 0xff, 0xdc, 0x57, 0x35,
	0x25, 0x1d, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xd2, 0x70, 0xf6, 0x89, 0x0f, 0x00, 0x00,
}
