// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feapi/feapi.proto

/*
Package feapi is a generated protocol buffer package.

It is generated from these files:
	feapi/feapi.proto

It has these top-level messages:
	BEReadyRequest
	BEReadyResponse
	SetClientAPIServerPortRequest
	SetClientAPIServerPortResponse
	AllBoardsRequest
	AllBoardsResponse
	ThreadAndPostsRequest
	ThreadAndPostsResponse
	BoardAndThreadsRequest
	BoardAndThreadsResponse
	BoardSignalRequest
	BoardSignalResponse
	UserAndGraphRequest
	UserAndGraphResponse
	Event
	ContentEventPayload
	ContentEventResponse
	SignalEventPayload
	SignalEventResponse
	UncompiledEntityByKeyRequest
	UncompiledEntityByKeyResponse
	InflightsPruneRequest
	InflightsPruneResponse
*/
package feapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import feobjects "aether-core/protos/feobjects"
import structprotos "aether-core/protos/mimapi"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_UNKNOWN_EVENT_TYPE EventType = 0
	EventType_CREATE             EventType = 1
	EventType_UPDATE             EventType = 2
)

var EventType_name = map[int32]string{
	0: "UNKNOWN_EVENT_TYPE",
	1: "CREATE",
	2: "UPDATE",
}
var EventType_value = map[string]int32{
	"UNKNOWN_EVENT_TYPE": 0,
	"CREATE":             1,
	"UPDATE":             2,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SignalTargetType int32

const (
	SignalTargetType_UNKNOWN_SIGNAL_TARGET_TYPE SignalTargetType = 0
	SignalTargetType_CONTENT                    SignalTargetType = 1
	SignalTargetType_USER                       SignalTargetType = 2
)

var SignalTargetType_name = map[int32]string{
	0: "UNKNOWN_SIGNAL_TARGET_TYPE",
	1: "CONTENT",
	2: "USER",
}
var SignalTargetType_value = map[string]int32{
	"UNKNOWN_SIGNAL_TARGET_TYPE": 0,
	"CONTENT":                    1,
	"USER":                       2,
}

func (x SignalTargetType) String() string {
	return proto.EnumName(SignalTargetType_name, int32(x))
}
func (SignalTargetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SignalTypeClass int32

const (
	SignalTypeClass_UNKNOWN_SIGNAL_TYPECLASS SignalTypeClass = 0
	SignalTypeClass_ADDS_TO_DISCUSSION       SignalTypeClass = 1
	SignalTypeClass_FOLLOWS_GUIDELINES       SignalTypeClass = 2
	SignalTypeClass_MOD_ACTIONS              SignalTypeClass = 3
	SignalTypeClass_PUBLIC_TRUST             SignalTypeClass = 4
	SignalTypeClass_NAMING                   SignalTypeClass = 5
	SignalTypeClass_F451                     SignalTypeClass = 6
	SignalTypeClass_PUBLIC_ELECT             SignalTypeClass = 7
)

var SignalTypeClass_name = map[int32]string{
	0: "UNKNOWN_SIGNAL_TYPECLASS",
	1: "ADDS_TO_DISCUSSION",
	2: "FOLLOWS_GUIDELINES",
	3: "MOD_ACTIONS",
	4: "PUBLIC_TRUST",
	5: "NAMING",
	6: "F451",
	7: "PUBLIC_ELECT",
}
var SignalTypeClass_value = map[string]int32{
	"UNKNOWN_SIGNAL_TYPECLASS": 0,
	"ADDS_TO_DISCUSSION":       1,
	"FOLLOWS_GUIDELINES":       2,
	"MOD_ACTIONS":              3,
	"PUBLIC_TRUST":             4,
	"NAMING":                   5,
	"F451":                     6,
	"PUBLIC_ELECT":             7,
}

func (x SignalTypeClass) String() string {
	return proto.EnumName(SignalTypeClass_name, int32(x))
}
func (SignalTypeClass) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SignalType int32

const (
	SignalType_UNKNOWN_SIGNAL_TYPE SignalType = 0
	// ATD: Aggregate
	SignalType_UPVOTE   SignalType = 1
	SignalType_DOWNVOTE SignalType = 2
	// FG
	SignalType_REPORT_TO_MOD SignalType = 3
	// MA
	SignalType_MODBLOCK   SignalType = 4
	SignalType_MODAPPROVE SignalType = 5
	// PT: Aggregate
	SignalType_FOLLOW SignalType = 6
	SignalType_BLOCK  SignalType = 7
	// Naming
	SignalType_NAME_ASSIGN SignalType = 8
	// F451
	SignalType_CENSOR_ASSIGN SignalType = 9
	// PE: Aggregate
	SignalType_ELECT      SignalType = 10
	SignalType_DISQUALIFY SignalType = 11
	// General
	SignalType_RETRACT SignalType = 12
)

var SignalType_name = map[int32]string{
	0:  "UNKNOWN_SIGNAL_TYPE",
	1:  "UPVOTE",
	2:  "DOWNVOTE",
	3:  "REPORT_TO_MOD",
	4:  "MODBLOCK",
	5:  "MODAPPROVE",
	6:  "FOLLOW",
	7:  "BLOCK",
	8:  "NAME_ASSIGN",
	9:  "CENSOR_ASSIGN",
	10: "ELECT",
	11: "DISQUALIFY",
	12: "RETRACT",
}
var SignalType_value = map[string]int32{
	"UNKNOWN_SIGNAL_TYPE": 0,
	"UPVOTE":              1,
	"DOWNVOTE":            2,
	"REPORT_TO_MOD":       3,
	"MODBLOCK":            4,
	"MODAPPROVE":          5,
	"FOLLOW":              6,
	"BLOCK":               7,
	"NAME_ASSIGN":         8,
	"CENSOR_ASSIGN":       9,
	"ELECT":               10,
	"DISQUALIFY":          11,
	"RETRACT":             12,
}

func (x SignalType) String() string {
	return proto.EnumName(SignalType_name, int32(x))
}
func (SignalType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UncompiledEntityType int32

const (
	UncompiledEntityType_UNKNOWN_ENTITY_TYPE UncompiledEntityType = 0
	UncompiledEntityType_BOARD               UncompiledEntityType = 1
	UncompiledEntityType_THREAD              UncompiledEntityType = 2
	UncompiledEntityType_POST                UncompiledEntityType = 3
	UncompiledEntityType_VOTE                UncompiledEntityType = 4
	UncompiledEntityType_KEY                 UncompiledEntityType = 5
	UncompiledEntityType_TRUSTSTATE          UncompiledEntityType = 6
)

var UncompiledEntityType_name = map[int32]string{
	0: "UNKNOWN_ENTITY_TYPE",
	1: "BOARD",
	2: "THREAD",
	3: "POST",
	4: "VOTE",
	5: "KEY",
	6: "TRUSTSTATE",
}
var UncompiledEntityType_value = map[string]int32{
	"UNKNOWN_ENTITY_TYPE": 0,
	"BOARD":               1,
	"THREAD":              2,
	"POST":                3,
	"VOTE":                4,
	"KEY":                 5,
	"TRUSTSTATE":          6,
}

func (x UncompiledEntityType) String() string {
	return proto.EnumName(UncompiledEntityType_name, int32(x))
}
func (UncompiledEntityType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type BEReadyRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *BEReadyRequest) Reset()                    { *m = BEReadyRequest{} }
func (m *BEReadyRequest) String() string            { return proto.CompactTextString(m) }
func (*BEReadyRequest) ProtoMessage()               {}
func (*BEReadyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BEReadyRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BEReadyRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type BEReadyResponse struct {
}

func (m *BEReadyResponse) Reset()                    { *m = BEReadyResponse{} }
func (m *BEReadyResponse) String() string            { return proto.CompactTextString(m) }
func (*BEReadyResponse) ProtoMessage()               {}
func (*BEReadyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SetClientAPIServerPortRequest struct {
	Port int32 `protobuf:"varint,1,opt,name=Port" json:"Port,omitempty"`
}

func (m *SetClientAPIServerPortRequest) Reset()                    { *m = SetClientAPIServerPortRequest{} }
func (m *SetClientAPIServerPortRequest) String() string            { return proto.CompactTextString(m) }
func (*SetClientAPIServerPortRequest) ProtoMessage()               {}
func (*SetClientAPIServerPortRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetClientAPIServerPortRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type SetClientAPIServerPortResponse struct {
}

func (m *SetClientAPIServerPortResponse) Reset()                    { *m = SetClientAPIServerPortResponse{} }
func (m *SetClientAPIServerPortResponse) String() string            { return proto.CompactTextString(m) }
func (*SetClientAPIServerPortResponse) ProtoMessage()               {}
func (*SetClientAPIServerPortResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AllBoardsRequest struct {
}

func (m *AllBoardsRequest) Reset()                    { *m = AllBoardsRequest{} }
func (m *AllBoardsRequest) String() string            { return proto.CompactTextString(m) }
func (*AllBoardsRequest) ProtoMessage()               {}
func (*AllBoardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AllBoardsResponse struct {
	AllBoards []*feobjects.CompiledBoardEntity `protobuf:"bytes,1,rep,name=AllBoards" json:"AllBoards,omitempty"`
}

func (m *AllBoardsResponse) Reset()                    { *m = AllBoardsResponse{} }
func (m *AllBoardsResponse) String() string            { return proto.CompactTextString(m) }
func (*AllBoardsResponse) ProtoMessage()               {}
func (*AllBoardsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AllBoardsResponse) GetAllBoards() []*feobjects.CompiledBoardEntity {
	if m != nil {
		return m.AllBoards
	}
	return nil
}

type ThreadAndPostsRequest struct {
	BoardFingerprint  string `protobuf:"bytes,1,opt,name=BoardFingerprint" json:"BoardFingerprint,omitempty"`
	ThreadFingerprint string `protobuf:"bytes,2,opt,name=ThreadFingerprint" json:"ThreadFingerprint,omitempty"`
}

func (m *ThreadAndPostsRequest) Reset()                    { *m = ThreadAndPostsRequest{} }
func (m *ThreadAndPostsRequest) String() string            { return proto.CompactTextString(m) }
func (*ThreadAndPostsRequest) ProtoMessage()               {}
func (*ThreadAndPostsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ThreadAndPostsRequest) GetBoardFingerprint() string {
	if m != nil {
		return m.BoardFingerprint
	}
	return ""
}

func (m *ThreadAndPostsRequest) GetThreadFingerprint() string {
	if m != nil {
		return m.ThreadFingerprint
	}
	return ""
}

type ThreadAndPostsResponse struct {
	Board  *feobjects.CompiledBoardEntity  `protobuf:"bytes,1,opt,name=Board" json:"Board,omitempty"`
	Thread *feobjects.CompiledThreadEntity `protobuf:"bytes,2,opt,name=Thread" json:"Thread,omitempty"`
	Posts  []*feobjects.CompiledPostEntity `protobuf:"bytes,3,rep,name=Posts" json:"Posts,omitempty"`
}

func (m *ThreadAndPostsResponse) Reset()                    { *m = ThreadAndPostsResponse{} }
func (m *ThreadAndPostsResponse) String() string            { return proto.CompactTextString(m) }
func (*ThreadAndPostsResponse) ProtoMessage()               {}
func (*ThreadAndPostsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ThreadAndPostsResponse) GetBoard() *feobjects.CompiledBoardEntity {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *ThreadAndPostsResponse) GetThread() *feobjects.CompiledThreadEntity {
	if m != nil {
		return m.Thread
	}
	return nil
}

func (m *ThreadAndPostsResponse) GetPosts() []*feobjects.CompiledPostEntity {
	if m != nil {
		return m.Posts
	}
	return nil
}

type BoardAndThreadsRequest struct {
	BoardFingerprint string `protobuf:"bytes,1,opt,name=BoardFingerprint" json:"BoardFingerprint,omitempty"`
}

func (m *BoardAndThreadsRequest) Reset()                    { *m = BoardAndThreadsRequest{} }
func (m *BoardAndThreadsRequest) String() string            { return proto.CompactTextString(m) }
func (*BoardAndThreadsRequest) ProtoMessage()               {}
func (*BoardAndThreadsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BoardAndThreadsRequest) GetBoardFingerprint() string {
	if m != nil {
		return m.BoardFingerprint
	}
	return ""
}

type BoardAndThreadsResponse struct {
	Board   *feobjects.CompiledBoardEntity    `protobuf:"bytes,1,opt,name=Board" json:"Board,omitempty"`
	Threads []*feobjects.CompiledThreadEntity `protobuf:"bytes,2,rep,name=Threads" json:"Threads,omitempty"`
}

func (m *BoardAndThreadsResponse) Reset()                    { *m = BoardAndThreadsResponse{} }
func (m *BoardAndThreadsResponse) String() string            { return proto.CompactTextString(m) }
func (*BoardAndThreadsResponse) ProtoMessage()               {}
func (*BoardAndThreadsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BoardAndThreadsResponse) GetBoard() *feobjects.CompiledBoardEntity {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *BoardAndThreadsResponse) GetThreads() []*feobjects.CompiledThreadEntity {
	if m != nil {
		return m.Threads
	}
	return nil
}

type BoardSignalRequest struct {
	Fingerprint  string `protobuf:"bytes,1,opt,name=Fingerprint" json:"Fingerprint,omitempty"`
	Subscribed   bool   `protobuf:"varint,2,opt,name=Subscribed" json:"Subscribed,omitempty"`
	Notify       bool   `protobuf:"varint,3,opt,name=Notify" json:"Notify,omitempty"`
	LastSeen     int64  `protobuf:"varint,4,opt,name=LastSeen" json:"LastSeen,omitempty"`
	LastSeenOnly bool   `protobuf:"varint,5,opt,name=LastSeenOnly" json:"LastSeenOnly,omitempty"`
}

func (m *BoardSignalRequest) Reset()                    { *m = BoardSignalRequest{} }
func (m *BoardSignalRequest) String() string            { return proto.CompactTextString(m) }
func (*BoardSignalRequest) ProtoMessage()               {}
func (*BoardSignalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BoardSignalRequest) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *BoardSignalRequest) GetSubscribed() bool {
	if m != nil {
		return m.Subscribed
	}
	return false
}

func (m *BoardSignalRequest) GetNotify() bool {
	if m != nil {
		return m.Notify
	}
	return false
}

func (m *BoardSignalRequest) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *BoardSignalRequest) GetLastSeenOnly() bool {
	if m != nil {
		return m.LastSeenOnly
	}
	return false
}

type BoardSignalResponse struct {
	Committed bool `protobuf:"varint,1,opt,name=Committed" json:"Committed,omitempty"`
}

func (m *BoardSignalResponse) Reset()                    { *m = BoardSignalResponse{} }
func (m *BoardSignalResponse) String() string            { return proto.CompactTextString(m) }
func (*BoardSignalResponse) ProtoMessage()               {}
func (*BoardSignalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BoardSignalResponse) GetCommitted() bool {
	if m != nil {
		return m.Committed
	}
	return false
}

type UserAndGraphRequest struct {
	Fingerprint          string `protobuf:"bytes,1,opt,name=Fingerprint" json:"Fingerprint,omitempty"`
	UserEntityRequested  bool   `protobuf:"varint,2,opt,name=UserEntityRequested" json:"UserEntityRequested,omitempty"`
	UserBoardsRequested  bool   `protobuf:"varint,6,opt,name=UserBoardsRequested" json:"UserBoardsRequested,omitempty"`
	UserThreadsRequested bool   `protobuf:"varint,4,opt,name=UserThreadsRequested" json:"UserThreadsRequested,omitempty"`
	UserPostsRequested   bool   `protobuf:"varint,5,opt,name=UserPostsRequested" json:"UserPostsRequested,omitempty"`
}

func (m *UserAndGraphRequest) Reset()                    { *m = UserAndGraphRequest{} }
func (m *UserAndGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*UserAndGraphRequest) ProtoMessage()               {}
func (*UserAndGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UserAndGraphRequest) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *UserAndGraphRequest) GetUserEntityRequested() bool {
	if m != nil {
		return m.UserEntityRequested
	}
	return false
}

func (m *UserAndGraphRequest) GetUserBoardsRequested() bool {
	if m != nil {
		return m.UserBoardsRequested
	}
	return false
}

func (m *UserAndGraphRequest) GetUserThreadsRequested() bool {
	if m != nil {
		return m.UserThreadsRequested
	}
	return false
}

func (m *UserAndGraphRequest) GetUserPostsRequested() bool {
	if m != nil {
		return m.UserPostsRequested
	}
	return false
}

type UserAndGraphResponse struct {
	User                 *feobjects.CompiledUserEntity     `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Boards               []*feobjects.CompiledBoardEntity  `protobuf:"bytes,2,rep,name=Boards" json:"Boards,omitempty"`
	Threads              []*feobjects.CompiledThreadEntity `protobuf:"bytes,3,rep,name=Threads" json:"Threads,omitempty"`
	Posts                []*feobjects.CompiledPostEntity   `protobuf:"bytes,4,rep,name=Posts" json:"Posts,omitempty"`
	UserEntityRequested  bool                              `protobuf:"varint,5,opt,name=UserEntityRequested" json:"UserEntityRequested,omitempty"`
	UserBoardsRequested  bool                              `protobuf:"varint,6,opt,name=UserBoardsRequested" json:"UserBoardsRequested,omitempty"`
	UserThreadsRequested bool                              `protobuf:"varint,7,opt,name=UserThreadsRequested" json:"UserThreadsRequested,omitempty"`
	UserPostsRequested   bool                              `protobuf:"varint,8,opt,name=UserPostsRequested" json:"UserPostsRequested,omitempty"`
}

func (m *UserAndGraphResponse) Reset()                    { *m = UserAndGraphResponse{} }
func (m *UserAndGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*UserAndGraphResponse) ProtoMessage()               {}
func (*UserAndGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UserAndGraphResponse) GetUser() *feobjects.CompiledUserEntity {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserAndGraphResponse) GetBoards() []*feobjects.CompiledBoardEntity {
	if m != nil {
		return m.Boards
	}
	return nil
}

func (m *UserAndGraphResponse) GetThreads() []*feobjects.CompiledThreadEntity {
	if m != nil {
		return m.Threads
	}
	return nil
}

func (m *UserAndGraphResponse) GetPosts() []*feobjects.CompiledPostEntity {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *UserAndGraphResponse) GetUserEntityRequested() bool {
	if m != nil {
		return m.UserEntityRequested
	}
	return false
}

func (m *UserAndGraphResponse) GetUserBoardsRequested() bool {
	if m != nil {
		return m.UserBoardsRequested
	}
	return false
}

func (m *UserAndGraphResponse) GetUserThreadsRequested() bool {
	if m != nil {
		return m.UserThreadsRequested
	}
	return false
}

func (m *UserAndGraphResponse) GetUserPostsRequested() bool {
	if m != nil {
		return m.UserPostsRequested
	}
	return false
}

type Event struct {
	OwnerFingerprint string    `protobuf:"bytes,1,opt,name=OwnerFingerprint" json:"OwnerFingerprint,omitempty"`
	PriorFingerprint string    `protobuf:"bytes,2,opt,name=PriorFingerprint" json:"PriorFingerprint,omitempty"`
	EventType        EventType `protobuf:"varint,3,opt,name=EventType,enum=feapi.EventType" json:"EventType,omitempty"`
	Timestamp        int64     `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Event) GetOwnerFingerprint() string {
	if m != nil {
		return m.OwnerFingerprint
	}
	return ""
}

func (m *Event) GetPriorFingerprint() string {
	if m != nil {
		return m.PriorFingerprint
	}
	return ""
}

func (m *Event) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_UNKNOWN_EVENT_TYPE
}

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ContentEventPayload struct {
	Event      *Event               `protobuf:"bytes,1,opt,name=Event" json:"Event,omitempty"`
	BoardData  *structprotos.Board  `protobuf:"bytes,2,opt,name=BoardData" json:"BoardData,omitempty"`
	ThreadData *structprotos.Thread `protobuf:"bytes,3,opt,name=ThreadData" json:"ThreadData,omitempty"`
	PostData   *structprotos.Post   `protobuf:"bytes,4,opt,name=PostData" json:"PostData,omitempty"`
	KeyData    *structprotos.Key    `protobuf:"bytes,5,opt,name=KeyData" json:"KeyData,omitempty"`
}

func (m *ContentEventPayload) Reset()                    { *m = ContentEventPayload{} }
func (m *ContentEventPayload) String() string            { return proto.CompactTextString(m) }
func (*ContentEventPayload) ProtoMessage()               {}
func (*ContentEventPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ContentEventPayload) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ContentEventPayload) GetBoardData() *structprotos.Board {
	if m != nil {
		return m.BoardData
	}
	return nil
}

func (m *ContentEventPayload) GetThreadData() *structprotos.Thread {
	if m != nil {
		return m.ThreadData
	}
	return nil
}

func (m *ContentEventPayload) GetPostData() *structprotos.Post {
	if m != nil {
		return m.PostData
	}
	return nil
}

func (m *ContentEventPayload) GetKeyData() *structprotos.Key {
	if m != nil {
		return m.KeyData
	}
	return nil
}

type ContentEventResponse struct {
}

func (m *ContentEventResponse) Reset()                    { *m = ContentEventResponse{} }
func (m *ContentEventResponse) String() string            { return proto.CompactTextString(m) }
func (*ContentEventResponse) ProtoMessage()               {}
func (*ContentEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type SignalEventPayload struct {
	Event            *Event           `protobuf:"bytes,1,opt,name=Event" json:"Event,omitempty"`
	SignalTargetType SignalTargetType `protobuf:"varint,2,opt,name=SignalTargetType,enum=feapi.SignalTargetType" json:"SignalTargetType,omitempty"`
	// ----------  Defined for targettype=content  ----------
	TargetBoard  string `protobuf:"bytes,3,opt,name=TargetBoard" json:"TargetBoard,omitempty"`
	TargetThread string `protobuf:"bytes,4,opt,name=TargetThread" json:"TargetThread,omitempty"`
	// ----------  Defined for targettype=user  ----------
	TargetDomain      string          `protobuf:"bytes,5,opt,name=TargetDomain" json:"TargetDomain,omitempty"`
	TargetExpiry      int64           `protobuf:"varint,6,opt,name=TargetExpiry" json:"TargetExpiry,omitempty"`
	Meta              string          `protobuf:"bytes,7,opt,name=Meta" json:"Meta,omitempty"`
	TargetFingerprint string          `protobuf:"bytes,8,opt,name=TargetFingerprint" json:"TargetFingerprint,omitempty"`
	SignalTypeClass   SignalTypeClass `protobuf:"varint,9,opt,name=SignalTypeClass,enum=feapi.SignalTypeClass" json:"SignalTypeClass,omitempty"`
	SignalType        SignalType      `protobuf:"varint,10,opt,name=SignalType,enum=feapi.SignalType" json:"SignalType,omitempty"`
	SignalText        string          `protobuf:"bytes,11,opt,name=SignalText" json:"SignalText,omitempty"`
}

func (m *SignalEventPayload) Reset()                    { *m = SignalEventPayload{} }
func (m *SignalEventPayload) String() string            { return proto.CompactTextString(m) }
func (*SignalEventPayload) ProtoMessage()               {}
func (*SignalEventPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SignalEventPayload) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *SignalEventPayload) GetSignalTargetType() SignalTargetType {
	if m != nil {
		return m.SignalTargetType
	}
	return SignalTargetType_UNKNOWN_SIGNAL_TARGET_TYPE
}

func (m *SignalEventPayload) GetTargetBoard() string {
	if m != nil {
		return m.TargetBoard
	}
	return ""
}

func (m *SignalEventPayload) GetTargetThread() string {
	if m != nil {
		return m.TargetThread
	}
	return ""
}

func (m *SignalEventPayload) GetTargetDomain() string {
	if m != nil {
		return m.TargetDomain
	}
	return ""
}

func (m *SignalEventPayload) GetTargetExpiry() int64 {
	if m != nil {
		return m.TargetExpiry
	}
	return 0
}

func (m *SignalEventPayload) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *SignalEventPayload) GetTargetFingerprint() string {
	if m != nil {
		return m.TargetFingerprint
	}
	return ""
}

func (m *SignalEventPayload) GetSignalTypeClass() SignalTypeClass {
	if m != nil {
		return m.SignalTypeClass
	}
	return SignalTypeClass_UNKNOWN_SIGNAL_TYPECLASS
}

func (m *SignalEventPayload) GetSignalType() SignalType {
	if m != nil {
		return m.SignalType
	}
	return SignalType_UNKNOWN_SIGNAL_TYPE
}

func (m *SignalEventPayload) GetSignalText() string {
	if m != nil {
		return m.SignalText
	}
	return ""
}

type SignalEventResponse struct {
}

func (m *SignalEventResponse) Reset()                    { *m = SignalEventResponse{} }
func (m *SignalEventResponse) String() string            { return proto.CompactTextString(m) }
func (*SignalEventResponse) ProtoMessage()               {}
func (*SignalEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type UncompiledEntityByKeyRequest struct {
	EntityType       UncompiledEntityType `protobuf:"varint,1,opt,name=EntityType,enum=feapi.UncompiledEntityType" json:"EntityType,omitempty"`
	Limit            int32                `protobuf:"varint,2,opt,name=Limit" json:"Limit,omitempty"`
	Offset           int32                `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
	OwnerFingerprint string               `protobuf:"bytes,4,opt,name=OwnerFingerprint" json:"OwnerFingerprint,omitempty"`
}

func (m *UncompiledEntityByKeyRequest) Reset()                    { *m = UncompiledEntityByKeyRequest{} }
func (m *UncompiledEntityByKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*UncompiledEntityByKeyRequest) ProtoMessage()               {}
func (*UncompiledEntityByKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *UncompiledEntityByKeyRequest) GetEntityType() UncompiledEntityType {
	if m != nil {
		return m.EntityType
	}
	return UncompiledEntityType_UNKNOWN_ENTITY_TYPE
}

func (m *UncompiledEntityByKeyRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UncompiledEntityByKeyRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *UncompiledEntityByKeyRequest) GetOwnerFingerprint() string {
	if m != nil {
		return m.OwnerFingerprint
	}
	return ""
}

type UncompiledEntityByKeyResponse struct {
	EntityType  UncompiledEntityType       `protobuf:"varint,1,opt,name=EntityType,enum=feapi.UncompiledEntityType" json:"EntityType,omitempty"`
	Boards      []*structprotos.Board      `protobuf:"bytes,2,rep,name=Boards" json:"Boards,omitempty"`
	Threads     []*structprotos.Thread     `protobuf:"bytes,3,rep,name=Threads" json:"Threads,omitempty"`
	Posts       []*structprotos.Post       `protobuf:"bytes,4,rep,name=Posts" json:"Posts,omitempty"`
	Votes       []*structprotos.Vote       `protobuf:"bytes,5,rep,name=Votes" json:"Votes,omitempty"`
	Keys        []*structprotos.Key        `protobuf:"bytes,6,rep,name=Keys" json:"Keys,omitempty"`
	Truststates []*structprotos.Truststate `protobuf:"bytes,7,rep,name=Truststates" json:"Truststates,omitempty"`
}

func (m *UncompiledEntityByKeyResponse) Reset()                    { *m = UncompiledEntityByKeyResponse{} }
func (m *UncompiledEntityByKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*UncompiledEntityByKeyResponse) ProtoMessage()               {}
func (*UncompiledEntityByKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UncompiledEntityByKeyResponse) GetEntityType() UncompiledEntityType {
	if m != nil {
		return m.EntityType
	}
	return UncompiledEntityType_UNKNOWN_ENTITY_TYPE
}

func (m *UncompiledEntityByKeyResponse) GetBoards() []*structprotos.Board {
	if m != nil {
		return m.Boards
	}
	return nil
}

func (m *UncompiledEntityByKeyResponse) GetThreads() []*structprotos.Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

func (m *UncompiledEntityByKeyResponse) GetPosts() []*structprotos.Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *UncompiledEntityByKeyResponse) GetVotes() []*structprotos.Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *UncompiledEntityByKeyResponse) GetKeys() []*structprotos.Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *UncompiledEntityByKeyResponse) GetTruststates() []*structprotos.Truststate {
	if m != nil {
		return m.Truststates
	}
	return nil
}

type InflightsPruneRequest struct {
}

func (m *InflightsPruneRequest) Reset()                    { *m = InflightsPruneRequest{} }
func (m *InflightsPruneRequest) String() string            { return proto.CompactTextString(m) }
func (*InflightsPruneRequest) ProtoMessage()               {}
func (*InflightsPruneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type InflightsPruneResponse struct {
}

func (m *InflightsPruneResponse) Reset()                    { *m = InflightsPruneResponse{} }
func (m *InflightsPruneResponse) String() string            { return proto.CompactTextString(m) }
func (*InflightsPruneResponse) ProtoMessage()               {}
func (*InflightsPruneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func init() {
	proto.RegisterType((*BEReadyRequest)(nil), "feapi.BEReadyRequest")
	proto.RegisterType((*BEReadyResponse)(nil), "feapi.BEReadyResponse")
	proto.RegisterType((*SetClientAPIServerPortRequest)(nil), "feapi.SetClientAPIServerPortRequest")
	proto.RegisterType((*SetClientAPIServerPortResponse)(nil), "feapi.SetClientAPIServerPortResponse")
	proto.RegisterType((*AllBoardsRequest)(nil), "feapi.AllBoardsRequest")
	proto.RegisterType((*AllBoardsResponse)(nil), "feapi.AllBoardsResponse")
	proto.RegisterType((*ThreadAndPostsRequest)(nil), "feapi.ThreadAndPostsRequest")
	proto.RegisterType((*ThreadAndPostsResponse)(nil), "feapi.ThreadAndPostsResponse")
	proto.RegisterType((*BoardAndThreadsRequest)(nil), "feapi.BoardAndThreadsRequest")
	proto.RegisterType((*BoardAndThreadsResponse)(nil), "feapi.BoardAndThreadsResponse")
	proto.RegisterType((*BoardSignalRequest)(nil), "feapi.BoardSignalRequest")
	proto.RegisterType((*BoardSignalResponse)(nil), "feapi.BoardSignalResponse")
	proto.RegisterType((*UserAndGraphRequest)(nil), "feapi.UserAndGraphRequest")
	proto.RegisterType((*UserAndGraphResponse)(nil), "feapi.UserAndGraphResponse")
	proto.RegisterType((*Event)(nil), "feapi.Event")
	proto.RegisterType((*ContentEventPayload)(nil), "feapi.ContentEventPayload")
	proto.RegisterType((*ContentEventResponse)(nil), "feapi.ContentEventResponse")
	proto.RegisterType((*SignalEventPayload)(nil), "feapi.SignalEventPayload")
	proto.RegisterType((*SignalEventResponse)(nil), "feapi.SignalEventResponse")
	proto.RegisterType((*UncompiledEntityByKeyRequest)(nil), "feapi.UncompiledEntityByKeyRequest")
	proto.RegisterType((*UncompiledEntityByKeyResponse)(nil), "feapi.UncompiledEntityByKeyResponse")
	proto.RegisterType((*InflightsPruneRequest)(nil), "feapi.InflightsPruneRequest")
	proto.RegisterType((*InflightsPruneResponse)(nil), "feapi.InflightsPruneResponse")
	proto.RegisterEnum("feapi.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("feapi.SignalTargetType", SignalTargetType_name, SignalTargetType_value)
	proto.RegisterEnum("feapi.SignalTypeClass", SignalTypeClass_name, SignalTypeClass_value)
	proto.RegisterEnum("feapi.SignalType", SignalType_name, SignalType_value)
	proto.RegisterEnum("feapi.UncompiledEntityType", UncompiledEntityType_name, UncompiledEntityType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FrontendAPI service

type FrontendAPIClient interface {
	BackendReady(ctx context.Context, in *BEReadyRequest, opts ...grpc.CallOption) (*BEReadyResponse, error)
	SetClientAPIServerPort(ctx context.Context, in *SetClientAPIServerPortRequest, opts ...grpc.CallOption) (*SetClientAPIServerPortResponse, error)
	GetThreadAndPosts(ctx context.Context, in *ThreadAndPostsRequest, opts ...grpc.CallOption) (*ThreadAndPostsResponse, error)
	GetBoardAndThreads(ctx context.Context, in *BoardAndThreadsRequest, opts ...grpc.CallOption) (*BoardAndThreadsResponse, error)
	GetAllBoards(ctx context.Context, in *AllBoardsRequest, opts ...grpc.CallOption) (*AllBoardsResponse, error)
	SetBoardSignal(ctx context.Context, in *BoardSignalRequest, opts ...grpc.CallOption) (*BoardSignalResponse, error)
	GetUserAndGraph(ctx context.Context, in *UserAndGraphRequest, opts ...grpc.CallOption) (*UserAndGraphResponse, error)
	SendContentEvent(ctx context.Context, in *ContentEventPayload, opts ...grpc.CallOption) (*ContentEventResponse, error)
	SendSignalEvent(ctx context.Context, in *SignalEventPayload, opts ...grpc.CallOption) (*SignalEventResponse, error)
	GetUncompiledEntityByKey(ctx context.Context, in *UncompiledEntityByKeyRequest, opts ...grpc.CallOption) (*UncompiledEntityByKeyResponse, error)
	SendInflightsPruneRequest(ctx context.Context, in *InflightsPruneRequest, opts ...grpc.CallOption) (*InflightsPruneResponse, error)
}

type frontendAPIClient struct {
	cc *grpc.ClientConn
}

func NewFrontendAPIClient(cc *grpc.ClientConn) FrontendAPIClient {
	return &frontendAPIClient{cc}
}

func (c *frontendAPIClient) BackendReady(ctx context.Context, in *BEReadyRequest, opts ...grpc.CallOption) (*BEReadyResponse, error) {
	out := new(BEReadyResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/BackendReady", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) SetClientAPIServerPort(ctx context.Context, in *SetClientAPIServerPortRequest, opts ...grpc.CallOption) (*SetClientAPIServerPortResponse, error) {
	out := new(SetClientAPIServerPortResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/SetClientAPIServerPort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) GetThreadAndPosts(ctx context.Context, in *ThreadAndPostsRequest, opts ...grpc.CallOption) (*ThreadAndPostsResponse, error) {
	out := new(ThreadAndPostsResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/GetThreadAndPosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) GetBoardAndThreads(ctx context.Context, in *BoardAndThreadsRequest, opts ...grpc.CallOption) (*BoardAndThreadsResponse, error) {
	out := new(BoardAndThreadsResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/GetBoardAndThreads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) GetAllBoards(ctx context.Context, in *AllBoardsRequest, opts ...grpc.CallOption) (*AllBoardsResponse, error) {
	out := new(AllBoardsResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/GetAllBoards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) SetBoardSignal(ctx context.Context, in *BoardSignalRequest, opts ...grpc.CallOption) (*BoardSignalResponse, error) {
	out := new(BoardSignalResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/SetBoardSignal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) GetUserAndGraph(ctx context.Context, in *UserAndGraphRequest, opts ...grpc.CallOption) (*UserAndGraphResponse, error) {
	out := new(UserAndGraphResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/GetUserAndGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) SendContentEvent(ctx context.Context, in *ContentEventPayload, opts ...grpc.CallOption) (*ContentEventResponse, error) {
	out := new(ContentEventResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/SendContentEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) SendSignalEvent(ctx context.Context, in *SignalEventPayload, opts ...grpc.CallOption) (*SignalEventResponse, error) {
	out := new(SignalEventResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/SendSignalEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) GetUncompiledEntityByKey(ctx context.Context, in *UncompiledEntityByKeyRequest, opts ...grpc.CallOption) (*UncompiledEntityByKeyResponse, error) {
	out := new(UncompiledEntityByKeyResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/GetUncompiledEntityByKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendAPIClient) SendInflightsPruneRequest(ctx context.Context, in *InflightsPruneRequest, opts ...grpc.CallOption) (*InflightsPruneResponse, error) {
	out := new(InflightsPruneResponse)
	err := grpc.Invoke(ctx, "/feapi.FrontendAPI/SendInflightsPruneRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontendAPI service

type FrontendAPIServer interface {
	BackendReady(context.Context, *BEReadyRequest) (*BEReadyResponse, error)
	SetClientAPIServerPort(context.Context, *SetClientAPIServerPortRequest) (*SetClientAPIServerPortResponse, error)
	GetThreadAndPosts(context.Context, *ThreadAndPostsRequest) (*ThreadAndPostsResponse, error)
	GetBoardAndThreads(context.Context, *BoardAndThreadsRequest) (*BoardAndThreadsResponse, error)
	GetAllBoards(context.Context, *AllBoardsRequest) (*AllBoardsResponse, error)
	SetBoardSignal(context.Context, *BoardSignalRequest) (*BoardSignalResponse, error)
	GetUserAndGraph(context.Context, *UserAndGraphRequest) (*UserAndGraphResponse, error)
	SendContentEvent(context.Context, *ContentEventPayload) (*ContentEventResponse, error)
	SendSignalEvent(context.Context, *SignalEventPayload) (*SignalEventResponse, error)
	GetUncompiledEntityByKey(context.Context, *UncompiledEntityByKeyRequest) (*UncompiledEntityByKeyResponse, error)
	SendInflightsPruneRequest(context.Context, *InflightsPruneRequest) (*InflightsPruneResponse, error)
}

func RegisterFrontendAPIServer(s *grpc.Server, srv FrontendAPIServer) {
	s.RegisterService(&_FrontendAPI_serviceDesc, srv)
}

func _FrontendAPI_BackendReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BEReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).BackendReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/BackendReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).BackendReady(ctx, req.(*BEReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_SetClientAPIServerPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientAPIServerPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).SetClientAPIServerPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/SetClientAPIServerPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).SetClientAPIServerPort(ctx, req.(*SetClientAPIServerPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_GetThreadAndPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadAndPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).GetThreadAndPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/GetThreadAndPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).GetThreadAndPosts(ctx, req.(*ThreadAndPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_GetBoardAndThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardAndThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).GetBoardAndThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/GetBoardAndThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).GetBoardAndThreads(ctx, req.(*BoardAndThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_GetAllBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).GetAllBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/GetAllBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).GetAllBoards(ctx, req.(*AllBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_SetBoardSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).SetBoardSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/SetBoardSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).SetBoardSignal(ctx, req.(*BoardSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_GetUserAndGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).GetUserAndGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/GetUserAndGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).GetUserAndGraph(ctx, req.(*UserAndGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_SendContentEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentEventPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).SendContentEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/SendContentEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).SendContentEvent(ctx, req.(*ContentEventPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_SendSignalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalEventPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).SendSignalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/SendSignalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).SendSignalEvent(ctx, req.(*SignalEventPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_GetUncompiledEntityByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompiledEntityByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).GetUncompiledEntityByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/GetUncompiledEntityByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).GetUncompiledEntityByKey(ctx, req.(*UncompiledEntityByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendAPI_SendInflightsPruneRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InflightsPruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendAPIServer).SendInflightsPruneRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feapi.FrontendAPI/SendInflightsPruneRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendAPIServer).SendInflightsPruneRequest(ctx, req.(*InflightsPruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontendAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feapi.FrontendAPI",
	HandlerType: (*FrontendAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BackendReady",
			Handler:    _FrontendAPI_BackendReady_Handler,
		},
		{
			MethodName: "SetClientAPIServerPort",
			Handler:    _FrontendAPI_SetClientAPIServerPort_Handler,
		},
		{
			MethodName: "GetThreadAndPosts",
			Handler:    _FrontendAPI_GetThreadAndPosts_Handler,
		},
		{
			MethodName: "GetBoardAndThreads",
			Handler:    _FrontendAPI_GetBoardAndThreads_Handler,
		},
		{
			MethodName: "GetAllBoards",
			Handler:    _FrontendAPI_GetAllBoards_Handler,
		},
		{
			MethodName: "SetBoardSignal",
			Handler:    _FrontendAPI_SetBoardSignal_Handler,
		},
		{
			MethodName: "GetUserAndGraph",
			Handler:    _FrontendAPI_GetUserAndGraph_Handler,
		},
		{
			MethodName: "SendContentEvent",
			Handler:    _FrontendAPI_SendContentEvent_Handler,
		},
		{
			MethodName: "SendSignalEvent",
			Handler:    _FrontendAPI_SendSignalEvent_Handler,
		},
		{
			MethodName: "GetUncompiledEntityByKey",
			Handler:    _FrontendAPI_GetUncompiledEntityByKey_Handler,
		},
		{
			MethodName: "SendInflightsPruneRequest",
			Handler:    _FrontendAPI_SendInflightsPruneRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feapi/feapi.proto",
}

func init() { proto.RegisterFile("feapi/feapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xdd, 0x72, 0xe3, 0x48,
	0x15, 0x8e, 0x6c, 0xcb, 0x3f, 0xc7, 0x61, 0xa2, 0x74, 0x32, 0x1e, 0x8d, 0x77, 0x26, 0xa4, 0xc4,
	0x6e, 0x55, 0x2a, 0x0b, 0x19, 0x26, 0x33, 0x40, 0xc1, 0x52, 0x80, 0x22, 0x2b, 0xc6, 0xc4, 0x91,
	0xb4, 0x2d, 0x79, 0xa6, 0xb2, 0x37, 0x2e, 0x4d, 0xdc, 0xc9, 0x08, 0x6c, 0xc9, 0x2b, 0x29, 0xcb,
	0xfa, 0x15, 0x78, 0x0a, 0xae, 0xa9, 0x82, 0x3b, 0x2e, 0xa8, 0xe2, 0x2d, 0x78, 0x03, 0x9e, 0x80,
	0x37, 0x80, 0xea, 0x1f, 0xc9, 0xb2, 0xad, 0xec, 0xcc, 0xb0, 0x55, 0x7b, 0xe3, 0xea, 0x3e, 0xe7,
	0x3b, 0xbf, 0xdd, 0xe7, 0x1c, 0xb5, 0x61, 0xf7, 0x86, 0xf8, 0xf3, 0xe0, 0x19, 0xfb, 0x3d, 0x99,
	0xc7, 0x51, 0x1a, 0x21, 0x99, 0x6d, 0xba, 0x8f, 0x6f, 0x48, 0xf4, 0xe6, 0xf7, 0xe4, 0x3a, 0x4d,
	0x9e, 0xe5, 0x2b, 0x8e, 0xe8, 0x3e, 0x9e, 0x05, 0x33, 0x2a, 0x95, 0xa4, 0xf1, 0xdd, 0x75, 0xca,
	0x68, 0x82, 0xa5, 0xfd, 0x0a, 0x1e, 0x9c, 0x99, 0x98, 0xf8, 0x93, 0x05, 0x26, 0x5f, 0xde, 0x91,
	0x24, 0x45, 0x2a, 0x34, 0xfc, 0xc9, 0x24, 0x26, 0x49, 0xa2, 0x4a, 0x87, 0xd2, 0x51, 0x0b, 0x67,
	0x5b, 0x84, 0xa0, 0x36, 0x8f, 0xe2, 0x54, 0xad, 0x1c, 0x4a, 0x47, 0x32, 0x66, 0x6b, 0x6d, 0x17,
	0x76, 0x72, 0xf9, 0x64, 0x1e, 0x85, 0x09, 0xd1, 0x5e, 0xc0, 0x53, 0x97, 0xa4, 0xc6, 0x34, 0x20,
	0x61, 0xaa, 0x3b, 0x03, 0x97, 0xc4, 0x5f, 0x91, 0xd8, 0x89, 0xe2, 0x34, 0xb3, 0x80, 0xa0, 0x46,
	0xb7, 0x4c, 0xbd, 0x8c, 0xd9, 0x5a, 0x3b, 0x84, 0x83, 0xfb, 0x84, 0x84, 0x5a, 0x04, 0x8a, 0x3e,
	0x9d, 0x9e, 0x45, 0x7e, 0x3c, 0x49, 0x84, 0x26, 0xed, 0x73, 0xd8, 0x2d, 0xd0, 0x38, 0x10, 0xfd,
	0x12, 0x5a, 0x39, 0x51, 0x95, 0x0e, 0xab, 0x47, 0xed, 0xd3, 0x83, 0x93, 0x65, 0x4a, 0x8c, 0x68,
	0x36, 0x0f, 0xa6, 0x64, 0xc2, 0x00, 0x66, 0x98, 0x06, 0xe9, 0x02, 0x2f, 0x05, 0xb4, 0x2f, 0xe1,
	0xa1, 0xf7, 0x36, 0x26, 0xfe, 0x44, 0x0f, 0x27, 0x4e, 0x94, 0xa4, 0x99, 0x2d, 0x74, 0x0c, 0x0a,
	0x83, 0x9c, 0x07, 0xe1, 0x2d, 0x89, 0xe7, 0x71, 0x10, 0xa6, 0x22, 0x41, 0x1b, 0x74, 0xf4, 0x43,
	0xd8, 0xe5, 0x4a, 0x8a, 0xe0, 0x0a, 0x03, 0x6f, 0x32, 0xb4, 0x7f, 0x4a, 0xd0, 0x59, 0xb7, 0x29,
	0x62, 0x79, 0x09, 0x32, 0x53, 0xce, 0x2c, 0xbd, 0x3b, 0x0e, 0x0e, 0x46, 0x3f, 0x83, 0x3a, 0xd7,
	0xc7, 0x6c, 0xb6, 0x4f, 0xbf, 0x5f, 0x22, 0xc6, 0x01, 0x42, 0x4e, 0xc0, 0xd1, 0x0b, 0x90, 0x99,
	0x7d, 0xb5, 0xca, 0xd2, 0xf6, 0xb4, 0x44, 0x8e, 0xf2, 0x33, 0x6b, 0x0c, 0xab, 0xf5, 0xa0, 0xc3,
	0xcc, 0xea, 0xa1, 0x50, 0xfa, 0xff, 0xa4, 0x4c, 0xfb, 0x93, 0x04, 0x8f, 0x36, 0xd4, 0x7c, 0xab,
	0x2c, 0xfc, 0x1c, 0x1a, 0x42, 0x91, 0x5a, 0x61, 0xe1, 0xbc, 0x33, 0x0d, 0x19, 0x5e, 0xfb, 0x9b,
	0x04, 0x88, 0x29, 0x71, 0x83, 0xdb, 0xd0, 0x9f, 0x66, 0xf1, 0x1c, 0x42, 0x7b, 0x33, 0x94, 0x22,
	0x09, 0x1d, 0x00, 0xb8, 0x77, 0x6f, 0x92, 0xeb, 0x38, 0x78, 0x43, 0x78, 0xf6, 0x9b, 0xb8, 0x40,
	0x41, 0x1d, 0xa8, 0x5b, 0x51, 0x1a, 0xdc, 0x2c, 0xd4, 0x2a, 0xe3, 0x89, 0x1d, 0xea, 0x42, 0x73,
	0xe8, 0x27, 0xa9, 0x4b, 0x48, 0xa8, 0xd6, 0x0e, 0xa5, 0xa3, 0x2a, 0xce, 0xf7, 0x48, 0x83, 0xed,
	0x6c, 0x6d, 0x87, 0xd3, 0x85, 0x2a, 0x33, 0xc9, 0x15, 0x9a, 0xf6, 0x02, 0xf6, 0x56, 0xfc, 0x15,
	0x89, 0x7b, 0x02, 0x2d, 0x23, 0x9a, 0xcd, 0x82, 0x34, 0x25, 0x3c, 0x79, 0x4d, 0xbc, 0x24, 0x68,
	0xff, 0x95, 0x60, 0x6f, 0x94, 0x90, 0x58, 0x0f, 0x27, 0xfd, 0xd8, 0x9f, 0xbf, 0x7d, 0xff, 0x30,
	0x7f, 0xcc, 0x05, 0x45, 0xda, 0xb8, 0x58, 0x1e, 0x6f, 0x19, 0x2b, 0x93, 0x58, 0x29, 0x5f, 0x32,
	0x51, 0xeb, 0x4b, 0x89, 0x35, 0x16, 0x3a, 0x85, 0x7d, 0x4a, 0x5e, 0xbd, 0x52, 0x64, 0xc2, 0xd2,
	0xd3, 0xc4, 0xa5, 0x3c, 0x74, 0x02, 0x88, 0xd2, 0x8b, 0x75, 0x4b, 0x26, 0x22, 0x61, 0x25, 0x1c,
	0xed, 0x1f, 0x55, 0x6e, 0x64, 0x99, 0x01, 0x91, 0xb8, 0xe7, 0x50, 0xa3, 0x74, 0x71, 0xe1, 0xca,
	0xea, 0xa0, 0x10, 0x24, 0x83, 0xa2, 0x9f, 0x42, 0x5d, 0xf4, 0x9c, 0xca, 0x7b, 0xf5, 0x1c, 0x81,
	0x2e, 0x5e, 0xd3, 0xea, 0x87, 0x5d, 0xd3, 0x65, 0xb9, 0xd6, 0xde, 0xbf, 0x5c, 0xef, 0x3b, 0x3b,
	0xf9, 0xbb, 0x38, 0xbb, 0xc6, 0x07, 0x9f, 0x5d, 0xf3, 0xde, 0xb3, 0xfb, 0xab, 0x04, 0xb2, 0xf9,
	0x15, 0x09, 0x59, 0x9b, 0xb1, 0xff, 0x18, 0x92, 0xb8, 0xa4, 0xcd, 0xac, 0xd3, 0x29, 0xd6, 0x89,
	0x83, 0x28, 0xde, 0x6c, 0xcc, 0x1b, 0x74, 0x74, 0x02, 0x2d, 0x66, 0xc0, 0x5b, 0xcc, 0x09, 0xab,
	0xd7, 0x07, 0xa7, 0xca, 0x09, 0x9f, 0xbc, 0x39, 0x1d, 0x2f, 0x21, 0xb4, 0xda, 0xbc, 0x60, 0x46,
	0x92, 0xd4, 0x9f, 0xcd, 0x45, 0x15, 0x2f, 0x09, 0xac, 0xda, 0x8c, 0x28, 0x4c, 0x49, 0x98, 0x32,
	0x11, 0xc7, 0x5f, 0x4c, 0x23, 0x7f, 0x82, 0x34, 0x11, 0x86, 0xb8, 0x6b, 0xdb, 0x45, 0x0b, 0x58,
	0x44, 0xf8, 0x1c, 0x5a, 0x2c, 0xc5, 0x3d, 0x3f, 0xf5, 0x45, 0x4f, 0xdf, 0x3b, 0x59, 0x99, 0xe6,
	0x8c, 0x8d, 0x97, 0x28, 0xf4, 0x12, 0x80, 0xa7, 0x98, 0xc9, 0x54, 0x99, 0xcc, 0xfe, 0xaa, 0x0c,
	0xe7, 0xe3, 0x02, 0x0e, 0x9d, 0x40, 0x93, 0xa6, 0x99, 0xc9, 0xd4, 0x98, 0x0c, 0x5a, 0x95, 0xa1,
	0x5c, 0x9c, 0x63, 0xd0, 0xa7, 0xd0, 0xb8, 0x20, 0x0b, 0x06, 0x97, 0x19, 0x7c, 0x77, 0x15, 0x7e,
	0x41, 0x16, 0x38, 0x43, 0x68, 0x1d, 0xd8, 0x2f, 0x26, 0x20, 0x9f, 0xec, 0xff, 0xae, 0x02, 0xe2,
	0x8d, 0xeb, 0x83, 0x13, 0x63, 0x80, 0xc2, 0x25, 0x3d, 0x3f, 0xbe, 0x25, 0xfc, 0xa4, 0x2a, 0xec,
	0xa4, 0x1e, 0x09, 0xf8, 0x3a, 0x1b, 0x6f, 0x08, 0xd0, 0x7e, 0xc7, 0x77, 0x7c, 0xc8, 0x54, 0x79,
	0xbf, 0x2b, 0x90, 0x68, 0x0b, 0x16, 0x78, 0x3e, 0x56, 0x6b, 0x0c, 0xb2, 0x42, 0x5b, 0x62, 0x7a,
	0xd1, 0xcc, 0x0f, 0x42, 0x96, 0x8f, 0x1c, 0xc3, 0x69, 0x4b, 0x8c, 0xf9, 0xf5, 0x3c, 0x88, 0x17,
	0xac, 0x84, 0xaa, 0x78, 0x85, 0x46, 0xbf, 0x8e, 0x2e, 0x49, 0xea, 0xb3, 0x5a, 0x69, 0x61, 0xb6,
	0x66, 0xdf, 0x13, 0x0c, 0x53, 0xbc, 0xb6, 0x4d, 0xf1, 0x3d, 0xb1, 0xce, 0x40, 0xbf, 0x81, 0x1d,
	0x11, 0xe3, 0x62, 0x4e, 0x8c, 0xa9, 0x9f, 0x24, 0x6a, 0x8b, 0xe5, 0xa4, 0xb3, 0x9a, 0x93, 0x8c,
	0x8b, 0xd7, 0xe1, 0xe8, 0x39, 0xc0, 0x92, 0xa4, 0x02, 0x13, 0xde, 0xdd, 0x10, 0xc6, 0x05, 0x10,
	0x9b, 0x7c, 0x7c, 0x47, 0xbe, 0x4e, 0xd5, 0x36, 0xf3, 0xad, 0x40, 0xd1, 0x1e, 0xc2, 0x5e, 0xe1,
	0x8c, 0xf3, 0xb3, 0xff, 0xbb, 0x04, 0x4f, 0x46, 0xe1, 0xb5, 0xe8, 0x56, 0xbc, 0xf3, 0x9c, 0x2d,
	0xe8, 0xb5, 0x11, 0xc3, 0xe8, 0x33, 0x00, 0x4e, 0x65, 0xae, 0x48, 0xcc, 0x95, 0x8f, 0x84, 0x2b,
	0xeb, 0x82, 0xdc, 0xa9, 0xe5, 0x1a, 0xed, 0x83, 0x3c, 0x0c, 0x66, 0x41, 0xf6, 0xc9, 0xca, 0x37,
	0x74, 0x08, 0xdb, 0x37, 0x37, 0x09, 0x49, 0xd9, 0x51, 0xcb, 0x58, 0xec, 0x4a, 0xfb, 0x48, 0xad,
	0xbc, 0x8f, 0x68, 0xff, 0xa9, 0xc0, 0xd3, 0x7b, 0xfc, 0x16, 0x23, 0xe4, 0x5b, 0x39, 0xfe, 0xe9,
	0xda, 0x30, 0x29, 0xad, 0xf6, 0x6c, 0x82, 0x9c, 0xac, 0x4f, 0x90, 0xf2, 0x3a, 0xcf, 0xc7, 0xc6,
	0xd1, 0xea, 0xd8, 0x28, 0xab, 0x70, 0x31, 0x2b, 0x8e, 0x40, 0x7e, 0x15, 0xa5, 0x24, 0x51, 0xe5,
	0x32, 0x24, 0x65, 0x61, 0x0e, 0x40, 0x9f, 0x40, 0xed, 0x82, 0x2c, 0x12, 0xb5, 0xce, 0x80, 0x25,
	0x5d, 0x80, 0xb1, 0xd1, 0x2f, 0xa0, 0xed, 0xc5, 0x77, 0x49, 0x9a, 0xa4, 0x3e, 0x55, 0xdb, 0x60,
	0x68, 0x75, 0xcd, 0xdd, 0x1c, 0x80, 0x8b, 0x60, 0xed, 0x11, 0x3c, 0x1c, 0x84, 0x37, 0xd3, 0xe0,
	0xf6, 0x6d, 0x9a, 0x38, 0xf1, 0x5d, 0x48, 0xb2, 0x57, 0x80, 0x0a, 0x9d, 0x75, 0x06, 0x3f, 0x83,
	0xe3, 0xcf, 0x0a, 0x1d, 0x1c, 0x75, 0x00, 0x8d, 0xac, 0x0b, 0xcb, 0x7e, 0x6d, 0x8d, 0xcd, 0x57,
	0xa6, 0xe5, 0x8d, 0xbd, 0x2b, 0xc7, 0x54, 0xb6, 0x10, 0x40, 0xdd, 0xc0, 0xa6, 0xee, 0x99, 0x8a,
	0x44, 0xd7, 0x23, 0xa7, 0x47, 0xd7, 0x95, 0xe3, 0xc1, 0x66, 0x6f, 0x41, 0x07, 0xd0, 0xcd, 0x74,
	0xb8, 0x83, 0xbe, 0xa5, 0x0f, 0xc7, 0x9e, 0x8e, 0xfb, 0x66, 0xae, 0xab, 0x0d, 0x0d, 0xc3, 0xb6,
	0x3c, 0xd3, 0xf2, 0x14, 0x09, 0x35, 0xa1, 0x36, 0x72, 0x4d, 0xac, 0x54, 0x8e, 0xff, 0x22, 0x6d,
	0x94, 0x24, 0x7a, 0x02, 0xea, 0xba, 0xaa, 0x2b, 0xc7, 0x34, 0x86, 0xba, 0xeb, 0x2a, 0x5b, 0xd4,
	0x59, 0xbd, 0xd7, 0x73, 0xc7, 0x9e, 0x3d, 0xee, 0x0d, 0x5c, 0x63, 0xe4, 0xba, 0x03, 0xdb, 0x52,
	0x24, 0x4a, 0x3f, 0xb7, 0x87, 0x43, 0xfb, 0xb5, 0x3b, 0xee, 0x8f, 0x06, 0x3d, 0x73, 0x38, 0xb0,
	0x4c, 0x57, 0xa9, 0xa0, 0x1d, 0x68, 0x5f, 0xda, 0xbd, 0xb1, 0x6e, 0x78, 0x03, 0xdb, 0x72, 0x95,
	0x2a, 0x52, 0x60, 0xdb, 0x19, 0x9d, 0x0d, 0x07, 0xc6, 0xd8, 0xc3, 0x23, 0xd7, 0x53, 0x6a, 0x34,
	0x36, 0x4b, 0xbf, 0x1c, 0x58, 0x7d, 0x45, 0xa6, 0xae, 0x9d, 0xbf, 0xfc, 0xc9, 0x73, 0xa5, 0x5e,
	0xc0, 0x99, 0x43, 0xd3, 0xf0, 0x94, 0xc6, 0xf1, 0xbf, 0xa4, 0x62, 0xf5, 0xa3, 0x47, 0xb0, 0x57,
	0xe2, 0x27, 0xcf, 0xdb, 0xc8, 0x79, 0x65, 0xb3, 0xbc, 0x6d, 0x43, 0xb3, 0x67, 0xbf, 0xb6, 0xd8,
	0xae, 0x82, 0x76, 0xe1, 0x7b, 0xd8, 0x74, 0x6c, 0xec, 0x51, 0xf7, 0x2f, 0xed, 0x9e, 0x52, 0xa5,
	0x80, 0x4b, 0xbb, 0x77, 0x36, 0xb4, 0x8d, 0x0b, 0xa5, 0x86, 0x1e, 0x00, 0x5c, 0xda, 0x3d, 0xdd,
	0x71, 0xb0, 0xfd, 0xca, 0x54, 0x64, 0xaa, 0x8a, 0x47, 0xa5, 0xd4, 0x51, 0x0b, 0x64, 0x0e, 0x6b,
	0xd0, 0xa0, 0x2c, 0xfd, 0xd2, 0x1c, 0xeb, 0x2e, 0xb5, 0xac, 0x34, 0xa9, 0x62, 0xc3, 0xb4, 0x5c,
	0x1b, 0x67, 0xa4, 0x16, 0x85, 0x73, 0xc7, 0x81, 0x6a, 0xed, 0x0d, 0xdc, 0xcf, 0x47, 0xfa, 0x70,
	0x70, 0x7e, 0xa5, 0xb4, 0xe9, 0x61, 0x60, 0xd3, 0xc3, 0xba, 0xe1, 0x29, 0xdb, 0xc7, 0x09, 0xec,
	0x97, 0x55, 0x5d, 0x31, 0x3c, 0xd3, 0xf2, 0x06, 0xde, 0x55, 0x16, 0x1e, 0xf5, 0xc3, 0xd6, 0x71,
	0x8f, 0xdf, 0x0a, 0xef, 0xb7, 0xd8, 0xd4, 0x7b, 0x4a, 0x85, 0x66, 0xce, 0xb1, 0x5d, 0x4f, 0xa9,
	0xd2, 0x15, 0x8b, 0xb7, 0x86, 0x1a, 0x50, 0xbd, 0x30, 0xaf, 0x14, 0x99, 0x7a, 0xc0, 0xb2, 0xed,
	0x7a, 0xf4, 0x0a, 0xd5, 0x4f, 0xff, 0xdc, 0x80, 0xf6, 0x79, 0xcc, 0x66, 0xde, 0x44, 0x77, 0x06,
	0xe8, 0xd7, 0xb0, 0x7d, 0xe6, 0x5f, 0xff, 0x81, 0x84, 0x13, 0xf6, 0x64, 0x46, 0x0f, 0x45, 0x3f,
	0x58, 0x7d, 0x82, 0x77, 0x3b, 0xeb, 0x64, 0xd1, 0x2c, 0xb7, 0xd0, 0x2d, 0x74, 0xca, 0x9f, 0xc9,
	0xe8, 0xe3, 0xac, 0x3d, 0x7f, 0xd3, 0xd3, 0xbb, 0xfb, 0xc9, 0x3b, 0x50, 0xb9, 0x21, 0x0c, 0xbb,
	0xfd, 0x6c, 0xb4, 0x65, 0xaf, 0x52, 0xf4, 0x44, 0x48, 0x97, 0x3e, 0x90, 0xbb, 0x4f, 0xef, 0xe1,
	0xe6, 0x3a, 0x47, 0x80, 0xfa, 0x62, 0xa2, 0x2e, 0x1f, 0x79, 0x28, 0x13, 0x2b, 0x7f, 0x43, 0x76,
	0x0f, 0xee, 0x63, 0xe7, 0x6a, 0x0d, 0xd8, 0xee, 0x93, 0x34, 0x7f, 0xc1, 0xa3, 0x6c, 0xf2, 0xaf,
	0xff, 0x5b, 0xd0, 0x55, 0x37, 0x19, 0xb9, 0x92, 0x01, 0x3c, 0x70, 0x85, 0x6f, 0xfc, 0xee, 0xa3,
	0xc7, 0x45, 0xc3, 0x2b, 0xef, 0xc0, 0x6e, 0xb7, 0x8c, 0x95, 0xab, 0x1a, 0xc2, 0x4e, 0x9f, 0xa4,
	0xc5, 0x67, 0x05, 0xca, 0x04, 0x4a, 0x5e, 0x5b, 0xdd, 0x8f, 0x4a, 0x79, 0xb9, 0xb6, 0x4b, 0x50,
	0x5c, 0x12, 0x4e, 0x8a, 0x1f, 0x4e, 0xb9, 0xba, 0x92, 0xcf, 0xc9, 0x5c, 0x5d, 0xe9, 0x97, 0xd6,
	0x16, 0xfa, 0x1d, 0xec, 0x50, 0x75, 0x85, 0x51, 0x9c, 0x07, 0xba, 0xf9, 0x09, 0x96, 0x07, 0x5a,
	0x36, 0xb9, 0xe9, 0x65, 0x54, 0x69, 0xa0, 0x65, 0x53, 0x10, 0xfd, 0xe0, 0x9e, 0x49, 0x57, 0x9c,
	0xed, 0xdd, 0x8f, 0xbf, 0x19, 0x94, 0x1b, 0xfa, 0x02, 0x1e, 0x53, 0xa7, 0x4b, 0xbb, 0x7f, 0x7e,
	0x29, 0x4b, 0xb9, 0xf9, 0xa5, 0x2c, 0x1f, 0x10, 0xda, 0xd6, 0x59, 0xf7, 0x0b, 0xd5, 0x27, 0xe9,
	0x5b, 0x12, 0xff, 0xe8, 0x3a, 0x8a, 0xc9, 0x33, 0x3e, 0x83, 0xf8, 0xff, 0x6b, 0x6f, 0xea, 0x6c,
	0xf7, 0xe2, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x9d, 0xf3, 0x18, 0x75, 0x13, 0x00, 0x00,
}
