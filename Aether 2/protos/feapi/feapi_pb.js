/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var feobjects_feobjects_pb = require('../feobjects/feobjects_pb.js');
var mimapi_structprotos_pb = require('../mimapi/structprotos_pb.js');
goog.exportSymbol('proto.feapi.AllBoardsRequest', null, global);
goog.exportSymbol('proto.feapi.AllBoardsResponse', null, global);
goog.exportSymbol('proto.feapi.BEReadyRequest', null, global);
goog.exportSymbol('proto.feapi.BEReadyResponse', null, global);
goog.exportSymbol('proto.feapi.BoardAndThreadsRequest', null, global);
goog.exportSymbol('proto.feapi.BoardAndThreadsResponse', null, global);
goog.exportSymbol('proto.feapi.BoardSignalRequest', null, global);
goog.exportSymbol('proto.feapi.BoardSignalResponse', null, global);
goog.exportSymbol('proto.feapi.ContentEventPayload', null, global);
goog.exportSymbol('proto.feapi.ContentEventResponse', null, global);
goog.exportSymbol('proto.feapi.Event', null, global);
goog.exportSymbol('proto.feapi.EventType', null, global);
goog.exportSymbol('proto.feapi.InflightsPruneRequest', null, global);
goog.exportSymbol('proto.feapi.InflightsPruneResponse', null, global);
goog.exportSymbol('proto.feapi.SetClientAPIServerPortRequest', null, global);
goog.exportSymbol('proto.feapi.SetClientAPIServerPortResponse', null, global);
goog.exportSymbol('proto.feapi.SignalEventPayload', null, global);
goog.exportSymbol('proto.feapi.SignalEventResponse', null, global);
goog.exportSymbol('proto.feapi.SignalTargetType', null, global);
goog.exportSymbol('proto.feapi.SignalType', null, global);
goog.exportSymbol('proto.feapi.SignalTypeClass', null, global);
goog.exportSymbol('proto.feapi.ThreadAndPostsRequest', null, global);
goog.exportSymbol('proto.feapi.ThreadAndPostsResponse', null, global);
goog.exportSymbol('proto.feapi.UncompiledEntityByKeyRequest', null, global);
goog.exportSymbol('proto.feapi.UncompiledEntityByKeyResponse', null, global);
goog.exportSymbol('proto.feapi.UncompiledEntityType', null, global);
goog.exportSymbol('proto.feapi.UserAndGraphRequest', null, global);
goog.exportSymbol('proto.feapi.UserAndGraphResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.BEReadyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.BEReadyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.BEReadyRequest.displayName = 'proto.feapi.BEReadyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.BEReadyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.BEReadyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.BEReadyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BEReadyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.BEReadyRequest}
 */
proto.feapi.BEReadyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.BEReadyRequest;
  return proto.feapi.BEReadyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.BEReadyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.BEReadyRequest}
 */
proto.feapi.BEReadyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.BEReadyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.BEReadyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.BEReadyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BEReadyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.feapi.BEReadyRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.feapi.BEReadyRequest.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.feapi.BEReadyRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.feapi.BEReadyRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.BEReadyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.BEReadyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.BEReadyResponse.displayName = 'proto.feapi.BEReadyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.BEReadyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.BEReadyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.BEReadyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BEReadyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.BEReadyResponse}
 */
proto.feapi.BEReadyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.BEReadyResponse;
  return proto.feapi.BEReadyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.BEReadyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.BEReadyResponse}
 */
proto.feapi.BEReadyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.BEReadyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.BEReadyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.BEReadyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BEReadyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.SetClientAPIServerPortRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.SetClientAPIServerPortRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.SetClientAPIServerPortRequest.displayName = 'proto.feapi.SetClientAPIServerPortRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.SetClientAPIServerPortRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.SetClientAPIServerPortRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.SetClientAPIServerPortRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.SetClientAPIServerPortRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.SetClientAPIServerPortRequest}
 */
proto.feapi.SetClientAPIServerPortRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.SetClientAPIServerPortRequest;
  return proto.feapi.SetClientAPIServerPortRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.SetClientAPIServerPortRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.SetClientAPIServerPortRequest}
 */
proto.feapi.SetClientAPIServerPortRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.SetClientAPIServerPortRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.SetClientAPIServerPortRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.SetClientAPIServerPortRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.SetClientAPIServerPortRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 Port = 1;
 * @return {number}
 */
proto.feapi.SetClientAPIServerPortRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.feapi.SetClientAPIServerPortRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.SetClientAPIServerPortResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.SetClientAPIServerPortResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.SetClientAPIServerPortResponse.displayName = 'proto.feapi.SetClientAPIServerPortResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.SetClientAPIServerPortResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.SetClientAPIServerPortResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.SetClientAPIServerPortResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.SetClientAPIServerPortResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.SetClientAPIServerPortResponse}
 */
proto.feapi.SetClientAPIServerPortResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.SetClientAPIServerPortResponse;
  return proto.feapi.SetClientAPIServerPortResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.SetClientAPIServerPortResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.SetClientAPIServerPortResponse}
 */
proto.feapi.SetClientAPIServerPortResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.SetClientAPIServerPortResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.SetClientAPIServerPortResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.SetClientAPIServerPortResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.SetClientAPIServerPortResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.AllBoardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.AllBoardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.AllBoardsRequest.displayName = 'proto.feapi.AllBoardsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.AllBoardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.AllBoardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.AllBoardsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.AllBoardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.AllBoardsRequest}
 */
proto.feapi.AllBoardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.AllBoardsRequest;
  return proto.feapi.AllBoardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.AllBoardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.AllBoardsRequest}
 */
proto.feapi.AllBoardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.AllBoardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.AllBoardsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.AllBoardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.AllBoardsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.AllBoardsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feapi.AllBoardsResponse.repeatedFields_, null);
};
goog.inherits(proto.feapi.AllBoardsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.AllBoardsResponse.displayName = 'proto.feapi.AllBoardsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feapi.AllBoardsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.AllBoardsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.AllBoardsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.AllBoardsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.AllBoardsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    allboardsList: jspb.Message.toObjectList(msg.getAllboardsList(),
    feobjects_feobjects_pb.CompiledBoardEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.AllBoardsResponse}
 */
proto.feapi.AllBoardsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.AllBoardsResponse;
  return proto.feapi.AllBoardsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.AllBoardsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.AllBoardsResponse}
 */
proto.feapi.AllBoardsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.CompiledBoardEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledBoardEntity.deserializeBinaryFromReader);
      msg.addAllboards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.AllBoardsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.AllBoardsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.AllBoardsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.AllBoardsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllboardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      feobjects_feobjects_pb.CompiledBoardEntity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feobjects.CompiledBoardEntity AllBoards = 1;
 * @return {!Array.<!proto.feobjects.CompiledBoardEntity>}
 */
proto.feapi.AllBoardsResponse.prototype.getAllboardsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledBoardEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledBoardEntity, 1));
};


/** @param {!Array.<!proto.feobjects.CompiledBoardEntity>} value */
proto.feapi.AllBoardsResponse.prototype.setAllboardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feobjects.CompiledBoardEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledBoardEntity}
 */
proto.feapi.AllBoardsResponse.prototype.addAllboards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feobjects.CompiledBoardEntity, opt_index);
};


proto.feapi.AllBoardsResponse.prototype.clearAllboardsList = function() {
  this.setAllboardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.ThreadAndPostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.ThreadAndPostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.ThreadAndPostsRequest.displayName = 'proto.feapi.ThreadAndPostsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.ThreadAndPostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.ThreadAndPostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.ThreadAndPostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.ThreadAndPostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    boardfingerprint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    threadfingerprint: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.ThreadAndPostsRequest}
 */
proto.feapi.ThreadAndPostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.ThreadAndPostsRequest;
  return proto.feapi.ThreadAndPostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.ThreadAndPostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.ThreadAndPostsRequest}
 */
proto.feapi.ThreadAndPostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardfingerprint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadfingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.ThreadAndPostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.ThreadAndPostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.ThreadAndPostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.ThreadAndPostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardfingerprint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getThreadfingerprint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string BoardFingerprint = 1;
 * @return {string}
 */
proto.feapi.ThreadAndPostsRequest.prototype.getBoardfingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.feapi.ThreadAndPostsRequest.prototype.setBoardfingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ThreadFingerprint = 2;
 * @return {string}
 */
proto.feapi.ThreadAndPostsRequest.prototype.getThreadfingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.feapi.ThreadAndPostsRequest.prototype.setThreadfingerprint = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.ThreadAndPostsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feapi.ThreadAndPostsResponse.repeatedFields_, null);
};
goog.inherits(proto.feapi.ThreadAndPostsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.ThreadAndPostsResponse.displayName = 'proto.feapi.ThreadAndPostsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feapi.ThreadAndPostsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.ThreadAndPostsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.ThreadAndPostsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.ThreadAndPostsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.ThreadAndPostsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    board: (f = msg.getBoard()) && feobjects_feobjects_pb.CompiledBoardEntity.toObject(includeInstance, f),
    thread: (f = msg.getThread()) && feobjects_feobjects_pb.CompiledThreadEntity.toObject(includeInstance, f),
    postsList: jspb.Message.toObjectList(msg.getPostsList(),
    feobjects_feobjects_pb.CompiledPostEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.ThreadAndPostsResponse}
 */
proto.feapi.ThreadAndPostsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.ThreadAndPostsResponse;
  return proto.feapi.ThreadAndPostsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.ThreadAndPostsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.ThreadAndPostsResponse}
 */
proto.feapi.ThreadAndPostsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.CompiledBoardEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledBoardEntity.deserializeBinaryFromReader);
      msg.setBoard(value);
      break;
    case 2:
      var value = new feobjects_feobjects_pb.CompiledThreadEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledThreadEntity.deserializeBinaryFromReader);
      msg.setThread(value);
      break;
    case 3:
      var value = new feobjects_feobjects_pb.CompiledPostEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledPostEntity.deserializeBinaryFromReader);
      msg.addPosts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.ThreadAndPostsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.ThreadAndPostsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.ThreadAndPostsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.ThreadAndPostsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      feobjects_feobjects_pb.CompiledBoardEntity.serializeBinaryToWriter
    );
  }
  f = message.getThread();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      feobjects_feobjects_pb.CompiledThreadEntity.serializeBinaryToWriter
    );
  }
  f = message.getPostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      feobjects_feobjects_pb.CompiledPostEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional feobjects.CompiledBoardEntity Board = 1;
 * @return {?proto.feobjects.CompiledBoardEntity}
 */
proto.feapi.ThreadAndPostsResponse.prototype.getBoard = function() {
  return /** @type{?proto.feobjects.CompiledBoardEntity} */ (
    jspb.Message.getWrapperField(this, feobjects_feobjects_pb.CompiledBoardEntity, 1));
};


/** @param {?proto.feobjects.CompiledBoardEntity|undefined} value */
proto.feapi.ThreadAndPostsResponse.prototype.setBoard = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.feapi.ThreadAndPostsResponse.prototype.clearBoard = function() {
  this.setBoard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.ThreadAndPostsResponse.prototype.hasBoard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional feobjects.CompiledThreadEntity Thread = 2;
 * @return {?proto.feobjects.CompiledThreadEntity}
 */
proto.feapi.ThreadAndPostsResponse.prototype.getThread = function() {
  return /** @type{?proto.feobjects.CompiledThreadEntity} */ (
    jspb.Message.getWrapperField(this, feobjects_feobjects_pb.CompiledThreadEntity, 2));
};


/** @param {?proto.feobjects.CompiledThreadEntity|undefined} value */
proto.feapi.ThreadAndPostsResponse.prototype.setThread = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.feapi.ThreadAndPostsResponse.prototype.clearThread = function() {
  this.setThread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.ThreadAndPostsResponse.prototype.hasThread = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated feobjects.CompiledPostEntity Posts = 3;
 * @return {!Array.<!proto.feobjects.CompiledPostEntity>}
 */
proto.feapi.ThreadAndPostsResponse.prototype.getPostsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledPostEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledPostEntity, 3));
};


/** @param {!Array.<!proto.feobjects.CompiledPostEntity>} value */
proto.feapi.ThreadAndPostsResponse.prototype.setPostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feobjects.CompiledPostEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledPostEntity}
 */
proto.feapi.ThreadAndPostsResponse.prototype.addPosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feobjects.CompiledPostEntity, opt_index);
};


proto.feapi.ThreadAndPostsResponse.prototype.clearPostsList = function() {
  this.setPostsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.BoardAndThreadsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.BoardAndThreadsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.BoardAndThreadsRequest.displayName = 'proto.feapi.BoardAndThreadsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.BoardAndThreadsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.BoardAndThreadsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.BoardAndThreadsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BoardAndThreadsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    boardfingerprint: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.BoardAndThreadsRequest}
 */
proto.feapi.BoardAndThreadsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.BoardAndThreadsRequest;
  return proto.feapi.BoardAndThreadsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.BoardAndThreadsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.BoardAndThreadsRequest}
 */
proto.feapi.BoardAndThreadsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardfingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.BoardAndThreadsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.BoardAndThreadsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.BoardAndThreadsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BoardAndThreadsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardfingerprint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string BoardFingerprint = 1;
 * @return {string}
 */
proto.feapi.BoardAndThreadsRequest.prototype.getBoardfingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.feapi.BoardAndThreadsRequest.prototype.setBoardfingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.BoardAndThreadsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feapi.BoardAndThreadsResponse.repeatedFields_, null);
};
goog.inherits(proto.feapi.BoardAndThreadsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.BoardAndThreadsResponse.displayName = 'proto.feapi.BoardAndThreadsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feapi.BoardAndThreadsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.BoardAndThreadsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.BoardAndThreadsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.BoardAndThreadsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BoardAndThreadsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    board: (f = msg.getBoard()) && feobjects_feobjects_pb.CompiledBoardEntity.toObject(includeInstance, f),
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    feobjects_feobjects_pb.CompiledThreadEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.BoardAndThreadsResponse}
 */
proto.feapi.BoardAndThreadsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.BoardAndThreadsResponse;
  return proto.feapi.BoardAndThreadsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.BoardAndThreadsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.BoardAndThreadsResponse}
 */
proto.feapi.BoardAndThreadsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.CompiledBoardEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledBoardEntity.deserializeBinaryFromReader);
      msg.setBoard(value);
      break;
    case 2:
      var value = new feobjects_feobjects_pb.CompiledThreadEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledThreadEntity.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.BoardAndThreadsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.BoardAndThreadsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.BoardAndThreadsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BoardAndThreadsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      feobjects_feobjects_pb.CompiledBoardEntity.serializeBinaryToWriter
    );
  }
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      feobjects_feobjects_pb.CompiledThreadEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional feobjects.CompiledBoardEntity Board = 1;
 * @return {?proto.feobjects.CompiledBoardEntity}
 */
proto.feapi.BoardAndThreadsResponse.prototype.getBoard = function() {
  return /** @type{?proto.feobjects.CompiledBoardEntity} */ (
    jspb.Message.getWrapperField(this, feobjects_feobjects_pb.CompiledBoardEntity, 1));
};


/** @param {?proto.feobjects.CompiledBoardEntity|undefined} value */
proto.feapi.BoardAndThreadsResponse.prototype.setBoard = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.feapi.BoardAndThreadsResponse.prototype.clearBoard = function() {
  this.setBoard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.BoardAndThreadsResponse.prototype.hasBoard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated feobjects.CompiledThreadEntity Threads = 2;
 * @return {!Array.<!proto.feobjects.CompiledThreadEntity>}
 */
proto.feapi.BoardAndThreadsResponse.prototype.getThreadsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledThreadEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledThreadEntity, 2));
};


/** @param {!Array.<!proto.feobjects.CompiledThreadEntity>} value */
proto.feapi.BoardAndThreadsResponse.prototype.setThreadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feobjects.CompiledThreadEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledThreadEntity}
 */
proto.feapi.BoardAndThreadsResponse.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feobjects.CompiledThreadEntity, opt_index);
};


proto.feapi.BoardAndThreadsResponse.prototype.clearThreadsList = function() {
  this.setThreadsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.BoardSignalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.BoardSignalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.BoardSignalRequest.displayName = 'proto.feapi.BoardSignalRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.BoardSignalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.BoardSignalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.BoardSignalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BoardSignalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subscribed: jspb.Message.getFieldWithDefault(msg, 2, false),
    notify: jspb.Message.getFieldWithDefault(msg, 3, false),
    lastseen: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastseenonly: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.BoardSignalRequest}
 */
proto.feapi.BoardSignalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.BoardSignalRequest;
  return proto.feapi.BoardSignalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.BoardSignalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.BoardSignalRequest}
 */
proto.feapi.BoardSignalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribed(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotify(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastseen(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLastseenonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.BoardSignalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.BoardSignalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.BoardSignalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BoardSignalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubscribed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getNotify();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLastseen();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLastseenonly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string Fingerprint = 1;
 * @return {string}
 */
proto.feapi.BoardSignalRequest.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.feapi.BoardSignalRequest.prototype.setFingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool Subscribed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.BoardSignalRequest.prototype.getSubscribed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.feapi.BoardSignalRequest.prototype.setSubscribed = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool Notify = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.BoardSignalRequest.prototype.getNotify = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.feapi.BoardSignalRequest.prototype.setNotify = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 LastSeen = 4;
 * @return {number}
 */
proto.feapi.BoardSignalRequest.prototype.getLastseen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.feapi.BoardSignalRequest.prototype.setLastseen = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool LastSeenOnly = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.BoardSignalRequest.prototype.getLastseenonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.feapi.BoardSignalRequest.prototype.setLastseenonly = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.BoardSignalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.BoardSignalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.BoardSignalResponse.displayName = 'proto.feapi.BoardSignalResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.BoardSignalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.BoardSignalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.BoardSignalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BoardSignalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    committed: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.BoardSignalResponse}
 */
proto.feapi.BoardSignalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.BoardSignalResponse;
  return proto.feapi.BoardSignalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.BoardSignalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.BoardSignalResponse}
 */
proto.feapi.BoardSignalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommitted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.BoardSignalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.BoardSignalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.BoardSignalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.BoardSignalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool Committed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.BoardSignalResponse.prototype.getCommitted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.feapi.BoardSignalResponse.prototype.setCommitted = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.UserAndGraphRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.UserAndGraphRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.UserAndGraphRequest.displayName = 'proto.feapi.UserAndGraphRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.UserAndGraphRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.UserAndGraphRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.UserAndGraphRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.UserAndGraphRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userentityrequested: jspb.Message.getFieldWithDefault(msg, 2, false),
    userboardsrequested: jspb.Message.getFieldWithDefault(msg, 6, false),
    userthreadsrequested: jspb.Message.getFieldWithDefault(msg, 4, false),
    userpostsrequested: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.UserAndGraphRequest}
 */
proto.feapi.UserAndGraphRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.UserAndGraphRequest;
  return proto.feapi.UserAndGraphRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.UserAndGraphRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.UserAndGraphRequest}
 */
proto.feapi.UserAndGraphRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserentityrequested(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserboardsrequested(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserthreadsrequested(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserpostsrequested(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.UserAndGraphRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.UserAndGraphRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.UserAndGraphRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.UserAndGraphRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserentityrequested();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUserboardsrequested();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getUserthreadsrequested();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getUserpostsrequested();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string Fingerprint = 1;
 * @return {string}
 */
proto.feapi.UserAndGraphRequest.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.feapi.UserAndGraphRequest.prototype.setFingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool UserEntityRequested = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.UserAndGraphRequest.prototype.getUserentityrequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.feapi.UserAndGraphRequest.prototype.setUserentityrequested = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool UserBoardsRequested = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.UserAndGraphRequest.prototype.getUserboardsrequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.feapi.UserAndGraphRequest.prototype.setUserboardsrequested = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool UserThreadsRequested = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.UserAndGraphRequest.prototype.getUserthreadsrequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.feapi.UserAndGraphRequest.prototype.setUserthreadsrequested = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool UserPostsRequested = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.UserAndGraphRequest.prototype.getUserpostsrequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.feapi.UserAndGraphRequest.prototype.setUserpostsrequested = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.UserAndGraphResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feapi.UserAndGraphResponse.repeatedFields_, null);
};
goog.inherits(proto.feapi.UserAndGraphResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.UserAndGraphResponse.displayName = 'proto.feapi.UserAndGraphResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feapi.UserAndGraphResponse.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.UserAndGraphResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.UserAndGraphResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.UserAndGraphResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.UserAndGraphResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && feobjects_feobjects_pb.CompiledUserEntity.toObject(includeInstance, f),
    boardsList: jspb.Message.toObjectList(msg.getBoardsList(),
    feobjects_feobjects_pb.CompiledBoardEntity.toObject, includeInstance),
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    feobjects_feobjects_pb.CompiledThreadEntity.toObject, includeInstance),
    postsList: jspb.Message.toObjectList(msg.getPostsList(),
    feobjects_feobjects_pb.CompiledPostEntity.toObject, includeInstance),
    userentityrequested: jspb.Message.getFieldWithDefault(msg, 5, false),
    userboardsrequested: jspb.Message.getFieldWithDefault(msg, 6, false),
    userthreadsrequested: jspb.Message.getFieldWithDefault(msg, 7, false),
    userpostsrequested: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.UserAndGraphResponse}
 */
proto.feapi.UserAndGraphResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.UserAndGraphResponse;
  return proto.feapi.UserAndGraphResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.UserAndGraphResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.UserAndGraphResponse}
 */
proto.feapi.UserAndGraphResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.CompiledUserEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledUserEntity.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new feobjects_feobjects_pb.CompiledBoardEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledBoardEntity.deserializeBinaryFromReader);
      msg.addBoards(value);
      break;
    case 3:
      var value = new feobjects_feobjects_pb.CompiledThreadEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledThreadEntity.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    case 4:
      var value = new feobjects_feobjects_pb.CompiledPostEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledPostEntity.deserializeBinaryFromReader);
      msg.addPosts(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserentityrequested(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserboardsrequested(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserthreadsrequested(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserpostsrequested(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.UserAndGraphResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.UserAndGraphResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.UserAndGraphResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.UserAndGraphResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      feobjects_feobjects_pb.CompiledUserEntity.serializeBinaryToWriter
    );
  }
  f = message.getBoardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      feobjects_feobjects_pb.CompiledBoardEntity.serializeBinaryToWriter
    );
  }
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      feobjects_feobjects_pb.CompiledThreadEntity.serializeBinaryToWriter
    );
  }
  f = message.getPostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      feobjects_feobjects_pb.CompiledPostEntity.serializeBinaryToWriter
    );
  }
  f = message.getUserentityrequested();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUserboardsrequested();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getUserthreadsrequested();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getUserpostsrequested();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional feobjects.CompiledUserEntity User = 1;
 * @return {?proto.feobjects.CompiledUserEntity}
 */
proto.feapi.UserAndGraphResponse.prototype.getUser = function() {
  return /** @type{?proto.feobjects.CompiledUserEntity} */ (
    jspb.Message.getWrapperField(this, feobjects_feobjects_pb.CompiledUserEntity, 1));
};


/** @param {?proto.feobjects.CompiledUserEntity|undefined} value */
proto.feapi.UserAndGraphResponse.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.feapi.UserAndGraphResponse.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.UserAndGraphResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated feobjects.CompiledBoardEntity Boards = 2;
 * @return {!Array.<!proto.feobjects.CompiledBoardEntity>}
 */
proto.feapi.UserAndGraphResponse.prototype.getBoardsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledBoardEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledBoardEntity, 2));
};


/** @param {!Array.<!proto.feobjects.CompiledBoardEntity>} value */
proto.feapi.UserAndGraphResponse.prototype.setBoardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feobjects.CompiledBoardEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledBoardEntity}
 */
proto.feapi.UserAndGraphResponse.prototype.addBoards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feobjects.CompiledBoardEntity, opt_index);
};


proto.feapi.UserAndGraphResponse.prototype.clearBoardsList = function() {
  this.setBoardsList([]);
};


/**
 * repeated feobjects.CompiledThreadEntity Threads = 3;
 * @return {!Array.<!proto.feobjects.CompiledThreadEntity>}
 */
proto.feapi.UserAndGraphResponse.prototype.getThreadsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledThreadEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledThreadEntity, 3));
};


/** @param {!Array.<!proto.feobjects.CompiledThreadEntity>} value */
proto.feapi.UserAndGraphResponse.prototype.setThreadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.feobjects.CompiledThreadEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledThreadEntity}
 */
proto.feapi.UserAndGraphResponse.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.feobjects.CompiledThreadEntity, opt_index);
};


proto.feapi.UserAndGraphResponse.prototype.clearThreadsList = function() {
  this.setThreadsList([]);
};


/**
 * repeated feobjects.CompiledPostEntity Posts = 4;
 * @return {!Array.<!proto.feobjects.CompiledPostEntity>}
 */
proto.feapi.UserAndGraphResponse.prototype.getPostsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledPostEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledPostEntity, 4));
};


/** @param {!Array.<!proto.feobjects.CompiledPostEntity>} value */
proto.feapi.UserAndGraphResponse.prototype.setPostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.feobjects.CompiledPostEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledPostEntity}
 */
proto.feapi.UserAndGraphResponse.prototype.addPosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.feobjects.CompiledPostEntity, opt_index);
};


proto.feapi.UserAndGraphResponse.prototype.clearPostsList = function() {
  this.setPostsList([]);
};


/**
 * optional bool UserEntityRequested = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.UserAndGraphResponse.prototype.getUserentityrequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.feapi.UserAndGraphResponse.prototype.setUserentityrequested = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool UserBoardsRequested = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.UserAndGraphResponse.prototype.getUserboardsrequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.feapi.UserAndGraphResponse.prototype.setUserboardsrequested = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool UserThreadsRequested = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.UserAndGraphResponse.prototype.getUserthreadsrequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.feapi.UserAndGraphResponse.prototype.setUserthreadsrequested = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool UserPostsRequested = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.feapi.UserAndGraphResponse.prototype.getUserpostsrequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.feapi.UserAndGraphResponse.prototype.setUserpostsrequested = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.Event.displayName = 'proto.feapi.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerfingerprint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priorfingerprint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.Event}
 */
proto.feapi.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.Event;
  return proto.feapi.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.Event}
 */
proto.feapi.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerfingerprint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriorfingerprint(value);
      break;
    case 3:
      var value = /** @type {!proto.feapi.EventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerfingerprint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriorfingerprint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string OwnerFingerprint = 1;
 * @return {string}
 */
proto.feapi.Event.prototype.getOwnerfingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.feapi.Event.prototype.setOwnerfingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string PriorFingerprint = 2;
 * @return {string}
 */
proto.feapi.Event.prototype.getPriorfingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.feapi.Event.prototype.setPriorfingerprint = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional EventType EventType = 3;
 * @return {!proto.feapi.EventType}
 */
proto.feapi.Event.prototype.getEventtype = function() {
  return /** @type {!proto.feapi.EventType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.feapi.EventType} value */
proto.feapi.Event.prototype.setEventtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 Timestamp = 4;
 * @return {number}
 */
proto.feapi.Event.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.feapi.Event.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.ContentEventPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.ContentEventPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.ContentEventPayload.displayName = 'proto.feapi.ContentEventPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.ContentEventPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.ContentEventPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.ContentEventPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.ContentEventPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.feapi.Event.toObject(includeInstance, f),
    boarddata: (f = msg.getBoarddata()) && mimapi_structprotos_pb.Board.toObject(includeInstance, f),
    threaddata: (f = msg.getThreaddata()) && mimapi_structprotos_pb.Thread.toObject(includeInstance, f),
    postdata: (f = msg.getPostdata()) && mimapi_structprotos_pb.Post.toObject(includeInstance, f),
    keydata: (f = msg.getKeydata()) && mimapi_structprotos_pb.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.ContentEventPayload}
 */
proto.feapi.ContentEventPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.ContentEventPayload;
  return proto.feapi.ContentEventPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.ContentEventPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.ContentEventPayload}
 */
proto.feapi.ContentEventPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feapi.Event;
      reader.readMessage(value,proto.feapi.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Board;
      reader.readMessage(value,mimapi_structprotos_pb.Board.deserializeBinaryFromReader);
      msg.setBoarddata(value);
      break;
    case 3:
      var value = new mimapi_structprotos_pb.Thread;
      reader.readMessage(value,mimapi_structprotos_pb.Thread.deserializeBinaryFromReader);
      msg.setThreaddata(value);
      break;
    case 4:
      var value = new mimapi_structprotos_pb.Post;
      reader.readMessage(value,mimapi_structprotos_pb.Post.deserializeBinaryFromReader);
      msg.setPostdata(value);
      break;
    case 5:
      var value = new mimapi_structprotos_pb.Key;
      reader.readMessage(value,mimapi_structprotos_pb.Key.deserializeBinaryFromReader);
      msg.setKeydata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.ContentEventPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.ContentEventPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.ContentEventPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.ContentEventPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feapi.Event.serializeBinaryToWriter
    );
  }
  f = message.getBoarddata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mimapi_structprotos_pb.Board.serializeBinaryToWriter
    );
  }
  f = message.getThreaddata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      mimapi_structprotos_pb.Thread.serializeBinaryToWriter
    );
  }
  f = message.getPostdata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      mimapi_structprotos_pb.Post.serializeBinaryToWriter
    );
  }
  f = message.getKeydata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      mimapi_structprotos_pb.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event Event = 1;
 * @return {?proto.feapi.Event}
 */
proto.feapi.ContentEventPayload.prototype.getEvent = function() {
  return /** @type{?proto.feapi.Event} */ (
    jspb.Message.getWrapperField(this, proto.feapi.Event, 1));
};


/** @param {?proto.feapi.Event|undefined} value */
proto.feapi.ContentEventPayload.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.feapi.ContentEventPayload.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.ContentEventPayload.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional structprotos.Board BoardData = 2;
 * @return {?proto.structprotos.Board}
 */
proto.feapi.ContentEventPayload.prototype.getBoarddata = function() {
  return /** @type{?proto.structprotos.Board} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Board, 2));
};


/** @param {?proto.structprotos.Board|undefined} value */
proto.feapi.ContentEventPayload.prototype.setBoarddata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.feapi.ContentEventPayload.prototype.clearBoarddata = function() {
  this.setBoarddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.ContentEventPayload.prototype.hasBoarddata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional structprotos.Thread ThreadData = 3;
 * @return {?proto.structprotos.Thread}
 */
proto.feapi.ContentEventPayload.prototype.getThreaddata = function() {
  return /** @type{?proto.structprotos.Thread} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Thread, 3));
};


/** @param {?proto.structprotos.Thread|undefined} value */
proto.feapi.ContentEventPayload.prototype.setThreaddata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.feapi.ContentEventPayload.prototype.clearThreaddata = function() {
  this.setThreaddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.ContentEventPayload.prototype.hasThreaddata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional structprotos.Post PostData = 4;
 * @return {?proto.structprotos.Post}
 */
proto.feapi.ContentEventPayload.prototype.getPostdata = function() {
  return /** @type{?proto.structprotos.Post} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Post, 4));
};


/** @param {?proto.structprotos.Post|undefined} value */
proto.feapi.ContentEventPayload.prototype.setPostdata = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.feapi.ContentEventPayload.prototype.clearPostdata = function() {
  this.setPostdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.ContentEventPayload.prototype.hasPostdata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional structprotos.Key KeyData = 5;
 * @return {?proto.structprotos.Key}
 */
proto.feapi.ContentEventPayload.prototype.getKeydata = function() {
  return /** @type{?proto.structprotos.Key} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Key, 5));
};


/** @param {?proto.structprotos.Key|undefined} value */
proto.feapi.ContentEventPayload.prototype.setKeydata = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.feapi.ContentEventPayload.prototype.clearKeydata = function() {
  this.setKeydata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.ContentEventPayload.prototype.hasKeydata = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.ContentEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.ContentEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.ContentEventResponse.displayName = 'proto.feapi.ContentEventResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.ContentEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.ContentEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.ContentEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.ContentEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.ContentEventResponse}
 */
proto.feapi.ContentEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.ContentEventResponse;
  return proto.feapi.ContentEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.ContentEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.ContentEventResponse}
 */
proto.feapi.ContentEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.ContentEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.ContentEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.ContentEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.ContentEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.SignalEventPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.SignalEventPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.SignalEventPayload.displayName = 'proto.feapi.SignalEventPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.SignalEventPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.SignalEventPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.SignalEventPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.SignalEventPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.feapi.Event.toObject(includeInstance, f),
    signaltargettype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    targetboard: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targetthread: jspb.Message.getFieldWithDefault(msg, 4, ""),
    targetdomain: jspb.Message.getFieldWithDefault(msg, 5, ""),
    targetexpiry: jspb.Message.getFieldWithDefault(msg, 6, 0),
    meta: jspb.Message.getFieldWithDefault(msg, 7, ""),
    targetfingerprint: jspb.Message.getFieldWithDefault(msg, 8, ""),
    signaltypeclass: jspb.Message.getFieldWithDefault(msg, 9, 0),
    signaltype: jspb.Message.getFieldWithDefault(msg, 10, 0),
    signaltext: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.SignalEventPayload}
 */
proto.feapi.SignalEventPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.SignalEventPayload;
  return proto.feapi.SignalEventPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.SignalEventPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.SignalEventPayload}
 */
proto.feapi.SignalEventPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feapi.Event;
      reader.readMessage(value,proto.feapi.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {!proto.feapi.SignalTargetType} */ (reader.readEnum());
      msg.setSignaltargettype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetboard(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetthread(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetdomain(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetexpiry(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetfingerprint(value);
      break;
    case 9:
      var value = /** @type {!proto.feapi.SignalTypeClass} */ (reader.readEnum());
      msg.setSignaltypeclass(value);
      break;
    case 10:
      var value = /** @type {!proto.feapi.SignalType} */ (reader.readEnum());
      msg.setSignaltype(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignaltext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.SignalEventPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.SignalEventPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.SignalEventPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.SignalEventPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feapi.Event.serializeBinaryToWriter
    );
  }
  f = message.getSignaltargettype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTargetboard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTargetthread();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTargetdomain();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTargetexpiry();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMeta();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTargetfingerprint();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSignaltypeclass();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getSignaltype();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getSignaltext();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional Event Event = 1;
 * @return {?proto.feapi.Event}
 */
proto.feapi.SignalEventPayload.prototype.getEvent = function() {
  return /** @type{?proto.feapi.Event} */ (
    jspb.Message.getWrapperField(this, proto.feapi.Event, 1));
};


/** @param {?proto.feapi.Event|undefined} value */
proto.feapi.SignalEventPayload.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.feapi.SignalEventPayload.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.feapi.SignalEventPayload.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignalTargetType SignalTargetType = 2;
 * @return {!proto.feapi.SignalTargetType}
 */
proto.feapi.SignalEventPayload.prototype.getSignaltargettype = function() {
  return /** @type {!proto.feapi.SignalTargetType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.feapi.SignalTargetType} value */
proto.feapi.SignalEventPayload.prototype.setSignaltargettype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string TargetBoard = 3;
 * @return {string}
 */
proto.feapi.SignalEventPayload.prototype.getTargetboard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.feapi.SignalEventPayload.prototype.setTargetboard = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string TargetThread = 4;
 * @return {string}
 */
proto.feapi.SignalEventPayload.prototype.getTargetthread = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.feapi.SignalEventPayload.prototype.setTargetthread = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string TargetDomain = 5;
 * @return {string}
 */
proto.feapi.SignalEventPayload.prototype.getTargetdomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.feapi.SignalEventPayload.prototype.setTargetdomain = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 TargetExpiry = 6;
 * @return {number}
 */
proto.feapi.SignalEventPayload.prototype.getTargetexpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.feapi.SignalEventPayload.prototype.setTargetexpiry = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Meta = 7;
 * @return {string}
 */
proto.feapi.SignalEventPayload.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.feapi.SignalEventPayload.prototype.setMeta = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string TargetFingerprint = 8;
 * @return {string}
 */
proto.feapi.SignalEventPayload.prototype.getTargetfingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.feapi.SignalEventPayload.prototype.setTargetfingerprint = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional SignalTypeClass SignalTypeClass = 9;
 * @return {!proto.feapi.SignalTypeClass}
 */
proto.feapi.SignalEventPayload.prototype.getSignaltypeclass = function() {
  return /** @type {!proto.feapi.SignalTypeClass} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.feapi.SignalTypeClass} value */
proto.feapi.SignalEventPayload.prototype.setSignaltypeclass = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional SignalType SignalType = 10;
 * @return {!proto.feapi.SignalType}
 */
proto.feapi.SignalEventPayload.prototype.getSignaltype = function() {
  return /** @type {!proto.feapi.SignalType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.feapi.SignalType} value */
proto.feapi.SignalEventPayload.prototype.setSignaltype = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string SignalText = 11;
 * @return {string}
 */
proto.feapi.SignalEventPayload.prototype.getSignaltext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.feapi.SignalEventPayload.prototype.setSignaltext = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.SignalEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.SignalEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.SignalEventResponse.displayName = 'proto.feapi.SignalEventResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.SignalEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.SignalEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.SignalEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.SignalEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.SignalEventResponse}
 */
proto.feapi.SignalEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.SignalEventResponse;
  return proto.feapi.SignalEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.SignalEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.SignalEventResponse}
 */
proto.feapi.SignalEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.SignalEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.SignalEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.SignalEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.SignalEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.UncompiledEntityByKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.UncompiledEntityByKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.UncompiledEntityByKeyRequest.displayName = 'proto.feapi.UncompiledEntityByKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.UncompiledEntityByKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.UncompiledEntityByKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.UncompiledEntityByKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.UncompiledEntityByKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitytype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ownerfingerprint: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.UncompiledEntityByKeyRequest}
 */
proto.feapi.UncompiledEntityByKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.UncompiledEntityByKeyRequest;
  return proto.feapi.UncompiledEntityByKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.UncompiledEntityByKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.UncompiledEntityByKeyRequest}
 */
proto.feapi.UncompiledEntityByKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.feapi.UncompiledEntityType} */ (reader.readEnum());
      msg.setEntitytype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerfingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.UncompiledEntityByKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.UncompiledEntityByKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.UncompiledEntityByKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.UncompiledEntityByKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitytype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOwnerfingerprint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional UncompiledEntityType EntityType = 1;
 * @return {!proto.feapi.UncompiledEntityType}
 */
proto.feapi.UncompiledEntityByKeyRequest.prototype.getEntitytype = function() {
  return /** @type {!proto.feapi.UncompiledEntityType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.feapi.UncompiledEntityType} value */
proto.feapi.UncompiledEntityByKeyRequest.prototype.setEntitytype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 Limit = 2;
 * @return {number}
 */
proto.feapi.UncompiledEntityByKeyRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.feapi.UncompiledEntityByKeyRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 Offset = 3;
 * @return {number}
 */
proto.feapi.UncompiledEntityByKeyRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.feapi.UncompiledEntityByKeyRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string OwnerFingerprint = 4;
 * @return {string}
 */
proto.feapi.UncompiledEntityByKeyRequest.prototype.getOwnerfingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.feapi.UncompiledEntityByKeyRequest.prototype.setOwnerfingerprint = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.UncompiledEntityByKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feapi.UncompiledEntityByKeyResponse.repeatedFields_, null);
};
goog.inherits(proto.feapi.UncompiledEntityByKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.UncompiledEntityByKeyResponse.displayName = 'proto.feapi.UncompiledEntityByKeyResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feapi.UncompiledEntityByKeyResponse.repeatedFields_ = [2,3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.UncompiledEntityByKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.UncompiledEntityByKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.UncompiledEntityByKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitytype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    boardsList: jspb.Message.toObjectList(msg.getBoardsList(),
    mimapi_structprotos_pb.Board.toObject, includeInstance),
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    mimapi_structprotos_pb.Thread.toObject, includeInstance),
    postsList: jspb.Message.toObjectList(msg.getPostsList(),
    mimapi_structprotos_pb.Post.toObject, includeInstance),
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    mimapi_structprotos_pb.Vote.toObject, includeInstance),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    mimapi_structprotos_pb.Key.toObject, includeInstance),
    truststatesList: jspb.Message.toObjectList(msg.getTruststatesList(),
    mimapi_structprotos_pb.Truststate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.UncompiledEntityByKeyResponse}
 */
proto.feapi.UncompiledEntityByKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.UncompiledEntityByKeyResponse;
  return proto.feapi.UncompiledEntityByKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.UncompiledEntityByKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.UncompiledEntityByKeyResponse}
 */
proto.feapi.UncompiledEntityByKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.feapi.UncompiledEntityType} */ (reader.readEnum());
      msg.setEntitytype(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Board;
      reader.readMessage(value,mimapi_structprotos_pb.Board.deserializeBinaryFromReader);
      msg.addBoards(value);
      break;
    case 3:
      var value = new mimapi_structprotos_pb.Thread;
      reader.readMessage(value,mimapi_structprotos_pb.Thread.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    case 4:
      var value = new mimapi_structprotos_pb.Post;
      reader.readMessage(value,mimapi_structprotos_pb.Post.deserializeBinaryFromReader);
      msg.addPosts(value);
      break;
    case 5:
      var value = new mimapi_structprotos_pb.Vote;
      reader.readMessage(value,mimapi_structprotos_pb.Vote.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    case 6:
      var value = new mimapi_structprotos_pb.Key;
      reader.readMessage(value,mimapi_structprotos_pb.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 7:
      var value = new mimapi_structprotos_pb.Truststate;
      reader.readMessage(value,mimapi_structprotos_pb.Truststate.deserializeBinaryFromReader);
      msg.addTruststates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.UncompiledEntityByKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.UncompiledEntityByKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.UncompiledEntityByKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitytype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBoardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      mimapi_structprotos_pb.Board.serializeBinaryToWriter
    );
  }
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      mimapi_structprotos_pb.Thread.serializeBinaryToWriter
    );
  }
  f = message.getPostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      mimapi_structprotos_pb.Post.serializeBinaryToWriter
    );
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      mimapi_structprotos_pb.Vote.serializeBinaryToWriter
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      mimapi_structprotos_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getTruststatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      mimapi_structprotos_pb.Truststate.serializeBinaryToWriter
    );
  }
};


/**
 * optional UncompiledEntityType EntityType = 1;
 * @return {!proto.feapi.UncompiledEntityType}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.getEntitytype = function() {
  return /** @type {!proto.feapi.UncompiledEntityType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.feapi.UncompiledEntityType} value */
proto.feapi.UncompiledEntityByKeyResponse.prototype.setEntitytype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated structprotos.Board Boards = 2;
 * @return {!Array.<!proto.structprotos.Board>}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.getBoardsList = function() {
  return /** @type{!Array.<!proto.structprotos.Board>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Board, 2));
};


/** @param {!Array.<!proto.structprotos.Board>} value */
proto.feapi.UncompiledEntityByKeyResponse.prototype.setBoardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.structprotos.Board=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Board}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.addBoards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.structprotos.Board, opt_index);
};


proto.feapi.UncompiledEntityByKeyResponse.prototype.clearBoardsList = function() {
  this.setBoardsList([]);
};


/**
 * repeated structprotos.Thread Threads = 3;
 * @return {!Array.<!proto.structprotos.Thread>}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.getThreadsList = function() {
  return /** @type{!Array.<!proto.structprotos.Thread>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Thread, 3));
};


/** @param {!Array.<!proto.structprotos.Thread>} value */
proto.feapi.UncompiledEntityByKeyResponse.prototype.setThreadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.structprotos.Thread=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Thread}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.structprotos.Thread, opt_index);
};


proto.feapi.UncompiledEntityByKeyResponse.prototype.clearThreadsList = function() {
  this.setThreadsList([]);
};


/**
 * repeated structprotos.Post Posts = 4;
 * @return {!Array.<!proto.structprotos.Post>}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.getPostsList = function() {
  return /** @type{!Array.<!proto.structprotos.Post>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Post, 4));
};


/** @param {!Array.<!proto.structprotos.Post>} value */
proto.feapi.UncompiledEntityByKeyResponse.prototype.setPostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.structprotos.Post=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Post}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.addPosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.structprotos.Post, opt_index);
};


proto.feapi.UncompiledEntityByKeyResponse.prototype.clearPostsList = function() {
  this.setPostsList([]);
};


/**
 * repeated structprotos.Vote Votes = 5;
 * @return {!Array.<!proto.structprotos.Vote>}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.getVotesList = function() {
  return /** @type{!Array.<!proto.structprotos.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Vote, 5));
};


/** @param {!Array.<!proto.structprotos.Vote>} value */
proto.feapi.UncompiledEntityByKeyResponse.prototype.setVotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.structprotos.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Vote}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.structprotos.Vote, opt_index);
};


proto.feapi.UncompiledEntityByKeyResponse.prototype.clearVotesList = function() {
  this.setVotesList([]);
};


/**
 * repeated structprotos.Key Keys = 6;
 * @return {!Array.<!proto.structprotos.Key>}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.getKeysList = function() {
  return /** @type{!Array.<!proto.structprotos.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Key, 6));
};


/** @param {!Array.<!proto.structprotos.Key>} value */
proto.feapi.UncompiledEntityByKeyResponse.prototype.setKeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.structprotos.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Key}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.structprotos.Key, opt_index);
};


proto.feapi.UncompiledEntityByKeyResponse.prototype.clearKeysList = function() {
  this.setKeysList([]);
};


/**
 * repeated structprotos.Truststate Truststates = 7;
 * @return {!Array.<!proto.structprotos.Truststate>}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.getTruststatesList = function() {
  return /** @type{!Array.<!proto.structprotos.Truststate>} */ (
    jspb.Message.getRepeatedWrapperField(this, mimapi_structprotos_pb.Truststate, 7));
};


/** @param {!Array.<!proto.structprotos.Truststate>} value */
proto.feapi.UncompiledEntityByKeyResponse.prototype.setTruststatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.structprotos.Truststate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Truststate}
 */
proto.feapi.UncompiledEntityByKeyResponse.prototype.addTruststates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.structprotos.Truststate, opt_index);
};


proto.feapi.UncompiledEntityByKeyResponse.prototype.clearTruststatesList = function() {
  this.setTruststatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.InflightsPruneRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.InflightsPruneRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.InflightsPruneRequest.displayName = 'proto.feapi.InflightsPruneRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.InflightsPruneRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.InflightsPruneRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.InflightsPruneRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.InflightsPruneRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.InflightsPruneRequest}
 */
proto.feapi.InflightsPruneRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.InflightsPruneRequest;
  return proto.feapi.InflightsPruneRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.InflightsPruneRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.InflightsPruneRequest}
 */
proto.feapi.InflightsPruneRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.InflightsPruneRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.InflightsPruneRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.InflightsPruneRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.InflightsPruneRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feapi.InflightsPruneResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feapi.InflightsPruneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.feapi.InflightsPruneResponse.displayName = 'proto.feapi.InflightsPruneResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feapi.InflightsPruneResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.feapi.InflightsPruneResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feapi.InflightsPruneResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.InflightsPruneResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feapi.InflightsPruneResponse}
 */
proto.feapi.InflightsPruneResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feapi.InflightsPruneResponse;
  return proto.feapi.InflightsPruneResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feapi.InflightsPruneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feapi.InflightsPruneResponse}
 */
proto.feapi.InflightsPruneResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feapi.InflightsPruneResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feapi.InflightsPruneResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feapi.InflightsPruneResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feapi.InflightsPruneResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.feapi.EventType = {
  UNKNOWN_EVENT_TYPE: 0,
  CREATE: 1,
  UPDATE: 2
};

/**
 * @enum {number}
 */
proto.feapi.SignalTargetType = {
  UNKNOWN_SIGNAL_TARGET_TYPE: 0,
  CONTENT: 1,
  USER: 2
};

/**
 * @enum {number}
 */
proto.feapi.SignalTypeClass = {
  UNKNOWN_SIGNAL_TYPECLASS: 0,
  ADDS_TO_DISCUSSION: 1,
  FOLLOWS_GUIDELINES: 2,
  MOD_ACTIONS: 3,
  PUBLIC_TRUST: 4,
  NAMING: 5,
  F451: 6,
  PUBLIC_ELECT: 7
};

/**
 * @enum {number}
 */
proto.feapi.SignalType = {
  UNKNOWN_SIGNAL_TYPE: 0,
  UPVOTE: 1,
  DOWNVOTE: 2,
  REPORT_TO_MOD: 3,
  MODBLOCK: 4,
  MODAPPROVE: 5,
  FOLLOW: 6,
  BLOCK: 7,
  NAME_ASSIGN: 8,
  CENSOR_ASSIGN: 9,
  ELECT: 10,
  DISQUALIFY: 11,
  RETRACT: 12
};

/**
 * @enum {number}
 */
proto.feapi.UncompiledEntityType = {
  UNKNOWN_ENTITY_TYPE: 0,
  BOARD: 1,
  THREAD: 2,
  POST: 3,
  VOTE: 4,
  KEY: 5,
  TRUSTSTATE: 6
};

goog.object.extend(exports, proto.feapi);
