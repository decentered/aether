/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var feobjects_feobjects_pb = require('../feobjects/feobjects_pb.js');
var mimapi_structprotos_pb = require('../mimapi/structprotos_pb.js');
goog.exportSymbol('proto.clapi.AmbientLocalUserEntityPayload', null, global);
goog.exportSymbol('proto.clapi.AmbientLocalUserEntityResponse', null, global);
goog.exportSymbol('proto.clapi.AmbientStatusPayload', null, global);
goog.exportSymbol('proto.clapi.AmbientStatusResponse', null, global);
goog.exportSymbol('proto.clapi.AmbientsRequest', null, global);
goog.exportSymbol('proto.clapi.AmbientsResponse', null, global);
goog.exportSymbol('proto.clapi.FEReadyRequest', null, global);
goog.exportSymbol('proto.clapi.FEReadyResponse', null, global);
goog.exportSymbol('proto.clapi.HomeViewPayload', null, global);
goog.exportSymbol('proto.clapi.HomeViewResponse', null, global);
goog.exportSymbol('proto.clapi.InflightBoard', null, global);
goog.exportSymbol('proto.clapi.InflightKey', null, global);
goog.exportSymbol('proto.clapi.InflightPost', null, global);
goog.exportSymbol('proto.clapi.InflightStatus', null, global);
goog.exportSymbol('proto.clapi.InflightThread', null, global);
goog.exportSymbol('proto.clapi.InflightTruststate', null, global);
goog.exportSymbol('proto.clapi.InflightVote', null, global);
goog.exportSymbol('proto.clapi.Inflights', null, global);
goog.exportSymbol('proto.clapi.ModModeEnabledStatusPayload', null, global);
goog.exportSymbol('proto.clapi.ModModeEnabledStatusResponse', null, global);
goog.exportSymbol('proto.clapi.NotificationsPayload', null, global);
goog.exportSymbol('proto.clapi.NotificationsResponse', null, global);
goog.exportSymbol('proto.clapi.OnboardCompleteStatusPayload', null, global);
goog.exportSymbol('proto.clapi.OnboardCompleteStatusResponse', null, global);
goog.exportSymbol('proto.clapi.PopularViewPayload', null, global);
goog.exportSymbol('proto.clapi.PopularViewResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.FEReadyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.FEReadyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.FEReadyRequest.displayName = 'proto.clapi.FEReadyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.FEReadyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.FEReadyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.FEReadyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.FEReadyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.FEReadyRequest}
 */
proto.clapi.FEReadyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.FEReadyRequest;
  return proto.clapi.FEReadyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.FEReadyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.FEReadyRequest}
 */
proto.clapi.FEReadyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.FEReadyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.FEReadyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.FEReadyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.FEReadyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.clapi.FEReadyRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.clapi.FEReadyRequest.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.clapi.FEReadyRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.clapi.FEReadyRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.FEReadyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.FEReadyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.FEReadyResponse.displayName = 'proto.clapi.FEReadyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.FEReadyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.FEReadyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.FEReadyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.FEReadyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.FEReadyResponse}
 */
proto.clapi.FEReadyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.FEReadyResponse;
  return proto.clapi.FEReadyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.FEReadyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.FEReadyResponse}
 */
proto.clapi.FEReadyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.FEReadyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.FEReadyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.FEReadyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.FEReadyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.AmbientsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clapi.AmbientsRequest.repeatedFields_, null);
};
goog.inherits(proto.clapi.AmbientsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.AmbientsRequest.displayName = 'proto.clapi.AmbientsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clapi.AmbientsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.AmbientsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.AmbientsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.AmbientsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    boardsList: jspb.Message.toObjectList(msg.getBoardsList(),
    feobjects_feobjects_pb.AmbientBoardEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.AmbientsRequest}
 */
proto.clapi.AmbientsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.AmbientsRequest;
  return proto.clapi.AmbientsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.AmbientsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.AmbientsRequest}
 */
proto.clapi.AmbientsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.AmbientBoardEntity;
      reader.readMessage(value,feobjects_feobjects_pb.AmbientBoardEntity.deserializeBinaryFromReader);
      msg.addBoards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.AmbientsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.AmbientsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.AmbientsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      feobjects_feobjects_pb.AmbientBoardEntity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feobjects.AmbientBoardEntity Boards = 1;
 * @return {!Array.<!proto.feobjects.AmbientBoardEntity>}
 */
proto.clapi.AmbientsRequest.prototype.getBoardsList = function() {
  return /** @type{!Array.<!proto.feobjects.AmbientBoardEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.AmbientBoardEntity, 1));
};


/** @param {!Array.<!proto.feobjects.AmbientBoardEntity>} value */
proto.clapi.AmbientsRequest.prototype.setBoardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feobjects.AmbientBoardEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.AmbientBoardEntity}
 */
proto.clapi.AmbientsRequest.prototype.addBoards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feobjects.AmbientBoardEntity, opt_index);
};


proto.clapi.AmbientsRequest.prototype.clearBoardsList = function() {
  this.setBoardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.AmbientsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.AmbientsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.AmbientsResponse.displayName = 'proto.clapi.AmbientsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.AmbientsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.AmbientsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.AmbientsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.AmbientsResponse}
 */
proto.clapi.AmbientsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.AmbientsResponse;
  return proto.clapi.AmbientsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.AmbientsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.AmbientsResponse}
 */
proto.clapi.AmbientsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.AmbientsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.AmbientsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.AmbientsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.InflightStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.InflightStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.InflightStatus.displayName = 'proto.clapi.InflightStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.InflightStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.InflightStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.InflightStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    completionpercent: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statustext: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestedtimestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastactiontimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    eventtype: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.InflightStatus}
 */
proto.clapi.InflightStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.InflightStatus;
  return proto.clapi.InflightStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.InflightStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.InflightStatus}
 */
proto.clapi.InflightStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompletionpercent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatustext(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRequestedtimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastactiontimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.InflightStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.InflightStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.InflightStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompletionpercent();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatustext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLastactiontimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getEventtype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 CompletionPercent = 1;
 * @return {number}
 */
proto.clapi.InflightStatus.prototype.getCompletionpercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.clapi.InflightStatus.prototype.setCompletionpercent = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string StatusText = 2;
 * @return {string}
 */
proto.clapi.InflightStatus.prototype.getStatustext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.clapi.InflightStatus.prototype.setStatustext = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 RequestedTimestamp = 4;
 * @return {number}
 */
proto.clapi.InflightStatus.prototype.getRequestedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.clapi.InflightStatus.prototype.setRequestedtimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 LastActionTimestamp = 5;
 * @return {number}
 */
proto.clapi.InflightStatus.prototype.getLastactiontimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.clapi.InflightStatus.prototype.setLastactiontimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string EventType = 6;
 * @return {string}
 */
proto.clapi.InflightStatus.prototype.getEventtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.clapi.InflightStatus.prototype.setEventtype = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.InflightBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.InflightBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.InflightBoard.displayName = 'proto.clapi.InflightBoard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.InflightBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.InflightBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.InflightBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.clapi.InflightStatus.toObject(includeInstance, f),
    entity: (f = msg.getEntity()) && mimapi_structprotos_pb.Board.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.InflightBoard}
 */
proto.clapi.InflightBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.InflightBoard;
  return proto.clapi.InflightBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.InflightBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.InflightBoard}
 */
proto.clapi.InflightBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clapi.InflightStatus;
      reader.readMessage(value,proto.clapi.InflightStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Board;
      reader.readMessage(value,mimapi_structprotos_pb.Board.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.InflightBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.InflightBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.InflightBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clapi.InflightStatus.serializeBinaryToWriter
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mimapi_structprotos_pb.Board.serializeBinaryToWriter
    );
  }
};


/**
 * optional InflightStatus Status = 1;
 * @return {?proto.clapi.InflightStatus}
 */
proto.clapi.InflightBoard.prototype.getStatus = function() {
  return /** @type{?proto.clapi.InflightStatus} */ (
    jspb.Message.getWrapperField(this, proto.clapi.InflightStatus, 1));
};


/** @param {?proto.clapi.InflightStatus|undefined} value */
proto.clapi.InflightBoard.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.clapi.InflightBoard.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightBoard.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional structprotos.Board Entity = 2;
 * @return {?proto.structprotos.Board}
 */
proto.clapi.InflightBoard.prototype.getEntity = function() {
  return /** @type{?proto.structprotos.Board} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Board, 2));
};


/** @param {?proto.structprotos.Board|undefined} value */
proto.clapi.InflightBoard.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.clapi.InflightBoard.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightBoard.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.InflightThread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.InflightThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.InflightThread.displayName = 'proto.clapi.InflightThread';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.InflightThread.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.InflightThread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.InflightThread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightThread.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.clapi.InflightStatus.toObject(includeInstance, f),
    entity: (f = msg.getEntity()) && mimapi_structprotos_pb.Thread.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.InflightThread}
 */
proto.clapi.InflightThread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.InflightThread;
  return proto.clapi.InflightThread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.InflightThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.InflightThread}
 */
proto.clapi.InflightThread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clapi.InflightStatus;
      reader.readMessage(value,proto.clapi.InflightStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Thread;
      reader.readMessage(value,mimapi_structprotos_pb.Thread.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.InflightThread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.InflightThread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.InflightThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightThread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clapi.InflightStatus.serializeBinaryToWriter
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mimapi_structprotos_pb.Thread.serializeBinaryToWriter
    );
  }
};


/**
 * optional InflightStatus Status = 1;
 * @return {?proto.clapi.InflightStatus}
 */
proto.clapi.InflightThread.prototype.getStatus = function() {
  return /** @type{?proto.clapi.InflightStatus} */ (
    jspb.Message.getWrapperField(this, proto.clapi.InflightStatus, 1));
};


/** @param {?proto.clapi.InflightStatus|undefined} value */
proto.clapi.InflightThread.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.clapi.InflightThread.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightThread.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional structprotos.Thread Entity = 2;
 * @return {?proto.structprotos.Thread}
 */
proto.clapi.InflightThread.prototype.getEntity = function() {
  return /** @type{?proto.structprotos.Thread} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Thread, 2));
};


/** @param {?proto.structprotos.Thread|undefined} value */
proto.clapi.InflightThread.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.clapi.InflightThread.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightThread.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.InflightPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.InflightPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.InflightPost.displayName = 'proto.clapi.InflightPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.InflightPost.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.InflightPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.InflightPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.clapi.InflightStatus.toObject(includeInstance, f),
    entity: (f = msg.getEntity()) && mimapi_structprotos_pb.Post.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.InflightPost}
 */
proto.clapi.InflightPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.InflightPost;
  return proto.clapi.InflightPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.InflightPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.InflightPost}
 */
proto.clapi.InflightPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clapi.InflightStatus;
      reader.readMessage(value,proto.clapi.InflightStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Post;
      reader.readMessage(value,mimapi_structprotos_pb.Post.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.InflightPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.InflightPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.InflightPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clapi.InflightStatus.serializeBinaryToWriter
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mimapi_structprotos_pb.Post.serializeBinaryToWriter
    );
  }
};


/**
 * optional InflightStatus Status = 1;
 * @return {?proto.clapi.InflightStatus}
 */
proto.clapi.InflightPost.prototype.getStatus = function() {
  return /** @type{?proto.clapi.InflightStatus} */ (
    jspb.Message.getWrapperField(this, proto.clapi.InflightStatus, 1));
};


/** @param {?proto.clapi.InflightStatus|undefined} value */
proto.clapi.InflightPost.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.clapi.InflightPost.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightPost.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional structprotos.Post Entity = 2;
 * @return {?proto.structprotos.Post}
 */
proto.clapi.InflightPost.prototype.getEntity = function() {
  return /** @type{?proto.structprotos.Post} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Post, 2));
};


/** @param {?proto.structprotos.Post|undefined} value */
proto.clapi.InflightPost.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.clapi.InflightPost.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightPost.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.InflightVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.InflightVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.InflightVote.displayName = 'proto.clapi.InflightVote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.InflightVote.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.InflightVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.InflightVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.clapi.InflightStatus.toObject(includeInstance, f),
    entity: (f = msg.getEntity()) && mimapi_structprotos_pb.Vote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.InflightVote}
 */
proto.clapi.InflightVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.InflightVote;
  return proto.clapi.InflightVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.InflightVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.InflightVote}
 */
proto.clapi.InflightVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clapi.InflightStatus;
      reader.readMessage(value,proto.clapi.InflightStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Vote;
      reader.readMessage(value,mimapi_structprotos_pb.Vote.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.InflightVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.InflightVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.InflightVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clapi.InflightStatus.serializeBinaryToWriter
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mimapi_structprotos_pb.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * optional InflightStatus Status = 1;
 * @return {?proto.clapi.InflightStatus}
 */
proto.clapi.InflightVote.prototype.getStatus = function() {
  return /** @type{?proto.clapi.InflightStatus} */ (
    jspb.Message.getWrapperField(this, proto.clapi.InflightStatus, 1));
};


/** @param {?proto.clapi.InflightStatus|undefined} value */
proto.clapi.InflightVote.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.clapi.InflightVote.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightVote.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional structprotos.Vote Entity = 2;
 * @return {?proto.structprotos.Vote}
 */
proto.clapi.InflightVote.prototype.getEntity = function() {
  return /** @type{?proto.structprotos.Vote} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Vote, 2));
};


/** @param {?proto.structprotos.Vote|undefined} value */
proto.clapi.InflightVote.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.clapi.InflightVote.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightVote.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.InflightKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.InflightKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.InflightKey.displayName = 'proto.clapi.InflightKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.InflightKey.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.InflightKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.InflightKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.clapi.InflightStatus.toObject(includeInstance, f),
    entity: (f = msg.getEntity()) && mimapi_structprotos_pb.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.InflightKey}
 */
proto.clapi.InflightKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.InflightKey;
  return proto.clapi.InflightKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.InflightKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.InflightKey}
 */
proto.clapi.InflightKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clapi.InflightStatus;
      reader.readMessage(value,proto.clapi.InflightStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Key;
      reader.readMessage(value,mimapi_structprotos_pb.Key.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.InflightKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.InflightKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.InflightKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clapi.InflightStatus.serializeBinaryToWriter
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mimapi_structprotos_pb.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional InflightStatus Status = 1;
 * @return {?proto.clapi.InflightStatus}
 */
proto.clapi.InflightKey.prototype.getStatus = function() {
  return /** @type{?proto.clapi.InflightStatus} */ (
    jspb.Message.getWrapperField(this, proto.clapi.InflightStatus, 1));
};


/** @param {?proto.clapi.InflightStatus|undefined} value */
proto.clapi.InflightKey.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.clapi.InflightKey.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightKey.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional structprotos.Key Entity = 2;
 * @return {?proto.structprotos.Key}
 */
proto.clapi.InflightKey.prototype.getEntity = function() {
  return /** @type{?proto.structprotos.Key} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Key, 2));
};


/** @param {?proto.structprotos.Key|undefined} value */
proto.clapi.InflightKey.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.clapi.InflightKey.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightKey.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.InflightTruststate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.InflightTruststate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.InflightTruststate.displayName = 'proto.clapi.InflightTruststate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.InflightTruststate.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.InflightTruststate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.InflightTruststate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightTruststate.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.clapi.InflightStatus.toObject(includeInstance, f),
    entity: (f = msg.getEntity()) && mimapi_structprotos_pb.Truststate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.InflightTruststate}
 */
proto.clapi.InflightTruststate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.InflightTruststate;
  return proto.clapi.InflightTruststate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.InflightTruststate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.InflightTruststate}
 */
proto.clapi.InflightTruststate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clapi.InflightStatus;
      reader.readMessage(value,proto.clapi.InflightStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new mimapi_structprotos_pb.Truststate;
      reader.readMessage(value,mimapi_structprotos_pb.Truststate.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.InflightTruststate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.InflightTruststate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.InflightTruststate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.InflightTruststate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clapi.InflightStatus.serializeBinaryToWriter
    );
  }
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mimapi_structprotos_pb.Truststate.serializeBinaryToWriter
    );
  }
};


/**
 * optional InflightStatus Status = 1;
 * @return {?proto.clapi.InflightStatus}
 */
proto.clapi.InflightTruststate.prototype.getStatus = function() {
  return /** @type{?proto.clapi.InflightStatus} */ (
    jspb.Message.getWrapperField(this, proto.clapi.InflightStatus, 1));
};


/** @param {?proto.clapi.InflightStatus|undefined} value */
proto.clapi.InflightTruststate.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.clapi.InflightTruststate.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightTruststate.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional structprotos.Truststate Entity = 2;
 * @return {?proto.structprotos.Truststate}
 */
proto.clapi.InflightTruststate.prototype.getEntity = function() {
  return /** @type{?proto.structprotos.Truststate} */ (
    jspb.Message.getWrapperField(this, mimapi_structprotos_pb.Truststate, 2));
};


/** @param {?proto.structprotos.Truststate|undefined} value */
proto.clapi.InflightTruststate.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.clapi.InflightTruststate.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.InflightTruststate.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.Inflights = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clapi.Inflights.repeatedFields_, null);
};
goog.inherits(proto.clapi.Inflights, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.Inflights.displayName = 'proto.clapi.Inflights';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clapi.Inflights.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.Inflights.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.Inflights.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.Inflights} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.Inflights.toObject = function(includeInstance, msg) {
  var f, obj = {
    boardsList: jspb.Message.toObjectList(msg.getBoardsList(),
    proto.clapi.InflightBoard.toObject, includeInstance),
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    proto.clapi.InflightThread.toObject, includeInstance),
    postsList: jspb.Message.toObjectList(msg.getPostsList(),
    proto.clapi.InflightPost.toObject, includeInstance),
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.clapi.InflightVote.toObject, includeInstance),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.clapi.InflightKey.toObject, includeInstance),
    truststatesList: jspb.Message.toObjectList(msg.getTruststatesList(),
    proto.clapi.InflightTruststate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.Inflights}
 */
proto.clapi.Inflights.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.Inflights;
  return proto.clapi.Inflights.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.Inflights} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.Inflights}
 */
proto.clapi.Inflights.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clapi.InflightBoard;
      reader.readMessage(value,proto.clapi.InflightBoard.deserializeBinaryFromReader);
      msg.addBoards(value);
      break;
    case 2:
      var value = new proto.clapi.InflightThread;
      reader.readMessage(value,proto.clapi.InflightThread.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    case 3:
      var value = new proto.clapi.InflightPost;
      reader.readMessage(value,proto.clapi.InflightPost.deserializeBinaryFromReader);
      msg.addPosts(value);
      break;
    case 4:
      var value = new proto.clapi.InflightVote;
      reader.readMessage(value,proto.clapi.InflightVote.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    case 5:
      var value = new proto.clapi.InflightKey;
      reader.readMessage(value,proto.clapi.InflightKey.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 6:
      var value = new proto.clapi.InflightTruststate;
      reader.readMessage(value,proto.clapi.InflightTruststate.deserializeBinaryFromReader);
      msg.addTruststates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.Inflights.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.Inflights.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.Inflights} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.Inflights.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.clapi.InflightBoard.serializeBinaryToWriter
    );
  }
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.clapi.InflightThread.serializeBinaryToWriter
    );
  }
  f = message.getPostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.clapi.InflightPost.serializeBinaryToWriter
    );
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.clapi.InflightVote.serializeBinaryToWriter
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.clapi.InflightKey.serializeBinaryToWriter
    );
  }
  f = message.getTruststatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.clapi.InflightTruststate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InflightBoard Boards = 1;
 * @return {!Array.<!proto.clapi.InflightBoard>}
 */
proto.clapi.Inflights.prototype.getBoardsList = function() {
  return /** @type{!Array.<!proto.clapi.InflightBoard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clapi.InflightBoard, 1));
};


/** @param {!Array.<!proto.clapi.InflightBoard>} value */
proto.clapi.Inflights.prototype.setBoardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.clapi.InflightBoard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clapi.InflightBoard}
 */
proto.clapi.Inflights.prototype.addBoards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.clapi.InflightBoard, opt_index);
};


proto.clapi.Inflights.prototype.clearBoardsList = function() {
  this.setBoardsList([]);
};


/**
 * repeated InflightThread Threads = 2;
 * @return {!Array.<!proto.clapi.InflightThread>}
 */
proto.clapi.Inflights.prototype.getThreadsList = function() {
  return /** @type{!Array.<!proto.clapi.InflightThread>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clapi.InflightThread, 2));
};


/** @param {!Array.<!proto.clapi.InflightThread>} value */
proto.clapi.Inflights.prototype.setThreadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.clapi.InflightThread=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clapi.InflightThread}
 */
proto.clapi.Inflights.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.clapi.InflightThread, opt_index);
};


proto.clapi.Inflights.prototype.clearThreadsList = function() {
  this.setThreadsList([]);
};


/**
 * repeated InflightPost Posts = 3;
 * @return {!Array.<!proto.clapi.InflightPost>}
 */
proto.clapi.Inflights.prototype.getPostsList = function() {
  return /** @type{!Array.<!proto.clapi.InflightPost>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clapi.InflightPost, 3));
};


/** @param {!Array.<!proto.clapi.InflightPost>} value */
proto.clapi.Inflights.prototype.setPostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.clapi.InflightPost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clapi.InflightPost}
 */
proto.clapi.Inflights.prototype.addPosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.clapi.InflightPost, opt_index);
};


proto.clapi.Inflights.prototype.clearPostsList = function() {
  this.setPostsList([]);
};


/**
 * repeated InflightVote Votes = 4;
 * @return {!Array.<!proto.clapi.InflightVote>}
 */
proto.clapi.Inflights.prototype.getVotesList = function() {
  return /** @type{!Array.<!proto.clapi.InflightVote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clapi.InflightVote, 4));
};


/** @param {!Array.<!proto.clapi.InflightVote>} value */
proto.clapi.Inflights.prototype.setVotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.clapi.InflightVote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clapi.InflightVote}
 */
proto.clapi.Inflights.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.clapi.InflightVote, opt_index);
};


proto.clapi.Inflights.prototype.clearVotesList = function() {
  this.setVotesList([]);
};


/**
 * repeated InflightKey Keys = 5;
 * @return {!Array.<!proto.clapi.InflightKey>}
 */
proto.clapi.Inflights.prototype.getKeysList = function() {
  return /** @type{!Array.<!proto.clapi.InflightKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clapi.InflightKey, 5));
};


/** @param {!Array.<!proto.clapi.InflightKey>} value */
proto.clapi.Inflights.prototype.setKeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.clapi.InflightKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clapi.InflightKey}
 */
proto.clapi.Inflights.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.clapi.InflightKey, opt_index);
};


proto.clapi.Inflights.prototype.clearKeysList = function() {
  this.setKeysList([]);
};


/**
 * repeated InflightTruststate Truststates = 6;
 * @return {!Array.<!proto.clapi.InflightTruststate>}
 */
proto.clapi.Inflights.prototype.getTruststatesList = function() {
  return /** @type{!Array.<!proto.clapi.InflightTruststate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clapi.InflightTruststate, 6));
};


/** @param {!Array.<!proto.clapi.InflightTruststate>} value */
proto.clapi.Inflights.prototype.setTruststatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.clapi.InflightTruststate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clapi.InflightTruststate}
 */
proto.clapi.Inflights.prototype.addTruststates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.clapi.InflightTruststate, opt_index);
};


proto.clapi.Inflights.prototype.clearTruststatesList = function() {
  this.setTruststatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.AmbientStatusPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.AmbientStatusPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.AmbientStatusPayload.displayName = 'proto.clapi.AmbientStatusPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.AmbientStatusPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.AmbientStatusPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.AmbientStatusPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientStatusPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    backendambientstatus: (f = msg.getBackendambientstatus()) && feobjects_feobjects_pb.BackendAmbientStatus.toObject(includeInstance, f),
    frontendambientstatus: (f = msg.getFrontendambientstatus()) && feobjects_feobjects_pb.FrontendAmbientStatus.toObject(includeInstance, f),
    inflights: (f = msg.getInflights()) && proto.clapi.Inflights.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.AmbientStatusPayload}
 */
proto.clapi.AmbientStatusPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.AmbientStatusPayload;
  return proto.clapi.AmbientStatusPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.AmbientStatusPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.AmbientStatusPayload}
 */
proto.clapi.AmbientStatusPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.BackendAmbientStatus;
      reader.readMessage(value,feobjects_feobjects_pb.BackendAmbientStatus.deserializeBinaryFromReader);
      msg.setBackendambientstatus(value);
      break;
    case 2:
      var value = new feobjects_feobjects_pb.FrontendAmbientStatus;
      reader.readMessage(value,feobjects_feobjects_pb.FrontendAmbientStatus.deserializeBinaryFromReader);
      msg.setFrontendambientstatus(value);
      break;
    case 3:
      var value = new proto.clapi.Inflights;
      reader.readMessage(value,proto.clapi.Inflights.deserializeBinaryFromReader);
      msg.setInflights(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.AmbientStatusPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.AmbientStatusPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.AmbientStatusPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientStatusPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackendambientstatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      feobjects_feobjects_pb.BackendAmbientStatus.serializeBinaryToWriter
    );
  }
  f = message.getFrontendambientstatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      feobjects_feobjects_pb.FrontendAmbientStatus.serializeBinaryToWriter
    );
  }
  f = message.getInflights();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.clapi.Inflights.serializeBinaryToWriter
    );
  }
};


/**
 * optional feobjects.BackendAmbientStatus BackendAmbientStatus = 1;
 * @return {?proto.feobjects.BackendAmbientStatus}
 */
proto.clapi.AmbientStatusPayload.prototype.getBackendambientstatus = function() {
  return /** @type{?proto.feobjects.BackendAmbientStatus} */ (
    jspb.Message.getWrapperField(this, feobjects_feobjects_pb.BackendAmbientStatus, 1));
};


/** @param {?proto.feobjects.BackendAmbientStatus|undefined} value */
proto.clapi.AmbientStatusPayload.prototype.setBackendambientstatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.clapi.AmbientStatusPayload.prototype.clearBackendambientstatus = function() {
  this.setBackendambientstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.AmbientStatusPayload.prototype.hasBackendambientstatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional feobjects.FrontendAmbientStatus FrontendAmbientStatus = 2;
 * @return {?proto.feobjects.FrontendAmbientStatus}
 */
proto.clapi.AmbientStatusPayload.prototype.getFrontendambientstatus = function() {
  return /** @type{?proto.feobjects.FrontendAmbientStatus} */ (
    jspb.Message.getWrapperField(this, feobjects_feobjects_pb.FrontendAmbientStatus, 2));
};


/** @param {?proto.feobjects.FrontendAmbientStatus|undefined} value */
proto.clapi.AmbientStatusPayload.prototype.setFrontendambientstatus = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.clapi.AmbientStatusPayload.prototype.clearFrontendambientstatus = function() {
  this.setFrontendambientstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.AmbientStatusPayload.prototype.hasFrontendambientstatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Inflights Inflights = 3;
 * @return {?proto.clapi.Inflights}
 */
proto.clapi.AmbientStatusPayload.prototype.getInflights = function() {
  return /** @type{?proto.clapi.Inflights} */ (
    jspb.Message.getWrapperField(this, proto.clapi.Inflights, 3));
};


/** @param {?proto.clapi.Inflights|undefined} value */
proto.clapi.AmbientStatusPayload.prototype.setInflights = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.clapi.AmbientStatusPayload.prototype.clearInflights = function() {
  this.setInflights(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.AmbientStatusPayload.prototype.hasInflights = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.AmbientStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.AmbientStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.AmbientStatusResponse.displayName = 'proto.clapi.AmbientStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.AmbientStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.AmbientStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.AmbientStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.AmbientStatusResponse}
 */
proto.clapi.AmbientStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.AmbientStatusResponse;
  return proto.clapi.AmbientStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.AmbientStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.AmbientStatusResponse}
 */
proto.clapi.AmbientStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.AmbientStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.AmbientStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.AmbientStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.AmbientLocalUserEntityPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.AmbientLocalUserEntityPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.AmbientLocalUserEntityPayload.displayName = 'proto.clapi.AmbientLocalUserEntityPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.AmbientLocalUserEntityPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.AmbientLocalUserEntityPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.AmbientLocalUserEntityPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientLocalUserEntityPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    localuserexists: jspb.Message.getFieldWithDefault(msg, 1, false),
    localuserentity: (f = msg.getLocaluserentity()) && feobjects_feobjects_pb.CompiledUserEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.AmbientLocalUserEntityPayload}
 */
proto.clapi.AmbientLocalUserEntityPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.AmbientLocalUserEntityPayload;
  return proto.clapi.AmbientLocalUserEntityPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.AmbientLocalUserEntityPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.AmbientLocalUserEntityPayload}
 */
proto.clapi.AmbientLocalUserEntityPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocaluserexists(value);
      break;
    case 2:
      var value = new feobjects_feobjects_pb.CompiledUserEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledUserEntity.deserializeBinaryFromReader);
      msg.setLocaluserentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.AmbientLocalUserEntityPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.AmbientLocalUserEntityPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.AmbientLocalUserEntityPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientLocalUserEntityPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocaluserexists();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getLocaluserentity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      feobjects_feobjects_pb.CompiledUserEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool LocalUserExists = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.clapi.AmbientLocalUserEntityPayload.prototype.getLocaluserexists = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.clapi.AmbientLocalUserEntityPayload.prototype.setLocaluserexists = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional feobjects.CompiledUserEntity LocalUserEntity = 2;
 * @return {?proto.feobjects.CompiledUserEntity}
 */
proto.clapi.AmbientLocalUserEntityPayload.prototype.getLocaluserentity = function() {
  return /** @type{?proto.feobjects.CompiledUserEntity} */ (
    jspb.Message.getWrapperField(this, feobjects_feobjects_pb.CompiledUserEntity, 2));
};


/** @param {?proto.feobjects.CompiledUserEntity|undefined} value */
proto.clapi.AmbientLocalUserEntityPayload.prototype.setLocaluserentity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.clapi.AmbientLocalUserEntityPayload.prototype.clearLocaluserentity = function() {
  this.setLocaluserentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.clapi.AmbientLocalUserEntityPayload.prototype.hasLocaluserentity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.AmbientLocalUserEntityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.AmbientLocalUserEntityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.AmbientLocalUserEntityResponse.displayName = 'proto.clapi.AmbientLocalUserEntityResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.AmbientLocalUserEntityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.AmbientLocalUserEntityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.AmbientLocalUserEntityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientLocalUserEntityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.AmbientLocalUserEntityResponse}
 */
proto.clapi.AmbientLocalUserEntityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.AmbientLocalUserEntityResponse;
  return proto.clapi.AmbientLocalUserEntityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.AmbientLocalUserEntityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.AmbientLocalUserEntityResponse}
 */
proto.clapi.AmbientLocalUserEntityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.AmbientLocalUserEntityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.AmbientLocalUserEntityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.AmbientLocalUserEntityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.AmbientLocalUserEntityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.HomeViewPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clapi.HomeViewPayload.repeatedFields_, null);
};
goog.inherits(proto.clapi.HomeViewPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.HomeViewPayload.displayName = 'proto.clapi.HomeViewPayload';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clapi.HomeViewPayload.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.HomeViewPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.HomeViewPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.HomeViewPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.HomeViewPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    feobjects_feobjects_pb.CompiledThreadEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.HomeViewPayload}
 */
proto.clapi.HomeViewPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.HomeViewPayload;
  return proto.clapi.HomeViewPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.HomeViewPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.HomeViewPayload}
 */
proto.clapi.HomeViewPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.CompiledThreadEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledThreadEntity.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.HomeViewPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.HomeViewPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.HomeViewPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.HomeViewPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      feobjects_feobjects_pb.CompiledThreadEntity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feobjects.CompiledThreadEntity Threads = 1;
 * @return {!Array.<!proto.feobjects.CompiledThreadEntity>}
 */
proto.clapi.HomeViewPayload.prototype.getThreadsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledThreadEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledThreadEntity, 1));
};


/** @param {!Array.<!proto.feobjects.CompiledThreadEntity>} value */
proto.clapi.HomeViewPayload.prototype.setThreadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feobjects.CompiledThreadEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledThreadEntity}
 */
proto.clapi.HomeViewPayload.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feobjects.CompiledThreadEntity, opt_index);
};


proto.clapi.HomeViewPayload.prototype.clearThreadsList = function() {
  this.setThreadsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.HomeViewResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.HomeViewResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.HomeViewResponse.displayName = 'proto.clapi.HomeViewResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.HomeViewResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.HomeViewResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.HomeViewResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.HomeViewResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.HomeViewResponse}
 */
proto.clapi.HomeViewResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.HomeViewResponse;
  return proto.clapi.HomeViewResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.HomeViewResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.HomeViewResponse}
 */
proto.clapi.HomeViewResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.HomeViewResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.HomeViewResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.HomeViewResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.HomeViewResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.PopularViewPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clapi.PopularViewPayload.repeatedFields_, null);
};
goog.inherits(proto.clapi.PopularViewPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.PopularViewPayload.displayName = 'proto.clapi.PopularViewPayload';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clapi.PopularViewPayload.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.PopularViewPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.PopularViewPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.PopularViewPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.PopularViewPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    feobjects_feobjects_pb.CompiledThreadEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.PopularViewPayload}
 */
proto.clapi.PopularViewPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.PopularViewPayload;
  return proto.clapi.PopularViewPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.PopularViewPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.PopularViewPayload}
 */
proto.clapi.PopularViewPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.CompiledThreadEntity;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledThreadEntity.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.PopularViewPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.PopularViewPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.PopularViewPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.PopularViewPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      feobjects_feobjects_pb.CompiledThreadEntity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated feobjects.CompiledThreadEntity Threads = 1;
 * @return {!Array.<!proto.feobjects.CompiledThreadEntity>}
 */
proto.clapi.PopularViewPayload.prototype.getThreadsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledThreadEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledThreadEntity, 1));
};


/** @param {!Array.<!proto.feobjects.CompiledThreadEntity>} value */
proto.clapi.PopularViewPayload.prototype.setThreadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feobjects.CompiledThreadEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledThreadEntity}
 */
proto.clapi.PopularViewPayload.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feobjects.CompiledThreadEntity, opt_index);
};


proto.clapi.PopularViewPayload.prototype.clearThreadsList = function() {
  this.setThreadsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.PopularViewResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.PopularViewResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.PopularViewResponse.displayName = 'proto.clapi.PopularViewResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.PopularViewResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.PopularViewResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.PopularViewResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.PopularViewResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.PopularViewResponse}
 */
proto.clapi.PopularViewResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.PopularViewResponse;
  return proto.clapi.PopularViewResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.PopularViewResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.PopularViewResponse}
 */
proto.clapi.PopularViewResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.PopularViewResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.PopularViewResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.PopularViewResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.PopularViewResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.NotificationsPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clapi.NotificationsPayload.repeatedFields_, null);
};
goog.inherits(proto.clapi.NotificationsPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.NotificationsPayload.displayName = 'proto.clapi.NotificationsPayload';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clapi.NotificationsPayload.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.NotificationsPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.NotificationsPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.NotificationsPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.NotificationsPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationsList: jspb.Message.toObjectList(msg.getNotificationsList(),
    feobjects_feobjects_pb.CompiledNotification.toObject, includeInstance),
    lastseen: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.NotificationsPayload}
 */
proto.clapi.NotificationsPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.NotificationsPayload;
  return proto.clapi.NotificationsPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.NotificationsPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.NotificationsPayload}
 */
proto.clapi.NotificationsPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new feobjects_feobjects_pb.CompiledNotification;
      reader.readMessage(value,feobjects_feobjects_pb.CompiledNotification.deserializeBinaryFromReader);
      msg.addNotifications(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastseen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.NotificationsPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.NotificationsPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.NotificationsPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.NotificationsPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      feobjects_feobjects_pb.CompiledNotification.serializeBinaryToWriter
    );
  }
  f = message.getLastseen();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated feobjects.CompiledNotification Notifications = 1;
 * @return {!Array.<!proto.feobjects.CompiledNotification>}
 */
proto.clapi.NotificationsPayload.prototype.getNotificationsList = function() {
  return /** @type{!Array.<!proto.feobjects.CompiledNotification>} */ (
    jspb.Message.getRepeatedWrapperField(this, feobjects_feobjects_pb.CompiledNotification, 1));
};


/** @param {!Array.<!proto.feobjects.CompiledNotification>} value */
proto.clapi.NotificationsPayload.prototype.setNotificationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feobjects.CompiledNotification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feobjects.CompiledNotification}
 */
proto.clapi.NotificationsPayload.prototype.addNotifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feobjects.CompiledNotification, opt_index);
};


proto.clapi.NotificationsPayload.prototype.clearNotificationsList = function() {
  this.setNotificationsList([]);
};


/**
 * optional int64 LastSeen = 2;
 * @return {number}
 */
proto.clapi.NotificationsPayload.prototype.getLastseen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.clapi.NotificationsPayload.prototype.setLastseen = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.NotificationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.NotificationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.NotificationsResponse.displayName = 'proto.clapi.NotificationsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.NotificationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.NotificationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.NotificationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.NotificationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.NotificationsResponse}
 */
proto.clapi.NotificationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.NotificationsResponse;
  return proto.clapi.NotificationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.NotificationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.NotificationsResponse}
 */
proto.clapi.NotificationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.NotificationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.NotificationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.NotificationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.NotificationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.OnboardCompleteStatusPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.OnboardCompleteStatusPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.OnboardCompleteStatusPayload.displayName = 'proto.clapi.OnboardCompleteStatusPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.OnboardCompleteStatusPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.OnboardCompleteStatusPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.OnboardCompleteStatusPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.OnboardCompleteStatusPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    onboardcomplete: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.OnboardCompleteStatusPayload}
 */
proto.clapi.OnboardCompleteStatusPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.OnboardCompleteStatusPayload;
  return proto.clapi.OnboardCompleteStatusPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.OnboardCompleteStatusPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.OnboardCompleteStatusPayload}
 */
proto.clapi.OnboardCompleteStatusPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnboardcomplete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.OnboardCompleteStatusPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.OnboardCompleteStatusPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.OnboardCompleteStatusPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.OnboardCompleteStatusPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnboardcomplete();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool OnboardComplete = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.clapi.OnboardCompleteStatusPayload.prototype.getOnboardcomplete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.clapi.OnboardCompleteStatusPayload.prototype.setOnboardcomplete = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.OnboardCompleteStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.OnboardCompleteStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.OnboardCompleteStatusResponse.displayName = 'proto.clapi.OnboardCompleteStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.OnboardCompleteStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.OnboardCompleteStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.OnboardCompleteStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.OnboardCompleteStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.OnboardCompleteStatusResponse}
 */
proto.clapi.OnboardCompleteStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.OnboardCompleteStatusResponse;
  return proto.clapi.OnboardCompleteStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.OnboardCompleteStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.OnboardCompleteStatusResponse}
 */
proto.clapi.OnboardCompleteStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.OnboardCompleteStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.OnboardCompleteStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.OnboardCompleteStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.OnboardCompleteStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.ModModeEnabledStatusPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.ModModeEnabledStatusPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.ModModeEnabledStatusPayload.displayName = 'proto.clapi.ModModeEnabledStatusPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.ModModeEnabledStatusPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.ModModeEnabledStatusPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.ModModeEnabledStatusPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.ModModeEnabledStatusPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    modmodeenabled: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.ModModeEnabledStatusPayload}
 */
proto.clapi.ModModeEnabledStatusPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.ModModeEnabledStatusPayload;
  return proto.clapi.ModModeEnabledStatusPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.ModModeEnabledStatusPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.ModModeEnabledStatusPayload}
 */
proto.clapi.ModModeEnabledStatusPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setModmodeenabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.ModModeEnabledStatusPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.ModModeEnabledStatusPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.ModModeEnabledStatusPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.ModModeEnabledStatusPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModmodeenabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ModModeEnabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.clapi.ModModeEnabledStatusPayload.prototype.getModmodeenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.clapi.ModModeEnabledStatusPayload.prototype.setModmodeenabled = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clapi.ModModeEnabledStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clapi.ModModeEnabledStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.clapi.ModModeEnabledStatusResponse.displayName = 'proto.clapi.ModModeEnabledStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clapi.ModModeEnabledStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clapi.ModModeEnabledStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clapi.ModModeEnabledStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.ModModeEnabledStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clapi.ModModeEnabledStatusResponse}
 */
proto.clapi.ModModeEnabledStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clapi.ModModeEnabledStatusResponse;
  return proto.clapi.ModModeEnabledStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clapi.ModModeEnabledStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clapi.ModModeEnabledStatusResponse}
 */
proto.clapi.ModModeEnabledStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clapi.ModModeEnabledStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clapi.ModModeEnabledStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clapi.ModModeEnabledStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clapi.ModModeEnabledStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.clapi);
