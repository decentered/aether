/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.structprotos.Address', null, global);
goog.exportSymbol('proto.structprotos.Board', null, global);
goog.exportSymbol('proto.structprotos.BoardOwner', null, global);
goog.exportSymbol('proto.structprotos.Client', null, global);
goog.exportSymbol('proto.structprotos.Key', null, global);
goog.exportSymbol('proto.structprotos.Post', null, global);
goog.exportSymbol('proto.structprotos.Protocol', null, global);
goog.exportSymbol('proto.structprotos.Provable', null, global);
goog.exportSymbol('proto.structprotos.Subprotocol', null, global);
goog.exportSymbol('proto.structprotos.Thread', null, global);
goog.exportSymbol('proto.structprotos.Truststate', null, global);
goog.exportSymbol('proto.structprotos.Updateable', null, global);
goog.exportSymbol('proto.structprotos.Vote', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Provable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Provable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Provable.displayName = 'proto.structprotos.Provable';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Provable.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Provable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Provable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Provable.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    creation: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proofofwork: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Provable}
 */
proto.structprotos.Provable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Provable;
  return proto.structprotos.Provable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Provable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Provable}
 */
proto.structprotos.Provable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofofwork(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Provable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Provable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Provable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Provable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreation();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getProofofwork();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string Fingerprint = 1;
 * @return {string}
 */
proto.structprotos.Provable.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.structprotos.Provable.prototype.setFingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 Creation = 2;
 * @return {number}
 */
proto.structprotos.Provable.prototype.getCreation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.structprotos.Provable.prototype.setCreation = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ProofOfWork = 3;
 * @return {string}
 */
proto.structprotos.Provable.prototype.getProofofwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.structprotos.Provable.prototype.setProofofwork = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Signature = 4;
 * @return {string}
 */
proto.structprotos.Provable.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.structprotos.Provable.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Updateable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Updateable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Updateable.displayName = 'proto.structprotos.Updateable';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Updateable.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Updateable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Updateable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Updateable.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastupdate: jspb.Message.getFieldWithDefault(msg, 1, 0),
    updateproofofwork: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatesignature: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Updateable}
 */
proto.structprotos.Updateable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Updateable;
  return proto.structprotos.Updateable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Updateable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Updateable}
 */
proto.structprotos.Updateable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastupdate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateproofofwork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatesignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Updateable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Updateable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Updateable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Updateable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastupdate();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUpdateproofofwork();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatesignature();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 LastUpdate = 1;
 * @return {number}
 */
proto.structprotos.Updateable.prototype.getLastupdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.structprotos.Updateable.prototype.setLastupdate = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string UpdateProofOfWork = 2;
 * @return {string}
 */
proto.structprotos.Updateable.prototype.getUpdateproofofwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.structprotos.Updateable.prototype.setUpdateproofofwork = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string UpdateSignature = 3;
 * @return {string}
 */
proto.structprotos.Updateable.prototype.getUpdatesignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.structprotos.Updateable.prototype.setUpdatesignature = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.BoardOwner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.BoardOwner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.BoardOwner.displayName = 'proto.structprotos.BoardOwner';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.BoardOwner.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.BoardOwner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.BoardOwner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.BoardOwner.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyfingerprint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiry: jspb.Message.getFieldWithDefault(msg, 2, 0),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.BoardOwner}
 */
proto.structprotos.BoardOwner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.BoardOwner;
  return proto.structprotos.BoardOwner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.BoardOwner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.BoardOwner}
 */
proto.structprotos.BoardOwner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyfingerprint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiry(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.BoardOwner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.BoardOwner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.BoardOwner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.BoardOwner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyfingerprint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiry();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string KeyFingerprint = 1;
 * @return {string}
 */
proto.structprotos.BoardOwner.prototype.getKeyfingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.structprotos.BoardOwner.prototype.setKeyfingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 Expiry = 2;
 * @return {number}
 */
proto.structprotos.BoardOwner.prototype.getExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.structprotos.BoardOwner.prototype.setExpiry = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 Level = 3;
 * @return {number}
 */
proto.structprotos.BoardOwner.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.structprotos.BoardOwner.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Board = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.structprotos.Board.repeatedFields_, null);
};
goog.inherits(proto.structprotos.Board, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Board.displayName = 'proto.structprotos.Board';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.structprotos.Board.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Board.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Board.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Board} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Board.toObject = function(includeInstance, msg) {
  var f, obj = {
    provable: (f = msg.getProvable()) && proto.structprotos.Provable.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    boardownersList: jspb.Message.toObjectList(msg.getBoardownersList(),
    proto.structprotos.BoardOwner.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ownerpublickey: jspb.Message.getFieldWithDefault(msg, 6, ""),
    entityversion: jspb.Message.getFieldWithDefault(msg, 7, 0),
    language: jspb.Message.getFieldWithDefault(msg, 8, ""),
    meta: jspb.Message.getFieldWithDefault(msg, 9, ""),
    realmid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    encrcontent: jspb.Message.getFieldWithDefault(msg, 11, ""),
    updateable: (f = msg.getUpdateable()) && proto.structprotos.Updateable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Board}
 */
proto.structprotos.Board.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Board;
  return proto.structprotos.Board.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Board} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Board}
 */
proto.structprotos.Board.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.structprotos.Provable;
      reader.readMessage(value,proto.structprotos.Provable.deserializeBinaryFromReader);
      msg.setProvable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.structprotos.BoardOwner;
      reader.readMessage(value,proto.structprotos.BoardOwner.deserializeBinaryFromReader);
      msg.addBoardowners(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerpublickey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityversion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealmid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncrcontent(value);
      break;
    case 12:
      var value = new proto.structprotos.Updateable;
      reader.readMessage(value,proto.structprotos.Updateable.deserializeBinaryFromReader);
      msg.setUpdateable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Board.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Board.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Board} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Board.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.structprotos.Provable.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBoardownersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.structprotos.BoardOwner.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwnerpublickey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEntityversion();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMeta();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRealmid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getEncrcontent();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUpdateable();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.structprotos.Updateable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Provable Provable = 1;
 * @return {?proto.structprotos.Provable}
 */
proto.structprotos.Board.prototype.getProvable = function() {
  return /** @type{?proto.structprotos.Provable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Provable, 1));
};


/** @param {?proto.structprotos.Provable|undefined} value */
proto.structprotos.Board.prototype.setProvable = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.structprotos.Board.prototype.clearProvable = function() {
  this.setProvable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Board.prototype.hasProvable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.structprotos.Board.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.structprotos.Board.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated BoardOwner BoardOwners = 3;
 * @return {!Array.<!proto.structprotos.BoardOwner>}
 */
proto.structprotos.Board.prototype.getBoardownersList = function() {
  return /** @type{!Array.<!proto.structprotos.BoardOwner>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.structprotos.BoardOwner, 3));
};


/** @param {!Array.<!proto.structprotos.BoardOwner>} value */
proto.structprotos.Board.prototype.setBoardownersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.structprotos.BoardOwner=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.BoardOwner}
 */
proto.structprotos.Board.prototype.addBoardowners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.structprotos.BoardOwner, opt_index);
};


proto.structprotos.Board.prototype.clearBoardownersList = function() {
  this.setBoardownersList([]);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.structprotos.Board.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.structprotos.Board.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Owner = 5;
 * @return {string}
 */
proto.structprotos.Board.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.structprotos.Board.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string OwnerPublicKey = 6;
 * @return {string}
 */
proto.structprotos.Board.prototype.getOwnerpublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.structprotos.Board.prototype.setOwnerpublickey = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 EntityVersion = 7;
 * @return {number}
 */
proto.structprotos.Board.prototype.getEntityversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.structprotos.Board.prototype.setEntityversion = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string Language = 8;
 * @return {string}
 */
proto.structprotos.Board.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.structprotos.Board.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string Meta = 9;
 * @return {string}
 */
proto.structprotos.Board.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.structprotos.Board.prototype.setMeta = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string RealmId = 10;
 * @return {string}
 */
proto.structprotos.Board.prototype.getRealmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.structprotos.Board.prototype.setRealmid = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string EncrContent = 11;
 * @return {string}
 */
proto.structprotos.Board.prototype.getEncrcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.structprotos.Board.prototype.setEncrcontent = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional Updateable Updateable = 12;
 * @return {?proto.structprotos.Updateable}
 */
proto.structprotos.Board.prototype.getUpdateable = function() {
  return /** @type{?proto.structprotos.Updateable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Updateable, 12));
};


/** @param {?proto.structprotos.Updateable|undefined} value */
proto.structprotos.Board.prototype.setUpdateable = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.structprotos.Board.prototype.clearUpdateable = function() {
  this.setUpdateable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Board.prototype.hasUpdateable = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Thread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Thread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Thread.displayName = 'proto.structprotos.Thread';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Thread.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Thread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Thread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Thread.toObject = function(includeInstance, msg) {
  var f, obj = {
    provable: (f = msg.getProvable()) && proto.structprotos.Provable.toObject(includeInstance, f),
    board: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    body: jspb.Message.getFieldWithDefault(msg, 4, ""),
    link: jspb.Message.getFieldWithDefault(msg, 5, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ownerpublickey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    entityversion: jspb.Message.getFieldWithDefault(msg, 8, 0),
    meta: jspb.Message.getFieldWithDefault(msg, 9, ""),
    realmid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    encrcontent: jspb.Message.getFieldWithDefault(msg, 11, ""),
    updateable: (f = msg.getUpdateable()) && proto.structprotos.Updateable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Thread}
 */
proto.structprotos.Thread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Thread;
  return proto.structprotos.Thread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Thread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Thread}
 */
proto.structprotos.Thread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.structprotos.Provable;
      reader.readMessage(value,proto.structprotos.Provable.deserializeBinaryFromReader);
      msg.setProvable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoard(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerpublickey(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityversion(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealmid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncrcontent(value);
      break;
    case 12:
      var value = new proto.structprotos.Updateable;
      reader.readMessage(value,proto.structprotos.Updateable.deserializeBinaryFromReader);
      msg.setUpdateable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Thread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Thread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Thread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Thread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.structprotos.Provable.serializeBinaryToWriter
    );
  }
  f = message.getBoard();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOwnerpublickey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEntityversion();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMeta();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRealmid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getEncrcontent();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUpdateable();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.structprotos.Updateable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Provable Provable = 1;
 * @return {?proto.structprotos.Provable}
 */
proto.structprotos.Thread.prototype.getProvable = function() {
  return /** @type{?proto.structprotos.Provable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Provable, 1));
};


/** @param {?proto.structprotos.Provable|undefined} value */
proto.structprotos.Thread.prototype.setProvable = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.structprotos.Thread.prototype.clearProvable = function() {
  this.setProvable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Thread.prototype.hasProvable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Board = 2;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getBoard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setBoard = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Name = 3;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Body = 4;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setBody = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Link = 5;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setLink = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string Owner = 6;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string OwnerPublicKey = 7;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getOwnerpublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setOwnerpublickey = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 EntityVersion = 8;
 * @return {number}
 */
proto.structprotos.Thread.prototype.getEntityversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.structprotos.Thread.prototype.setEntityversion = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string Meta = 9;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setMeta = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string RealmId = 10;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getRealmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setRealmid = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string EncrContent = 11;
 * @return {string}
 */
proto.structprotos.Thread.prototype.getEncrcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.structprotos.Thread.prototype.setEncrcontent = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional Updateable Updateable = 12;
 * @return {?proto.structprotos.Updateable}
 */
proto.structprotos.Thread.prototype.getUpdateable = function() {
  return /** @type{?proto.structprotos.Updateable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Updateable, 12));
};


/** @param {?proto.structprotos.Updateable|undefined} value */
proto.structprotos.Thread.prototype.setUpdateable = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.structprotos.Thread.prototype.clearUpdateable = function() {
  this.setUpdateable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Thread.prototype.hasUpdateable = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Post = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Post, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Post.displayName = 'proto.structprotos.Post';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Post.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Post.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Post} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Post.toObject = function(includeInstance, msg) {
  var f, obj = {
    provable: (f = msg.getProvable()) && proto.structprotos.Provable.toObject(includeInstance, f),
    board: jspb.Message.getFieldWithDefault(msg, 2, ""),
    thread: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parent: jspb.Message.getFieldWithDefault(msg, 4, ""),
    body: jspb.Message.getFieldWithDefault(msg, 5, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ownerpublickey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    entityversion: jspb.Message.getFieldWithDefault(msg, 8, 0),
    meta: jspb.Message.getFieldWithDefault(msg, 9, ""),
    realmid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    encrcontent: jspb.Message.getFieldWithDefault(msg, 11, ""),
    updateable: (f = msg.getUpdateable()) && proto.structprotos.Updateable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Post}
 */
proto.structprotos.Post.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Post;
  return proto.structprotos.Post.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Post} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Post}
 */
proto.structprotos.Post.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.structprotos.Provable;
      reader.readMessage(value,proto.structprotos.Provable.deserializeBinaryFromReader);
      msg.setProvable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoard(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThread(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerpublickey(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityversion(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealmid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncrcontent(value);
      break;
    case 12:
      var value = new proto.structprotos.Updateable;
      reader.readMessage(value,proto.structprotos.Updateable.deserializeBinaryFromReader);
      msg.setUpdateable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Post.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Post.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Post} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Post.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.structprotos.Provable.serializeBinaryToWriter
    );
  }
  f = message.getBoard();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThread();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOwnerpublickey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEntityversion();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMeta();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRealmid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getEncrcontent();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUpdateable();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.structprotos.Updateable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Provable Provable = 1;
 * @return {?proto.structprotos.Provable}
 */
proto.structprotos.Post.prototype.getProvable = function() {
  return /** @type{?proto.structprotos.Provable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Provable, 1));
};


/** @param {?proto.structprotos.Provable|undefined} value */
proto.structprotos.Post.prototype.setProvable = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.structprotos.Post.prototype.clearProvable = function() {
  this.setProvable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Post.prototype.hasProvable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Board = 2;
 * @return {string}
 */
proto.structprotos.Post.prototype.getBoard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setBoard = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Thread = 3;
 * @return {string}
 */
proto.structprotos.Post.prototype.getThread = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setThread = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Parent = 4;
 * @return {string}
 */
proto.structprotos.Post.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setParent = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Body = 5;
 * @return {string}
 */
proto.structprotos.Post.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setBody = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string Owner = 6;
 * @return {string}
 */
proto.structprotos.Post.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string OwnerPublicKey = 7;
 * @return {string}
 */
proto.structprotos.Post.prototype.getOwnerpublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setOwnerpublickey = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 EntityVersion = 8;
 * @return {number}
 */
proto.structprotos.Post.prototype.getEntityversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.structprotos.Post.prototype.setEntityversion = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string Meta = 9;
 * @return {string}
 */
proto.structprotos.Post.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setMeta = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string RealmId = 10;
 * @return {string}
 */
proto.structprotos.Post.prototype.getRealmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setRealmid = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string EncrContent = 11;
 * @return {string}
 */
proto.structprotos.Post.prototype.getEncrcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.structprotos.Post.prototype.setEncrcontent = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional Updateable Updateable = 12;
 * @return {?proto.structprotos.Updateable}
 */
proto.structprotos.Post.prototype.getUpdateable = function() {
  return /** @type{?proto.structprotos.Updateable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Updateable, 12));
};


/** @param {?proto.structprotos.Updateable|undefined} value */
proto.structprotos.Post.prototype.setUpdateable = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.structprotos.Post.prototype.clearUpdateable = function() {
  this.setUpdateable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Post.prototype.hasUpdateable = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Vote.displayName = 'proto.structprotos.Vote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    provable: (f = msg.getProvable()) && proto.structprotos.Provable.toObject(includeInstance, f),
    board: jspb.Message.getFieldWithDefault(msg, 2, ""),
    thread: jspb.Message.getFieldWithDefault(msg, 3, ""),
    target: jspb.Message.getFieldWithDefault(msg, 4, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ownerpublickey: jspb.Message.getFieldWithDefault(msg, 6, ""),
    typeclass: jspb.Message.getFieldWithDefault(msg, 7, 0),
    type: jspb.Message.getFieldWithDefault(msg, 8, 0),
    entityversion: jspb.Message.getFieldWithDefault(msg, 9, 0),
    meta: jspb.Message.getFieldWithDefault(msg, 10, ""),
    realmid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    encrcontent: jspb.Message.getFieldWithDefault(msg, 12, ""),
    updateable: (f = msg.getUpdateable()) && proto.structprotos.Updateable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Vote}
 */
proto.structprotos.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Vote;
  return proto.structprotos.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Vote}
 */
proto.structprotos.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.structprotos.Provable;
      reader.readMessage(value,proto.structprotos.Provable.deserializeBinaryFromReader);
      msg.setProvable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoard(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThread(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerpublickey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeclass(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityversion(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealmid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncrcontent(value);
      break;
    case 13:
      var value = new proto.structprotos.Updateable;
      reader.readMessage(value,proto.structprotos.Updateable.deserializeBinaryFromReader);
      msg.setUpdateable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.structprotos.Provable.serializeBinaryToWriter
    );
  }
  f = message.getBoard();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThread();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwnerpublickey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTypeclass();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getEntityversion();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMeta();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRealmid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getEncrcontent();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getUpdateable();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.structprotos.Updateable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Provable Provable = 1;
 * @return {?proto.structprotos.Provable}
 */
proto.structprotos.Vote.prototype.getProvable = function() {
  return /** @type{?proto.structprotos.Provable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Provable, 1));
};


/** @param {?proto.structprotos.Provable|undefined} value */
proto.structprotos.Vote.prototype.setProvable = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.structprotos.Vote.prototype.clearProvable = function() {
  this.setProvable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Vote.prototype.hasProvable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Board = 2;
 * @return {string}
 */
proto.structprotos.Vote.prototype.getBoard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.structprotos.Vote.prototype.setBoard = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Thread = 3;
 * @return {string}
 */
proto.structprotos.Vote.prototype.getThread = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.structprotos.Vote.prototype.setThread = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Target = 4;
 * @return {string}
 */
proto.structprotos.Vote.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.structprotos.Vote.prototype.setTarget = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Owner = 5;
 * @return {string}
 */
proto.structprotos.Vote.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.structprotos.Vote.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string OwnerPublicKey = 6;
 * @return {string}
 */
proto.structprotos.Vote.prototype.getOwnerpublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.structprotos.Vote.prototype.setOwnerpublickey = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 TypeClass = 7;
 * @return {number}
 */
proto.structprotos.Vote.prototype.getTypeclass = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.structprotos.Vote.prototype.setTypeclass = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 Type = 8;
 * @return {number}
 */
proto.structprotos.Vote.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.structprotos.Vote.prototype.setType = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 EntityVersion = 9;
 * @return {number}
 */
proto.structprotos.Vote.prototype.getEntityversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.structprotos.Vote.prototype.setEntityversion = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string Meta = 10;
 * @return {string}
 */
proto.structprotos.Vote.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.structprotos.Vote.prototype.setMeta = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string RealmId = 11;
 * @return {string}
 */
proto.structprotos.Vote.prototype.getRealmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.structprotos.Vote.prototype.setRealmid = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string EncrContent = 12;
 * @return {string}
 */
proto.structprotos.Vote.prototype.getEncrcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.structprotos.Vote.prototype.setEncrcontent = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional Updateable Updateable = 13;
 * @return {?proto.structprotos.Updateable}
 */
proto.structprotos.Vote.prototype.getUpdateable = function() {
  return /** @type{?proto.structprotos.Updateable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Updateable, 13));
};


/** @param {?proto.structprotos.Updateable|undefined} value */
proto.structprotos.Vote.prototype.setUpdateable = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.structprotos.Vote.prototype.clearUpdateable = function() {
  this.setUpdateable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Vote.prototype.hasUpdateable = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Key.displayName = 'proto.structprotos.Key';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    provable: (f = msg.getProvable()) && proto.structprotos.Provable.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expiry: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    info: jspb.Message.getFieldWithDefault(msg, 6, ""),
    entityversion: jspb.Message.getFieldWithDefault(msg, 7, 0),
    meta: jspb.Message.getFieldWithDefault(msg, 8, ""),
    realmid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    encrcontent: jspb.Message.getFieldWithDefault(msg, 10, ""),
    updateable: (f = msg.getUpdateable()) && proto.structprotos.Updateable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Key}
 */
proto.structprotos.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Key;
  return proto.structprotos.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Key}
 */
proto.structprotos.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.structprotos.Provable;
      reader.readMessage(value,proto.structprotos.Provable.deserializeBinaryFromReader);
      msg.setProvable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiry(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityversion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealmid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncrcontent(value);
      break;
    case 11:
      var value = new proto.structprotos.Updateable;
      reader.readMessage(value,proto.structprotos.Updateable.deserializeBinaryFromReader);
      msg.setUpdateable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.structprotos.Provable.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpiry();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEntityversion();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMeta();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRealmid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getEncrcontent();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getUpdateable();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.structprotos.Updateable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Provable Provable = 1;
 * @return {?proto.structprotos.Provable}
 */
proto.structprotos.Key.prototype.getProvable = function() {
  return /** @type{?proto.structprotos.Provable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Provable, 1));
};


/** @param {?proto.structprotos.Provable|undefined} value */
proto.structprotos.Key.prototype.setProvable = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.structprotos.Key.prototype.clearProvable = function() {
  this.setProvable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Key.prototype.hasProvable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.structprotos.Key.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.structprotos.Key.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Key = 3;
 * @return {string}
 */
proto.structprotos.Key.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.structprotos.Key.prototype.setKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 Expiry = 4;
 * @return {number}
 */
proto.structprotos.Key.prototype.getExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.structprotos.Key.prototype.setExpiry = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Name = 5;
 * @return {string}
 */
proto.structprotos.Key.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.structprotos.Key.prototype.setName = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string Info = 6;
 * @return {string}
 */
proto.structprotos.Key.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.structprotos.Key.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 EntityVersion = 7;
 * @return {number}
 */
proto.structprotos.Key.prototype.getEntityversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.structprotos.Key.prototype.setEntityversion = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string Meta = 8;
 * @return {string}
 */
proto.structprotos.Key.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.structprotos.Key.prototype.setMeta = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string RealmId = 9;
 * @return {string}
 */
proto.structprotos.Key.prototype.getRealmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.structprotos.Key.prototype.setRealmid = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string EncrContent = 10;
 * @return {string}
 */
proto.structprotos.Key.prototype.getEncrcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.structprotos.Key.prototype.setEncrcontent = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional Updateable Updateable = 11;
 * @return {?proto.structprotos.Updateable}
 */
proto.structprotos.Key.prototype.getUpdateable = function() {
  return /** @type{?proto.structprotos.Updateable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Updateable, 11));
};


/** @param {?proto.structprotos.Updateable|undefined} value */
proto.structprotos.Key.prototype.setUpdateable = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.structprotos.Key.prototype.clearUpdateable = function() {
  this.setUpdateable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Key.prototype.hasUpdateable = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Truststate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Truststate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Truststate.displayName = 'proto.structprotos.Truststate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Truststate.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Truststate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Truststate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Truststate.toObject = function(includeInstance, msg) {
  var f, obj = {
    provable: (f = msg.getProvable()) && proto.structprotos.Provable.toObject(includeInstance, f),
    target: jspb.Message.getFieldWithDefault(msg, 2, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ownerpublickey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    typeclass: jspb.Message.getFieldWithDefault(msg, 5, 0),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    domain: jspb.Message.getFieldWithDefault(msg, 7, ""),
    expiry: jspb.Message.getFieldWithDefault(msg, 8, 0),
    entityversion: jspb.Message.getFieldWithDefault(msg, 9, 0),
    meta: jspb.Message.getFieldWithDefault(msg, 10, ""),
    realmid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    encrcontent: jspb.Message.getFieldWithDefault(msg, 12, ""),
    updateable: (f = msg.getUpdateable()) && proto.structprotos.Updateable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Truststate}
 */
proto.structprotos.Truststate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Truststate;
  return proto.structprotos.Truststate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Truststate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Truststate}
 */
proto.structprotos.Truststate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.structprotos.Provable;
      reader.readMessage(value,proto.structprotos.Provable.deserializeBinaryFromReader);
      msg.setProvable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerpublickey(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeclass(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiry(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityversion(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealmid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncrcontent(value);
      break;
    case 13:
      var value = new proto.structprotos.Updateable;
      reader.readMessage(value,proto.structprotos.Updateable.deserializeBinaryFromReader);
      msg.setUpdateable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Truststate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Truststate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Truststate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Truststate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.structprotos.Provable.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwnerpublickey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTypeclass();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getExpiry();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getEntityversion();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMeta();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRealmid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getEncrcontent();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getUpdateable();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.structprotos.Updateable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Provable Provable = 1;
 * @return {?proto.structprotos.Provable}
 */
proto.structprotos.Truststate.prototype.getProvable = function() {
  return /** @type{?proto.structprotos.Provable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Provable, 1));
};


/** @param {?proto.structprotos.Provable|undefined} value */
proto.structprotos.Truststate.prototype.setProvable = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.structprotos.Truststate.prototype.clearProvable = function() {
  this.setProvable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Truststate.prototype.hasProvable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Target = 2;
 * @return {string}
 */
proto.structprotos.Truststate.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.structprotos.Truststate.prototype.setTarget = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Owner = 3;
 * @return {string}
 */
proto.structprotos.Truststate.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.structprotos.Truststate.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string OwnerPublicKey = 4;
 * @return {string}
 */
proto.structprotos.Truststate.prototype.getOwnerpublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.structprotos.Truststate.prototype.setOwnerpublickey = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 TypeClass = 5;
 * @return {number}
 */
proto.structprotos.Truststate.prototype.getTypeclass = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.structprotos.Truststate.prototype.setTypeclass = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 Type = 6;
 * @return {number}
 */
proto.structprotos.Truststate.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.structprotos.Truststate.prototype.setType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Domain = 7;
 * @return {string}
 */
proto.structprotos.Truststate.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.structprotos.Truststate.prototype.setDomain = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 Expiry = 8;
 * @return {number}
 */
proto.structprotos.Truststate.prototype.getExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.structprotos.Truststate.prototype.setExpiry = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 EntityVersion = 9;
 * @return {number}
 */
proto.structprotos.Truststate.prototype.getEntityversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.structprotos.Truststate.prototype.setEntityversion = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string Meta = 10;
 * @return {string}
 */
proto.structprotos.Truststate.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.structprotos.Truststate.prototype.setMeta = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string RealmId = 11;
 * @return {string}
 */
proto.structprotos.Truststate.prototype.getRealmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.structprotos.Truststate.prototype.setRealmid = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string EncrContent = 12;
 * @return {string}
 */
proto.structprotos.Truststate.prototype.getEncrcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.structprotos.Truststate.prototype.setEncrcontent = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional Updateable Updateable = 13;
 * @return {?proto.structprotos.Updateable}
 */
proto.structprotos.Truststate.prototype.getUpdateable = function() {
  return /** @type{?proto.structprotos.Updateable} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Updateable, 13));
};


/** @param {?proto.structprotos.Updateable|undefined} value */
proto.structprotos.Truststate.prototype.setUpdateable = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.structprotos.Truststate.prototype.clearUpdateable = function() {
  this.setUpdateable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Truststate.prototype.hasUpdateable = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Address.displayName = 'proto.structprotos.Address';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sublocation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    locationtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastsuccessfulping: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastsuccessfulsync: jspb.Message.getFieldWithDefault(msg, 6, 0),
    protocol: (f = msg.getProtocol()) && proto.structprotos.Protocol.toObject(includeInstance, f),
    client: (f = msg.getClient()) && proto.structprotos.Client.toObject(includeInstance, f),
    entityversion: jspb.Message.getFieldWithDefault(msg, 9, 0),
    realmid: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Address}
 */
proto.structprotos.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Address;
  return proto.structprotos.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Address}
 */
proto.structprotos.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSublocation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLocationtype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastsuccessfulping(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastsuccessfulsync(value);
      break;
    case 7:
      var value = new proto.structprotos.Protocol;
      reader.readMessage(value,proto.structprotos.Protocol.deserializeBinaryFromReader);
      msg.setProtocol(value);
      break;
    case 8:
      var value = new proto.structprotos.Client;
      reader.readMessage(value,proto.structprotos.Client.deserializeBinaryFromReader);
      msg.setClient(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityversion(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealmid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSublocation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocationtype();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLastsuccessfulping();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLastsuccessfulsync();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getProtocol();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.structprotos.Protocol.serializeBinaryToWriter
    );
  }
  f = message.getClient();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.structprotos.Client.serializeBinaryToWriter
    );
  }
  f = message.getEntityversion();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getRealmid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string Location = 1;
 * @return {string}
 */
proto.structprotos.Address.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.structprotos.Address.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Sublocation = 2;
 * @return {string}
 */
proto.structprotos.Address.prototype.getSublocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.structprotos.Address.prototype.setSublocation = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 LocationType = 3;
 * @return {number}
 */
proto.structprotos.Address.prototype.getLocationtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.structprotos.Address.prototype.setLocationtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 Port = 4;
 * @return {number}
 */
proto.structprotos.Address.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.structprotos.Address.prototype.setPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 LastSuccessfulPing = 5;
 * @return {number}
 */
proto.structprotos.Address.prototype.getLastsuccessfulping = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.structprotos.Address.prototype.setLastsuccessfulping = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 LastSuccessfulSync = 6;
 * @return {number}
 */
proto.structprotos.Address.prototype.getLastsuccessfulsync = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.structprotos.Address.prototype.setLastsuccessfulsync = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional Protocol Protocol = 7;
 * @return {?proto.structprotos.Protocol}
 */
proto.structprotos.Address.prototype.getProtocol = function() {
  return /** @type{?proto.structprotos.Protocol} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Protocol, 7));
};


/** @param {?proto.structprotos.Protocol|undefined} value */
proto.structprotos.Address.prototype.setProtocol = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.structprotos.Address.prototype.clearProtocol = function() {
  this.setProtocol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Address.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Client Client = 8;
 * @return {?proto.structprotos.Client}
 */
proto.structprotos.Address.prototype.getClient = function() {
  return /** @type{?proto.structprotos.Client} */ (
    jspb.Message.getWrapperField(this, proto.structprotos.Client, 8));
};


/** @param {?proto.structprotos.Client|undefined} value */
proto.structprotos.Address.prototype.setClient = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.structprotos.Address.prototype.clearClient = function() {
  this.setClient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.structprotos.Address.prototype.hasClient = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 EntityVersion = 9;
 * @return {number}
 */
proto.structprotos.Address.prototype.getEntityversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.structprotos.Address.prototype.setEntityversion = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string RealmId = 10;
 * @return {string}
 */
proto.structprotos.Address.prototype.getRealmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.structprotos.Address.prototype.setRealmid = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Subprotocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.structprotos.Subprotocol.repeatedFields_, null);
};
goog.inherits(proto.structprotos.Subprotocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Subprotocol.displayName = 'proto.structprotos.Subprotocol';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.structprotos.Subprotocol.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Subprotocol.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Subprotocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Subprotocol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Subprotocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    versionmajor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    versionminor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    supportedentitiesList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Subprotocol}
 */
proto.structprotos.Subprotocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Subprotocol;
  return proto.structprotos.Subprotocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Subprotocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Subprotocol}
 */
proto.structprotos.Subprotocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionmajor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionminor(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSupportedentities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Subprotocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Subprotocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Subprotocol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Subprotocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersionmajor();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getVersionminor();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSupportedentitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.structprotos.Subprotocol.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.structprotos.Subprotocol.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 VersionMajor = 2;
 * @return {number}
 */
proto.structprotos.Subprotocol.prototype.getVersionmajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.structprotos.Subprotocol.prototype.setVersionmajor = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 VersionMinor = 3;
 * @return {number}
 */
proto.structprotos.Subprotocol.prototype.getVersionminor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.structprotos.Subprotocol.prototype.setVersionminor = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string SupportedEntities = 4;
 * @return {!Array.<string>}
 */
proto.structprotos.Subprotocol.prototype.getSupportedentitiesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.structprotos.Subprotocol.prototype.setSupportedentitiesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.structprotos.Subprotocol.prototype.addSupportedentities = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.structprotos.Subprotocol.prototype.clearSupportedentitiesList = function() {
  this.setSupportedentitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Protocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.structprotos.Protocol.repeatedFields_, null);
};
goog.inherits(proto.structprotos.Protocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Protocol.displayName = 'proto.structprotos.Protocol';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.structprotos.Protocol.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Protocol.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Protocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Protocol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Protocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionmajor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    versionminor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subprotocolsList: jspb.Message.toObjectList(msg.getSubprotocolsList(),
    proto.structprotos.Subprotocol.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Protocol}
 */
proto.structprotos.Protocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Protocol;
  return proto.structprotos.Protocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Protocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Protocol}
 */
proto.structprotos.Protocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionmajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionminor(value);
      break;
    case 3:
      var value = new proto.structprotos.Subprotocol;
      reader.readMessage(value,proto.structprotos.Subprotocol.deserializeBinaryFromReader);
      msg.addSubprotocols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Protocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Protocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Protocol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Protocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionmajor();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVersionminor();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSubprotocolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.structprotos.Subprotocol.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 VersionMajor = 1;
 * @return {number}
 */
proto.structprotos.Protocol.prototype.getVersionmajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.structprotos.Protocol.prototype.setVersionmajor = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 VersionMinor = 2;
 * @return {number}
 */
proto.structprotos.Protocol.prototype.getVersionminor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.structprotos.Protocol.prototype.setVersionminor = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Subprotocol Subprotocols = 3;
 * @return {!Array.<!proto.structprotos.Subprotocol>}
 */
proto.structprotos.Protocol.prototype.getSubprotocolsList = function() {
  return /** @type{!Array.<!proto.structprotos.Subprotocol>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.structprotos.Subprotocol, 3));
};


/** @param {!Array.<!proto.structprotos.Subprotocol>} value */
proto.structprotos.Protocol.prototype.setSubprotocolsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.structprotos.Subprotocol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.structprotos.Subprotocol}
 */
proto.structprotos.Protocol.prototype.addSubprotocols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.structprotos.Subprotocol, opt_index);
};


proto.structprotos.Protocol.prototype.clearSubprotocolsList = function() {
  this.setSubprotocolsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.structprotos.Client = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.structprotos.Client, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.structprotos.Client.displayName = 'proto.structprotos.Client';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.structprotos.Client.prototype.toObject = function(opt_includeInstance) {
  return proto.structprotos.Client.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.structprotos.Client} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Client.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionmajor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    versionminor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    versionpatch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    clientname: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.structprotos.Client}
 */
proto.structprotos.Client.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.structprotos.Client;
  return proto.structprotos.Client.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.structprotos.Client} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.structprotos.Client}
 */
proto.structprotos.Client.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionmajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionminor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionpatch(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.structprotos.Client.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.structprotos.Client.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.structprotos.Client} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.structprotos.Client.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionmajor();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVersionminor();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getVersionpatch();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getClientname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 VersionMajor = 1;
 * @return {number}
 */
proto.structprotos.Client.prototype.getVersionmajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.structprotos.Client.prototype.setVersionmajor = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 VersionMinor = 2;
 * @return {number}
 */
proto.structprotos.Client.prototype.getVersionminor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.structprotos.Client.prototype.setVersionminor = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 VersionPatch = 3;
 * @return {number}
 */
proto.structprotos.Client.prototype.getVersionpatch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.structprotos.Client.prototype.setVersionpatch = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string ClientName = 4;
 * @return {string}
 */
proto.structprotos.Client.prototype.getClientname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.structprotos.Client.prototype.setClientname = function(value) {
  jspb.Message.setField(this, 4, value);
};


goog.object.extend(exports, proto.structprotos);
