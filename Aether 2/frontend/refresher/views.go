// Frontend > Refresher > Views
// This package contains the special locations generated by the refresher loop, such as the home view, and the popular. These are called views, and they don't actually compile or generate new data in each way, they're just collections of the existing compiled data in a different order. These are compiled and updated, not rendered on the fly.

package refresher

import (
	// "aether-core/frontend/beapiconsumer"
	// "aether-core/frontend/clapiconsumer"
	"aether-core/frontend/festructs"
	// "aether-core/io/api"
	// pbstructs "aether-core/protos/mimapi"
	"aether-core/services/globals"
	"aether-core/services/logging"
	// // "github.com/davecgh/go-spew/spew"
	// // "fmt"
	// "encoding/json"
	// "strings"
	// "sync"
	"github.com/asdine/storm/q"
	"time"
)

// GenerateHomeView gets the top 10 most popular items in the communities you subscribe to, and sort them by rank.
func GenerateHomeView() {
	logging.Logf(1, "Home view generator is running")
	start := time.Now()
	// get subscribed boards fingerprints
	sbs := globals.FrontendConfig.ContentRelations.GetAllSubbedBoards()
	// Get the underlying compiled boards
	subbedBoardFps := []string{}
	for k, _ := range sbs {
		if !sbs[k].Notify {
			continue
		}
		subbedBoardFps = append(subbedBoardFps, sbs[k].Fingerprint)
	}
	boardCarriers := getBoardsByFpList(subbedBoardFps)
	var thrs festructs.CThreadBatch
	for k, _ := range *boardCarriers {
		thrlen := min(len((*boardCarriers)[k].Threads), 10)
		thrs = append(thrs, (*boardCarriers)[k].Threads[0:thrlen]...)
	}
	thrs.SortByScore()
	globals.KvInstance.Save(&festructs.HomeViewCarrier{
		Id:      1,
		Threads: thrs,
	})
	elapsed := time.Since(start)
	logging.Logf(1, "Home view generator took %v seconds.", elapsed.Seconds())
}

/*subbed, notify, lastseen := globals.FrontendConfig.ContentRelations.IsSubbedBoard(resp.Board.Fingerprint)

we also need to care about notify - it controls what gets into the home view.

*/

// GeneratePopularView gets the top 10 most popular items in each of the whitelisted communities and sorts them by rank.
func GeneratePopularView() {
	logging.Logf(1, "Popular view generator is running")
	start := time.Now()
	boardCarriers := []festructs.BoardCarrier{}
	// check if sfwlist is disabled
	if globals.FrontendConfig.ContentRelations.SFWList.GetSFWListDisabled() {
		// sfwlist disabled
		err := globals.KvInstance.All(&boardCarriers)
		if err != nil {
			logging.Logf(1, "Getting boards while SFWList disabled errored out. Error: %v", err)
			return
		}
	} else {
		// sfwlist enabled
		boardCarriers = *getBoardsByFpList(globals.FrontendConfig.ContentRelations.SFWList.Boards)
	}
	var thrs festructs.CThreadBatch
	for k, _ := range boardCarriers {
		thrlen := min(len(boardCarriers[k].Threads), 10)
		thrs = append(thrs, boardCarriers[k].Threads[0:thrlen]...)
	}
	thrs.SortByScore()
	globals.KvInstance.Save(&festructs.PopularViewCarrier{
		Id:      1,
		Threads: thrs,
	})
	elapsed := time.Since(start)
	logging.Logf(1, "Popular view generator took %v seconds.", elapsed.Seconds())
}

func getBoardsByFpList(boardFingerprints []string) *[]festructs.BoardCarrier {
	query := globals.KvInstance.Select(q.In("Fingerprint", boardFingerprints))
	var bcs []festructs.BoardCarrier
	query.Find(&bcs)
	return &bcs
}

/*----------  Internal util functions  ----------*/

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
